import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import * as fs from 'fs';
import * as path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ LocalPDF
 */

const FIXTURES_DIR = path.join(__dirname, 'fixtures');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(FIXTURES_DIR)) {
  fs.mkdirSync(FIXTURES_DIR, { recursive: true });
}

async function createBasicPDF(filename: string, content: string): Promise<void> {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([600, 400]);
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  page.drawText(content, {
    x: 50,
    y: 300,
    size: 16,
    font,
    color: rgb(0, 0, 0),
  });

  const pdfBytes = await pdfDoc.save();
  fs.writeFileSync(path.join(FIXTURES_DIR, filename), pdfBytes);
  console.log(`‚úÖ Created ${filename}`);
}

async function createMultiPagePDF(filename: string, pageCount: number): Promise<void> {
  const pdfDoc = await PDFDocument.create();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  for (let i = 1; i <= pageCount; i++) {
    const page = pdfDoc.addPage([600, 400]);
    page.drawText(`Page ${i} of ${pageCount}`, {
      x: 50,
      y: 300,
      size: 20,
      font,
      color: rgb(0, 0, 0),
    });

    page.drawText(`This is content for page ${i}`, {
      x: 50,
      y: 250,
      size: 14,
      font,
      color: rgb(0.2, 0.2, 0.2),
    });
  }

  const pdfBytes = await pdfDoc.save();
  fs.writeFileSync(path.join(FIXTURES_DIR, filename), pdfBytes);
  console.log(`‚úÖ Created ${filename} with ${pageCount} pages`);
}

async function createLargePDF(filename: string, targetSizeMB: number): Promise<void> {
  const pdfDoc = await PDFDocument.create();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const pagesNeeded = Math.ceil(targetSizeMB * 20); // –ü—Ä–∏–º–µ—Ä–Ω–æ 50KB –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

  for (let i = 1; i <= pagesNeeded; i++) {
    const page = pdfDoc.addPage([600, 800]);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–∫—Å—Ç–æ–º
    for (let line = 0; line < 40; line++) {
      page.drawText(`Line ${line + 1} on page ${i} - Lorem ipsum dolor sit amet, consectetur adipiscing elit.`, {
        x: 50,
        y: 750 - (line * 18),
        size: 12,
        font,
        color: rgb(0, 0, 0),
      });
    }
  }

  const pdfBytes = await pdfDoc.save();
  fs.writeFileSync(path.join(FIXTURES_DIR, filename), pdfBytes);
  const sizeKB = Math.round(pdfBytes.length / 1024);
  console.log(`‚úÖ Created ${filename} (${sizeKB}KB, target: ${targetSizeMB}MB)`);
}

async function createLandscapePDF(filename: string): Promise<void> {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([800, 600]); // –ê–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  page.drawText('Landscape Document', {
    x: 300,
    y: 400,
    size: 24,
    font,
    color: rgb(0, 0, 0),
  });

  page.drawText('This document is in landscape orientation', {
    x: 250,
    y: 350,
    size: 14,
    font,
    color: rgb(0.3, 0.3, 0.3),
  });

  const pdfBytes = await pdfDoc.save();
  fs.writeFileSync(path.join(FIXTURES_DIR, filename), pdfBytes);
  console.log(`‚úÖ Created ${filename} (landscape)`);
}

async function createTextDocumentPDF(filename: string): Promise<void> {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([600, 800]);
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  const textContent = [
    'Text Extraction Test Document',
    '',
    'This document contains extractable text content.',
    'It includes multiple paragraphs and different formatting.',
    '',
    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
    'Ut enim ad minim veniam, quis nostrud exercitation.',
    '',
    'Special characters: ¬© ¬Æ ‚Ñ¢ ‚Ç¨ $ ¬£ ¬•',
    'Numbers: 123456789',
    'Symbols: @#$%^&*()_+-=[]{}|;:,.<>?',
  ];

  let yPosition = 750;
  for (const line of textContent) {
    if (line) {
      page.drawText(line, {
        x: 50,
        y: yPosition,
        size: 12,
        font,
        color: rgb(0, 0, 0),
      });
    }
    yPosition -= 20;
  }

  const pdfBytes = await pdfDoc.save();
  fs.writeFileSync(path.join(FIXTURES_DIR, filename), pdfBytes);
  console.log(`‚úÖ Created ${filename} (text document)`);
}

async function createBlankPDF(filename: string): Promise<void> {
  const pdfDoc = await PDFDocument.create();
  pdfDoc.addPage([600, 800]); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π

  const pdfBytes = await pdfDoc.save();
  fs.writeFileSync(path.join(FIXTURES_DIR, filename), pdfBytes);
  console.log(`‚úÖ Created ${filename} (blank)`);
}

async function createInvalidTextFile(): Promise<void> {
  const content = 'This is not a PDF file\nIt is a text file for testing error handling';
  fs.writeFileSync(path.join(FIXTURES_DIR, 'invalid-file.txt'), content);
  console.log(`‚úÖ Created invalid-file.txt (for error testing)`);
}

async function generateAllTestFixtures(): Promise<void> {
  console.log('üöÄ Generating test fixtures for LocalPDF E2E tests...\n');

  try {
    // –ë–∞–∑–æ–≤—ã–µ PDF —Ñ–∞–π–ª—ã
    await createBasicPDF('test1.pdf', 'Test Document 1\nSimple PDF for merge testing');
    await createBasicPDF('test2.pdf', 'Test Document 2\nAnother PDF for merge testing');

    // –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    await createMultiPagePDF('multi-page.pdf', 5);

    // –î–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    await createLargePDF('large-file.pdf', 5); // 5MB
    await createLargePDF('very-large.pdf', 50); // 50MB
    await createLargePDF('medium-size.pdf', 2); // 2MB

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    await createLandscapePDF('landscape-document.pdf');
    await createTextDocumentPDF('text-document.pdf');
    await createBlankPDF('blank-document.pdf');

    // –ö–æ–ø–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    await createBasicPDF('test-document.pdf', 'Document for watermark testing');
    await createMultiPagePDF('visual-document.pdf', 3);

    // –§–∞–π–ª –¥–ª—è OCR —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞)
    await createTextDocumentPDF('scanned-document.pdf');

    // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª
    await createInvalidTextFile();

    console.log('\n‚ú® All test fixtures generated successfully!');
    console.log(`üìÅ Files created in: ${FIXTURES_DIR}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    const files = fs.readdirSync(FIXTURES_DIR);
    console.log('\nüìä File sizes:');
    files.forEach(file => {
      const filePath = path.join(FIXTURES_DIR, file);
      const stats = fs.statSync(filePath);
      const sizeKB = Math.round(stats.size / 1024);
      console.log(`   ${file}: ${sizeKB}KB`);
    });

  } catch (error) {
    console.error('‚ùå Error generating fixtures:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  generateAllTestFixtures();
}

export { generateAllTestFixtures };
