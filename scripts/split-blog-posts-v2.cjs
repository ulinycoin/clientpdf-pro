#!/usr/bin/env node

/**
 * Script to split blogPosts.ts into separate files by language
 * This optimizes mobile performance by enabling lazy loading
 *
 * Strategy: Import the original file as a module and split by language
 * Usage: node scripts/split-blog-posts-v2.cjs
 */

const fs = require('fs');
const path = require('path');

const SOURCE_FILE = path.join(__dirname, '../src/data/blogPosts.ts.backup');
const OUTPUT_DIR = path.join(__dirname, '../src/data/blogPosts');

console.log('üì¶ Splitting blog posts by language (v2)...\n');

// We'll use a different approach: eval the TypeScript file after converting to JS
// Read and parse the source file
let sourceContent = fs.readFileSync(SOURCE_FILE, 'utf-8');

// Remove TypeScript types
sourceContent = sourceContent
  .replace(/import\s+{[^}]+}\s+from\s+['"][^'"]+['"];?\n?/g, '') // Remove imports
  .replace(/:\s*BlogPost\[\]/g, '') // Remove type annotations
  .replace(/const blogPostsData/g, 'const blogPostsData'); // Keep const

// Extract just the array content
const arrayMatch = sourceContent.match(/const blogPostsData\s*=\s*(\[[^\]]*\](?:[^]*?)\]);/s);
if (!arrayMatch) {
  console.error('‚ùå Could not find blogPostsData array');
  console.error('Trying alternative pattern...');

  // Try to find array start and manually parse
  const startIdx = sourceContent.indexOf('const blogPostsData');
  if (startIdx === -1) {
    console.error('‚ùå File does not contain blogPostsData');
    process.exit(1);
  }

  // Find the opening bracket
  const bracketIdx = sourceContent.indexOf('[', startIdx);
  if (bracketIdx === -1) {
    console.error('‚ùå Could not find array opening bracket');
    process.exit(1);
  }

  // Use a simpler approach: just split by comment markers
  const lines = sourceContent.split('\n');
  const posts = {
    en: [],
    ru: [],
    de: [],
    fr: [],
    es: [],
  };

  let currentLang = null;
  let currentPost = [];
  let inPost = false;
  let braceCount = 0;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // Detect language comment
    if (line.includes('// German Blog Posts') || line.trim() === '// German Blog Posts') {
      currentLang = 'de';
      continue;
    } else if (line.includes('// English Blog Posts') || line.includes('English-language blog posts')) {
      currentLang = 'en';
      continue;
    } else if (line.includes('// Russian Blog Posts') || line.includes('Russian-language blog posts')) {
      currentLang = 'ru';
      continue;
    } else if (line.includes('// French Blog Posts') || line.includes('French-language blog posts')) {
      currentLang = 'fr';
      continue;
    } else if (line.includes('// Spanish Blog Posts') || line.includes('Spanish-language blog posts')) {
      currentLang = 'es';
      continue;
    }

    // Detect start of post object
    if (line.trim().startsWith('{') && !inPost && currentLang) {
      inPost = true;
      currentPost = [line];
      braceCount = (line.match(/{/g) || []).length - (line.match(/}/g) || []).length;
      continue;
    }

    if (inPost) {
      currentPost.push(line);
      braceCount += (line.match(/{/g) || []).length;
      braceCount -= (line.match(/}/g) || []).length;

      // Check if post is complete
      if (braceCount === 0 && line.trim().startsWith('}')) {
        // Post complete
        const postText = currentPost.join('\n');
        if (currentLang && posts[currentLang]) {
          posts[currentLang].push(postText);
        }
        inPost = false;
        currentPost = [];
        continue;
      }
    }
  }

  // Write output files
  if (!fs.existsSync(OUTPUT_DIR)) {
    fs.mkdirSync(OUTPUT_DIR, { recursive: true });
  }

  const languages = ['en', 'ru', 'de', 'fr', 'es'];
  const stats = {};

  for (const lang of languages) {
    const langPosts = posts[lang];
    const count = langPosts.length;

    if (count === 0) {
      console.log(`‚ö†Ô∏è  ${lang.toUpperCase()}: No posts found`);
      continue;
    }

    const postsContent = langPosts.map(p => p).join(',\n\n');

    const fileContent = `import { BlogPost } from '../../types/blog';

/**
 * Blog posts for ${lang.toUpperCase()} language
 * Auto-generated by scripts/split-blog-posts-v2.cjs
 * Generated on ${new Date().toISOString()}
 *
 * This file is lazily loaded for better mobile performance
 */

const blogPosts${lang.toUpperCase()}: BlogPost[] = [
${postsContent}
];

export default blogPosts${lang.toUpperCase()};
`;

    const outputFile = path.join(OUTPUT_DIR, `blogPosts.${lang}.ts`);
    fs.writeFileSync(outputFile, fileContent, 'utf-8');

    const fileSizeKB = (fileContent.length / 1024).toFixed(2);
    stats[lang] = { count, sizeKB: fileSizeKB };

    console.log(`‚úÖ ${lang.toUpperCase()}: ${count} posts ‚Üí blogPosts.${lang}.ts (${fileSizeKB} KB)`);
  }

  // Generate summary
  console.log('\nüìä Summary:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  const totalPosts = Object.values(stats).reduce((sum, s) => sum + s.count, 0);
  const totalSize = Object.values(stats).reduce((sum, s) => sum + parseFloat(s.sizeKB), 0).toFixed(2);
  const avgPerLang = (totalSize / languages.length).toFixed(2);

  console.log(`Total posts: ${totalPosts}`);
  console.log(`Total size: ${totalSize} KB`);
  console.log(`Avg per language: ${avgPerLang} KB`);
  console.log(`\n‚ú® Mobile improvement: ~${(totalSize - avgPerLang).toFixed(0)} KB saved per page load`);
  console.log(`   (only loads 1 language instead of all ${languages.length})\n`);

  process.exit(0);
}
