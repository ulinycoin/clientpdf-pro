#!/usr/bin/env node

/**
 * Script to split blogPosts.ts into separate files by language
 * This optimizes mobile performance by enabling lazy loading
 *
 * Usage: node scripts/split-blog-posts.js
 */

const fs = require('fs');
const path = require('path');

const SOURCE_FILE = path.join(__dirname, '../src/data/blogPosts.ts');
const OUTPUT_DIR = path.join(__dirname, '../src/data/blogPosts');

console.log('📦 Splitting blog posts by language...\n');

// Read the source file
const sourceContent = fs.readFileSync(SOURCE_FILE, 'utf-8');

// Extract the array content
const arrayMatch = sourceContent.match(/const blogPostsData: BlogPost\[\] = \[([\s\S]*)\];/);
if (!arrayMatch) {
  console.error('❌ Failed to find blog posts array in source file');
  process.exit(1);
}

const postsArrayContent = arrayMatch[1];

// Split into individual post objects
// Each post starts with "{"  at the beginning of a line (after whitespace)
const postRegex = /\n\s+{[\s\S]*?language:\s*'([a-z]{2})'[\s\S]*?\n\s+},/g;

const postsByLanguage = {
  en: [],
  ru: [],
  de: [],
  fr: [],
  es: [],
};

let match;
while ((match = postRegex.exec(postsArrayContent)) !== null) {
  const postObject = match[0].trim();
  const language = match[1];

  if (postsByLanguage[language]) {
    postsByLanguage[language].push(postObject);
  }
}

// Create output directory if it doesn't exist
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// Write separate files for each language
const languages = ['en', 'ru', 'de', 'fr', 'es'];
const stats = {};

for (const lang of languages) {
  const posts = postsByLanguage[lang];
  const count = posts.length;

  const fileContent = `import { BlogPost } from '../../types/blog';

/**
 * Blog posts for ${lang.toUpperCase()} language
 * Auto-generated by scripts/split-blog-posts.js
 * Generated on ${new Date().toISOString()}
 *
 * This file is lazily loaded for better mobile performance
 */

const blogPosts${lang.toUpperCase()}: BlogPost[] = [
${posts.join('\n\n')}
];

export default blogPosts${lang.toUpperCase()};
`;

  const outputFile = path.join(OUTPUT_DIR, `blogPosts.${lang}.ts`);
  fs.writeFileSync(outputFile, fileContent, 'utf-8');

  const fileSizeKB = (fileContent.length / 1024).toFixed(2);
  stats[lang] = { count, sizeKB: fileSizeKB };

  console.log(`✅ ${lang.toUpperCase()}: ${count} posts → blogPosts.${lang}.ts (${fileSizeKB} KB)`);
}

// Generate summary
console.log('\n📊 Summary:');
console.log('─────────────────────────────────────');
const totalPosts = Object.values(stats).reduce((sum, s) => sum + s.count, 0);
const totalSize = Object.values(stats).reduce((sum, s) => sum + parseFloat(s.sizeKB), 0).toFixed(2);
const avgPerLang = (totalSize / languages.length).toFixed(2);

console.log(`Total posts: ${totalPosts}`);
console.log(`Total size: ${totalSize} KB`);
console.log(`Avg per language: ${avgPerLang} KB`);
console.log(`\n✨ Mobile improvement: ~${(totalSize - avgPerLang).toFixed(0)} KB saved per page load`);
console.log(`   (only loads 1 language instead of all ${languages.length})\n`);

console.log('🎯 Next steps:');
console.log('   1. Update simpleBlogService.ts to use lazy loading');
console.log('   2. Test with: npm run build');
console.log('   3. Verify bundle sizes reduced\n');
