#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —Ç–∏–ø–æ–≤ i18n –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
 */

import { readFileSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const projectRoot = join(__dirname, '..');
const localesPath = join(projectRoot, 'src', 'locales');
const typesPath = join(projectRoot, 'src', 'types', 'i18n.ts');

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
const LANGUAGES = ['en', 'ru', 'de', 'fr', 'es'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ —Ç–∏–ø–æ–≤
function extractKeysFromInterface(content) {
  const keys = [];
  const lines = content.split('\n');
  let currentPath = [];
  let braceCount = 0;

  for (const line of lines) {
    const trimmed = line.trim();

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed === '') {
      continue;
    }

    // –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ —Å–≤–æ–π—Å—Ç–≤
    const interfaceMatch = trimmed.match(/interface\s+(\w+)/);
    if (interfaceMatch) {
      continue;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
    const openBraces = (trimmed.match(/{/g) || []).length;
    const closeBraces = (trimmed.match(/}/g) || []).length;

    // –ò—â–µ–º –∫–ª—é—á–∏ —Å–≤–æ–π—Å—Ç–≤
    const keyMatch = trimmed.match(/^(\w+):\s*{/);
    if (keyMatch) {
      currentPath.push(keyMatch[1]);
      braceCount += openBraces - closeBraces;
    } else {
      const simpleKeyMatch = trimmed.match(/^(\w+):\s*string;?/);
      if (simpleKeyMatch) {
        const fullKey = [...currentPath, simpleKeyMatch[1]].join('.');
        keys.push(fullKey);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
    braceCount += openBraces - closeBraces;
    if (braceCount < currentPath.length) {
      currentPath = currentPath.slice(0, braceCount);
    }
  }

  return keys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function extractKeysFromTranslation(obj, prefix = '') {
  const keys = [];

  for (const [key, value] of Object.entries(obj)) {
    const fullKey = prefix ? `${prefix}.${key}` : key;

    if (typeof value === 'object' && value !== null) {
      keys.push(...extractKeysFromTranslation(value, fullKey));
    } else if (typeof value === 'string') {
      keys.push(fullKey);
    }
  }

  return keys;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async function validateTranslations() {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');

  // –ß–∏—Ç–∞–µ–º —Ç–∏–ø—ã
  let typesContent;
  try {
    typesContent = readFileSync(typesPath, 'utf8');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç–∏–ø–æ–≤: ${error.message}`);
    process.exit(1);
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —Ç–∏–ø–æ–≤
  console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Ç–∏–ø–æ–≤...');
  const expectedKeys = extractKeysFromInterface(typesContent);
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${expectedKeys.length} –∫–ª—é—á–µ–π –≤ —Ç–∏–ø–∞—Ö\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫
  const results = {};

  for (const lang of LANGUAGES) {
    console.log(`üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞: ${lang}`);

    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
      const modulePath = `file://${join(localesPath, `${lang}.js`)}`;
      const module = await import(modulePath);
      const translations = module[lang];

      if (!translations) {
        console.error(`‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è ${lang} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        continue;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const actualKeys = extractKeysFromTranslation(translations);

      // –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
      const missingKeys = expectedKeys.filter(key => !actualKeys.includes(key));
      const extraKeys = actualKeys.filter(key => !expectedKeys.includes(key));

      results[lang] = {
        totalExpected: expectedKeys.length,
        totalActual: actualKeys.length,
        missing: missingKeys,
        extra: extraKeys
      };

      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${actualKeys.length} –∫–ª—é—á–µ–π`);
      console.log(`  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${missingKeys.length} –∫–ª—é—á–µ–π`);
      console.log(`  ‚ûï –õ–∏—à–Ω–∏—Ö: ${extraKeys.length} –∫–ª—é—á–µ–π\n`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è ${lang}: ${error.message}\n`);
      results[lang] = { error: error.message };
    }
  }

  // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢\n');

  for (const [lang, result] of Object.entries(results)) {
    if (result.error) {
      console.log(`${lang}: –û–®–ò–ë–ö–ê - ${result.error}`);
      continue;
    }

    console.log(`${lang}:`);
    console.log(`  –ü–æ–∫—Ä—ã—Ç–∏–µ: ${result.totalActual}/${result.totalExpected} (${Math.round(result.totalActual/result.totalExpected*100)}%)`);

    if (result.missing.length > 0) {
      console.log(`  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏:`);
      result.missing.slice(0, 10).forEach(key => console.log(`    - ${key}`));
      if (result.missing.length > 10) {
        console.log(`    ... –∏ –µ—â–µ ${result.missing.length - 10} –∫–ª—é—á–µ–π`);
      }
    }

    if (result.extra.length > 0) {
      console.log(`  –õ–∏—à–Ω–∏–µ –∫–ª—é—á–∏:`);
      result.extra.slice(0, 5).forEach(key => console.log(`    + ${key}`));
      if (result.extra.length > 5) {
        console.log(`    ... –∏ –µ—â–µ ${result.extra.length - 5} –∫–ª—é—á–µ–π`);
      }
    }
    console.log('');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ü–∏–∏
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:\n');

  for (const [lang, result] of Object.entries(results)) {
    if (result.error) continue;

    const criticalMissing = result.missing.filter(key =>
      key.startsWith('components.') ||
      key.includes('relatedTools') ||
      key.includes('excelToPdf')
    );

    if (criticalMissing.length > 0) {
      console.log(`${lang}: ${criticalMissing.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      criticalMissing.forEach(key => console.log(`  ‚ùå ${key}`));
      console.log('');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
validateTranslations().catch(console.error);
