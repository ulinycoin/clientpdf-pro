import React, { useState } from 'react';\nimport { FileItem, PDFOperationType, PDFProcessingResult } from '../types';\nimport Header from '../components/organisms/Header';\nimport FileUploadZone from '../components/molecules/FileUploadZone';\nimport FileList from '../components/molecules/FileList';\nimport ToolsGrid from '../components/organisms/ToolsGrid';\nimport MergeTool from '../components/organisms/MergeTool';\nimport CompressionTool from '../components/organisms/CompressionTool';\nimport { useFileUpload } from '../hooks/useFileUpload';\nimport { downloadBlob, generateFilename } from '../utils/fileHelpers';\n\nconst HomePage: React.FC = () => {\n  const {\n    files,\n    isDragActive,\n    isUploading,\n    addFiles,\n    removeFile,\n    retryFile,\n    getRootProps,\n    getInputProps\n  } = useFileUpload({\n    maxFiles: 10,\n    maxSizeBytes: 100 * 1024 * 1024, // 100MB\n    acceptedTypes: ['application/pdf'],\n    autoProcess: true\n  });\n\n  const [selectedTool, setSelectedTool] = useState<PDFOperationType | null>(null);\n\n  const handleFileSelect = (selectedFiles: File[]) => {\n    addFiles(selectedFiles);\n  };\n\n  const handleToolSelect = (toolType: PDFOperationType) => {\n    const completedFiles = files\n      .filter(f => f.status === 'completed')\n      .map(f => f.file);\n    \n    if (completedFiles.length === 0) {\n      alert('Please upload some PDF files first!');\n      return;\n    }\n\n    setSelectedTool(toolType);\n  };\n\n  const handleCloseTool = () => {\n    setSelectedTool(null);\n  };\n\n  const handleToolComplete = (result: PDFProcessingResult | PDFProcessingResult[]) => {\n    if (Array.isArray(result)) {\n      // Handle multiple results (e.g., from split operation)\n      result.forEach((res, index) => {\n        if (res.success && res.data) {\n          const filename = generateFilename(\n            `split_part_${index + 1}`,\n            'processed',\n            'pdf'\n          );\n          downloadBlob(res.data, filename);\n        }\n      });\n    } else {\n      // Handle single result\n      if (result.success && result.data) {\n        const toolName = selectedTool || 'processed';\n        const filename = generateFilename(\n          `${toolName}_result`,\n          'processed',\n          'pdf'\n        );\n        downloadBlob(result.data, filename);\n      }\n    }\n    \n    setSelectedTool(null);\n  };\n\n  const completedFiles = files\n    .filter(f => f.status === 'completed')\n    .map(f => f.file);\n\n  const renderSelectedTool = () => {\n    if (!selectedTool) return null;\n\n    const props = {\n      files: completedFiles,\n      onComplete: handleToolComplete,\n      onClose: handleCloseTool\n    };\n\n    switch (selectedTool) {\n      case PDFOperationType.MERGE:\n        return <MergeTool {...props} />;\n      case PDFOperationType.COMPRESS:\n        return <CompressionTool {...props} />;\n      // Add other tools as they're implemented\n      default:\n        return (\n          <div className=\"bg-white rounded-lg shadow-lg p-6\">\n            <h2 className=\"text-xl font-bold mb-4\">\n              {selectedTool.charAt(0).toUpperCase() + selectedTool.slice(1)} Tool\n            </h2>\n            <p className=\"text-gray-600 mb-4\">\n              This tool is coming soon! We're working hard to bring you this feature.\n            </p>\n            <button\n              onClick={handleCloseTool}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Close\n            </button>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\" {...getRootProps()}>\n      <input {...getInputProps()} />\n      <Header />\n      \n      <main>\n        {/* Hero Section */}\n        <div className=\"max-w-4xl mx-auto px-4 py-16\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Free PDF Tools\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-8\">\n              Convert, merge, split and compress PDFs - all locally in your browser\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              ðŸ”’ Your files never leave your device â€¢ ðŸš€ Fast processing â€¢ ðŸ’¯ Completely free\n            </p>\n          </div>\n\n          {/* File Upload Zone */}\n          <div className=\"mb-8\">\n            <FileUploadZone\n              onFileSelect={handleFileSelect}\n              dragActive={isDragActive}\n              uploading={isUploading}\n              maxFiles={10}\n              maxSizeBytes={100 * 1024 * 1024}\n              className=\"mb-6\"\n            />\n          </div>\n\n          {/* File List */}\n          {files.length > 0 && (\n            <div className=\"mb-8\">\n              <FileList\n                files={files}\n                onRemoveFile={removeFile}\n                onRetryFile={retryFile}\n                showProgress={true}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Selected Tool */}\n        {selectedTool && (\n          <div className=\"max-w-4xl mx-auto px-4 mb-16\">\n            {renderSelectedTool()}\n          </div>\n        )}\n\n        {/* Tools Section */}\n        {!selectedTool && (\n          <div className=\"max-w-7xl mx-auto px-4 pb-16\">\n            <ToolsGrid \n              onToolSelect={handleToolSelect}\n              disabledTools={completedFiles.length === 0 ? [\n                PDFOperationType.MERGE,\n                PDFOperationType.COMPRESS,\n                PDFOperationType.SPLIT,\n                PDFOperationType.ROTATE,\n                PDFOperationType.WATERMARK\n              ] : []}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default HomePage;"