/**
 * Text Encoding Utilities for PDF Processing
 * 
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö,
 * –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è WinAnsi –∏ Unicode.
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª –≤ WinAnsi (Windows-1252)
 */
export function isWinAnsiCompatible(char: string): boolean {
  const code = char.charCodeAt(0);
  
  // ASCII symbols (0-127) –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
  if (code <= 127) return true;
  
  // Windows-1252 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (128-255)
  // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 128-159 –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ Windows-1252
  const unsupportedCodes = [129, 141, 143, 144, 157];
  if (code >= 128 && code <= 255 && !unsupportedCodes.includes(code)) {
    return true;
  }
  
  return false;
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª—ã, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å WinAnsi
 */
export function sanitizeTextForPDF(text: string, options: {
  removeUnsupported?: boolean;
  replaceEmojis?: boolean;
  customReplacements?: Record<string, string>;
} = {}): string {
  const {
    removeUnsupported = true,
    replaceEmojis = true,
    customReplacements = {}
  } = options;

  let result = text;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã
  for (const [from, to] of Object.entries(customReplacements)) {
    result = result.replace(new RegExp(escapeRegExp(from), 'g'), to);
  }

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤
  const commonReplacements: Record<string, string> = {
    // Quotes - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ ASCII –∫–æ–¥—ã
    '\u201C': '"', // "
    '\u201D': '"', // "
    '\u2018': "'", // '
    '\u2019': "'", // '
    
    // Dashes
    '\u2014': '-', // ‚Äî
    '\u2013': '-', // ‚Äì
    
    // Common emojis –∏ Unicode —Å–∏–º–≤–æ–ª—ã
    '\u1F512': '[PROTECTED]', // üîí
    '\u1F513': '[UNLOCKED]',  // üîì
    '\u1F4C4': '[PDF]',       // üìÑ
    '\u2713': '[CHECK]',      // ‚úì
    '\u2717': '[X]',          // ‚úó
    '\u26A0': '[WARNING]',    // ‚ö†Ô∏è
    '\u1F6AB': '[BLOCKED]',   // üö´
    '\u1F4BE': '[SAVE]',      // üíæ
    '\u1F4C1': '[FOLDER]',    // üìÅ
    '\u1F50D': '[SEARCH]',    // üîç
    '\u23F1': '[TIME]',       // ‚è±Ô∏è
    '\u1F4CA': '[CHART]',     // üìä
    '\u1F527': '[TOOLS]',     // üîß
    '\u2699': '[SETTINGS]',   // ‚öôÔ∏è
    
    // Mathematical symbols
    '\u00D7': 'x',      // √ó
    '\u00F7': '/',      // √∑
    '\u00B1': '+/-',    // ¬±
    '\u2264': '<=',     // ‚â§
    '\u2265': '>=',     // ‚â•
    '\u2260': '!=',     // ‚â†
    
    // Arrows
    '\u2192': '->',     // ‚Üí
    '\u2190': '<-',     // ‚Üê
    '\u2191': '^',      // ‚Üë
    '\u2193': 'v',      // ‚Üì
    
    // Other common symbols
    '\u00A9': '(c)',        // ¬©
    '\u00AE': '(R)',        // ¬Æ
    '\u2122': '(TM)',       // ‚Ñ¢
    '\u00A7': 'section',    // ¬ß
    '\u00B6': 'paragraph',  // ¬∂
  };

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –∑–∞–º–µ–Ω—ã
  if (replaceEmojis) {
    for (const [from, to] of Object.entries(commonReplacements)) {
      result = result.replace(new RegExp(escapeRegExp(from), 'g'), to);
    }
  }

  // –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (removeUnsupported) {
    result = result.split('').map(char => {
      if (isWinAnsiCompatible(char)) {
        return char;
      } else {
        // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return isEmojiOrSymbol(char) ? '' : '?';
      }
    }).join('');
  }

  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
 */
function isEmojiOrSymbol(char: string): boolean {
  const code = char.charCodeAt(0);
  
  // Emoji ranges
  return (
    (code >= 0x1F600 && code <= 0x1F64F) || // Emoticons
    (code >= 0x1F300 && code <= 0x1F5FF) || // Misc Symbols and Pictographs
    (code >= 0x1F680 && code <= 0x1F6FF) || // Transport and Map Symbols
    (code >= 0x1F1E0 && code <= 0x1F1FF) || // Regional indicator symbols
    (code >= 0x2600 && code <= 0x26FF) ||   // Misc symbols
    (code >= 0x2700 && code <= 0x27BF) ||   // Dingbats
    (code >= 0xFE00 && code <= 0xFE0F) ||   // Variation selectors
    (code >= 0x1F900 && code <= 0x1F9FF) || // Supplemental Symbols and Pictographs
    (code >= 0x1FA70 && code <= 0x1FAFF)    // Symbols and Pictographs Extended-A
  );
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
 */
function escapeRegExp(string: string): string {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö PDF
 */
export function createSafePDFTitle(title: string): string {
  return sanitizeTextForPDF(title, {
    customReplacements: {
      '\u1F512': 'PROTECTED', // üîí
      '\u1F513': 'UNLOCKED',  // üîì
      '\u1F4C4': 'PDF',       // üìÑ
    }
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ PDF
 */
export function createSafePDFText(text: string): string {
  return sanitizeTextForPDF(text, {
    replaceEmojis: true,
    removeUnsupported: true
  });
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ PDF
 */
export function validatePDFText(text: string): {
  isValid: boolean;
  issues: string[];
  sanitized: string;
} {
  const issues: string[] = [];
  let isValid = true;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
  for (let i = 0; i < text.length; i++) {
    const char = text[i];
    if (!isWinAnsiCompatible(char)) {
      isValid = false;
      const code = char.charCodeAt(0);
      issues.push(`Character "${char}" (U+${code.toString(16).toUpperCase().padStart(4, '0')}) at position ${i} is not WinAnsi compatible`);
    }
  }

  const sanitized = sanitizeTextForPDF(text);

  return {
    isValid,
    issues,
    sanitized
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—â–∏—Ç—ã PDF
 */
export function createProtectionInfoText(password: string, fileName: string): string[] {
  const baseText = [
    `This PDF has been protected with password: "${password}"`,
    '',
    'IMPORTANT NOTICE:',
    'Due to browser limitations, this is a demonstration of password protection.',
    'The original PDF content is preserved but not encrypted with industry-standard encryption.',
    '',
    'For production use, please consider:',
    '‚Ä¢ Adobe Acrobat Pro for full PDF encryption',
    '‚Ä¢ Server-side PDF processing with proper encryption libraries',
    '‚Ä¢ Desktop PDF tools with advanced security features',
    '',
    'This tool is designed for basic privacy protection and',
    'educational purposes in a client-side environment.',
    '',
    `Original file: ${fileName}`,
    `Protection applied: ${new Date().toLocaleString()}`,
    `Password hint: ${password.length} characters`,
  ];

  // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
  return baseText.map(line => createSafePDFText(line));
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function logEncodingIssues(text: string, context: string = 'Unknown'): void {
  const validation = validatePDFText(text);
  
  if (!validation.isValid) {
    console.warn(`[PDF Text Encoding] Issues found in ${context}:`);
    validation.issues.forEach(issue => console.warn(`  - ${issue}`));
    console.warn(`  Sanitized text: "${validation.sanitized}"`);
  }
}

/**
 * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è PDF
 */
export const SAFE_PDF_MESSAGES = {
  PROTECTED_TITLE: 'PROTECTED - PASSWORD PROTECTED PDF',
  UNLOCKED_TITLE: 'UNLOCKED - PDF Unlocked Successfully',
  PROCESSING: 'Processing PDF...',
  ERROR: 'An error occurred',
  SUCCESS: 'Operation completed successfully',
  WARNING: 'Warning: Browser limitations apply',
  EDUCATIONAL_NOTICE: 'Educational tool - not for production encryption',
} as const;

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è PDF
 */
export function createSafeErrorMessage(error: string): string {
  return createSafePDFText(`Error: ${error}`);
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è TypeScript
 */
export interface PDFTextValidation {
  isValid: boolean;
  issues: string[];
  sanitized: string;
}

export interface PDFTextOptions {
  removeUnsupported?: boolean;
  replaceEmojis?: boolean;
  customReplacements?: Record<string, string>;
}
