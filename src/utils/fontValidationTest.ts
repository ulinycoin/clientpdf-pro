import { WatermarkFontManager } from '../services/watermarkFontManager';

/**
 * Test utility to validate font selection logic for mixed Cyrillic/Latin text
 */
export class FontValidationTest {
  private fontManager: WatermarkFontManager;

  constructor() {
    this.fontManager = WatermarkFontManager.getInstance();
  }

  /**
   * Test mixed content detection with various text samples
   */
  testMixedContentDetection(): void {
    console.log('üß™ Testing mixed content detection logic...');

    const testCases = [
      // Pure Cyrillic
      { text: '–≠—Ç–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç', expected: 'Embedded-Cyrillic', scenario: 'Pure Cyrillic' },
      { text: '–ú–æ—Å–∫–≤–∞, –¥–æ–∫—É–º–µ–Ω—Ç ‚Ññ12345', expected: 'Embedded-Cyrillic', scenario: 'Cyrillic with numbers' },
      
      // Pure Latin
      { text: 'This is English text', expected: 'Helvetica', scenario: 'Pure English' },
      { text: 'Document #12345 PDF', expected: 'Helvetica', scenario: 'English with numbers' },
      
      // Mixed content - these should use DejaVu-Sans
      { text: '–ú–æ—Å–∫–≤–∞ Moscow', expected: 'DejaVu-Sans', scenario: 'Russian + English cities' },
      { text: 'PDF –¥–æ–∫—É–º–µ–Ω—Ç', expected: 'DejaVu-Sans', scenario: 'English + Russian words' },
      { text: 'User ID: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', expected: 'DejaVu-Sans', scenario: 'English label + Russian value' },
      { text: 'Email: ivan@mail.ru –ò–º—è: –ò–≤–∞–Ω', expected: 'DejaVu-Sans', scenario: 'Mixed form data' },
      { text: 'Contract/–î–æ–≥–æ–≤–æ—Ä ‚Ññ123', expected: 'DejaVu-Sans', scenario: 'Bilingual contract' },
      { text: 'iPhone –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', expected: 'DejaVu-Sans', scenario: 'Brand + Russian word' },
      
      // Edge cases
      { text: '', expected: 'Helvetica', scenario: 'Empty text' },
      { text: '123456789', expected: 'Helvetica', scenario: 'Numbers only' },
      { text: '!@#$%^&*()', expected: 'Helvetica', scenario: 'Special characters only' },
      { text: '–ê', expected: 'Embedded-Cyrillic', scenario: 'Single Cyrillic letter' },
      { text: 'A', expected: 'Helvetica', scenario: 'Single Latin letter' },
      { text: 'A–∞', expected: 'DejaVu-Sans', scenario: 'One Latin + one Cyrillic' },
      
      // Real-world scenarios
      { text: '–û–û–û "Company Name Ltd"', expected: 'DejaVu-Sans', scenario: 'Russian entity with English name' },
      { text: 'www.—Å–∞–π—Ç.ru', expected: 'DejaVu-Sans', scenario: 'Mixed domain name' },
      { text: 'WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ', expected: 'DejaVu-Sans', scenario: 'App name + Russian word' }
    ];

    let passed = 0;
    let failed = 0;

    for (const testCase of testCases) {
      const result = this.fontManager.getBestFont(testCase.text);
      const success = result === testCase.expected;
      
      if (success) {
        passed++;
        console.log(`‚úÖ PASS: "${testCase.scenario}" ‚Üí ${result}`);
      } else {
        failed++;
        console.log(`‚ùå FAIL: "${testCase.scenario}" ‚Üí Expected: ${testCase.expected}, Got: ${result}`);
        console.log(`   Text: "${testCase.text}"`);
        
        // Additional debug info
        const hasCyrillic = this.fontManager.containsCyrillic(testCase.text);
        const hasLatin = /[A-Za-z]/.test(testCase.text);
        const isPredominantlyCyrillic = this.fontManager.isPredominantlyCyrillic(testCase.text);
        console.log(`   Debug: Cyrillic=${hasCyrillic}, Latin=${hasLatin}, Predominantly Cyrillic=${isPredominantlyCyrillic}`);
      }
    }

    console.log(`\nüìä Test Results: ${passed} passed, ${failed} failed (${((passed / (passed + failed)) * 100).toFixed(1)}% success rate)`);
    
    if (failed > 0) {
      console.log('\n‚ö†Ô∏è Font selection logic needs improvement for failed cases');
    } else {
      console.log('\nüéâ All font selection tests passed!');
    }
  }

  /**
   * Test font support validation
   */
  testFontSupport(): void {
    console.log('\nüß™ Testing font support validation...');

    const supportTests = [
      { font: 'Helvetica', text: 'English text', shouldSupport: true },
      { font: 'Helvetica', text: '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç', shouldSupport: false },
      { font: 'DejaVu-Sans', text: 'English text', shouldSupport: true },
      { font: 'DejaVu-Sans', text: '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç', shouldSupport: true },
      { font: 'DejaVu-Sans', text: 'Mixed –°–º–µ—à–∞–Ω–Ω—ã–π', shouldSupport: true },
      { font: 'Embedded-Cyrillic', text: '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç', shouldSupport: true },
      { font: 'Embedded-Cyrillic', text: 'English text', shouldSupport: true }, // Should be true as it's Unicode
    ];

    let passed = 0;
    let failed = 0;

    for (const test of supportTests) {
      const result = this.fontManager.fontSupportsText(test.font, test.text);
      const success = result === test.shouldSupport;
      
      if (success) {
        passed++;
        console.log(`‚úÖ PASS: ${test.font} supports "${test.text}" ‚Üí ${result}`);
      } else {
        failed++;
        console.log(`‚ùå FAIL: ${test.font} supports "${test.text}" ‚Üí Expected: ${test.shouldSupport}, Got: ${result}`);
      }
    }

    console.log(`\nüìä Font Support Tests: ${passed} passed, ${failed} failed`);
  }

  /**
   * Test text analysis functions
   */
  testTextAnalysis(): void {
    console.log('\nüß™ Testing text analysis functions...');

    const analysisTests = [
      // containsCyrillic tests
      { text: 'English only', func: 'containsCyrillic', expected: false },
      { text: '–†—É—Å—Å–∫–∏–π', func: 'containsCyrillic', expected: true },
      { text: 'Mixed –†—É—Å—Å–∫–∏–π', func: 'containsCyrillic', expected: true },
      { text: '123456', func: 'containsCyrillic', expected: false },
      
      // isPredominantlyCyrillic tests  
      { text: '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç', func: 'isPredominantlyCyrillic', expected: true },
      { text: 'English text document', func: 'isPredominantlyCyrillic', expected: false },
      { text: 'PDF –¥–æ–∫—É–º–µ–Ω—Ç', func: 'isPredominantlyCyrillic', expected: false }, // 50/50 split
      { text: 'English –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç', func: 'isPredominantlyCyrillic', expected: false }, // 33% Cyrillic
      { text: 'A –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç', func: 'isPredominantlyCyrillic', expected: true }, // 80% Cyrillic
    ];

    let passed = 0;
    let failed = 0;

    for (const test of analysisTests) {
      let result: boolean;
      if (test.func === 'containsCyrillic') {
        result = this.fontManager.containsCyrillic(test.text);
      } else {
        result = this.fontManager.isPredominantlyCyrillic(test.text);
      }
      
      const success = result === test.expected;
      
      if (success) {
        passed++;
        console.log(`‚úÖ PASS: ${test.func}("${test.text}") ‚Üí ${result}`);
      } else {
        failed++;
        console.log(`‚ùå FAIL: ${test.func}("${test.text}") ‚Üí Expected: ${test.expected}, Got: ${result}`);
      }
    }

    console.log(`\nüìä Text Analysis Tests: ${passed} passed, ${failed} failed`);
  }

  /**
   * Run comprehensive font validation tests
   */
  runAllTests(): void {
    console.log('üöÄ Starting comprehensive font validation tests...\n');
    
    this.testMixedContentDetection();
    this.testFontSupport();
    this.testTextAnalysis();
    
    console.log('\n‚ú® Font validation testing completed!');
  }

  /**
   * Test specific problematic text samples that might cause issues
   */
  testProblematicSamples(): void {
    console.log('\nüß™ Testing potentially problematic text samples...');

    const problematicSamples = [
      // URL-like texts
      'https://www.—Å–∞–π—Ç.ru/path',
      'email@–ø–æ—á—Ç–∞.com',
      
      // Technical texts with mixed content
      'git commit -m "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π feature"',
      'const –∏–º—è = "value";',
      'SELECT * FROM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WHERE name = "Ivan"',
      
      // Business documents
      'Invoice #12345 –°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞',
      '–û–û–û "TechCorp Solutions"',
      'Contract ‚Ññ 456 –º–µ–∂–¥—É Company Ltd –∏ –û–û–û "–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞"',
      
      // OCR common errors (should still work)
      'Docu—Çent with OCR –µrrors',
      '–úixed wŒπth unicode –µrrors',
    ];

    for (const sample of problematicSamples) {
      const font = this.fontManager.getBestFont(sample);
      const supportsCyrillic = this.fontManager.containsCyrillic(sample);
      const hasLatin = /[A-Za-z]/.test(sample);
      
      console.log(`üìù "${sample.substring(0, 40)}${sample.length > 40 ? '...' : ''}"`);
      console.log(`   ‚Üí Font: ${font}, Cyrillic: ${supportsCyrillic}, Latin: ${hasLatin}`);
      
      // Warn about potential issues
      if (supportsCyrillic && hasLatin && font !== 'DejaVu-Sans') {
        console.log(`   ‚ö†Ô∏è  WARNING: Mixed content should use DejaVu-Sans, but got ${font}`);
      }
    }
  }
}

// Export a function to run tests from console or other modules
export function validateFontSystem(): void {
  const tester = new FontValidationTest();
  tester.runAllTests();
  tester.testProblematicSamples();
}

// For direct execution in browser console
if (typeof window !== 'undefined') {
  (window as any).validateFontSystem = validateFontSystem;
}