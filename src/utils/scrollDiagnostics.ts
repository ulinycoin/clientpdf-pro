/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */

export interface ScrollDiagnostics {
  hasHorizontalScroll: boolean;
  documentWidth: number;
  viewportWidth: number;
  overflowElements: Element[];
  recommendations: string[];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
 */
export function diagnoseHorizontalScroll(): ScrollDiagnostics {
  const documentWidth = document.documentElement.scrollWidth;
  const viewportWidth = window.innerWidth;
  const hasHorizontalScroll = documentWidth > viewportWidth;

  const overflowElements: Element[] = [];
  const recommendations: string[] = [];

  // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞, –Ω–∞–π–¥–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  if (hasHorizontalScroll) {
    const allElements = document.querySelectorAll('*');

    allElements.forEach(element => {
      const rect = element.getBoundingClientRect();
      const computedStyle = window.getComputedStyle(element);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã viewport
      if (rect.right > viewportWidth || rect.width > viewportWidth) {
        overflowElements.push(element);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ CSS —Å–≤–æ–π—Å—Ç–≤–∞
      if (computedStyle.position === 'fixed' && rect.width > viewportWidth) {
        recommendations.push(`Fixed element ${element.tagName} is too wide for mobile`);
      }

      if (computedStyle.minWidth && computedStyle.minWidth !== 'auto') {
        const minWidth = parseInt(computedStyle.minWidth);
        if (minWidth > viewportWidth) {
          recommendations.push(`Element ${element.tagName} has min-width larger than viewport`);
        }
      }

      if (computedStyle.overflowX !== 'hidden' && computedStyle.overflowX !== 'auto') {
        if (rect.width > viewportWidth) {
          recommendations.push(`Element ${element.tagName} should have overflow-x: hidden`);
        }
      }
    });

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (overflowElements.length > 0) {
      recommendations.push('Add max-width: 100vw to problematic elements');
      recommendations.push('Consider using overflow-x: hidden on body and html');
      recommendations.push('Check for unnecessary padding/margin on mobile');
    }
  }

  return {
    hasHorizontalScroll,
    documentWidth,
    viewportWidth,
    overflowElements,
    recommendations
  };
}

/**
 * –í—ã–≤–æ–¥–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
 */
export function logScrollDiagnostics(): void {
  if (process.env.NODE_ENV !== 'development') return;

  const diagnostics = diagnoseHorizontalScroll();

  if (diagnostics.hasHorizontalScroll) {
    console.group('üö® Horizontal Scroll Detected');
    console.log(`Document width: ${diagnostics.documentWidth}px`);
    console.log(`Viewport width: ${diagnostics.viewportWidth}px`);
    console.log(`Overflow: ${diagnostics.documentWidth - diagnostics.viewportWidth}px`);

    if (diagnostics.overflowElements.length > 0) {
      console.group('Problematic Elements:');
      diagnostics.overflowElements.forEach((element, index) => {
        const rect = element.getBoundingClientRect();
        console.log(`${index + 1}. ${element.tagName}${element.className ? '.' + element.className.split(' ').join('.') : ''}`, {
          width: rect.width,
          right: rect.right,
          element
        });
      });
      console.groupEnd();
    }

    if (diagnostics.recommendations.length > 0) {
      console.group('Recommendations:');
      diagnostics.recommendations.forEach(rec => console.log(`‚Ä¢ ${rec}`));
      console.groupEnd();
    }

    console.groupEnd();
  } else {
    console.log('‚úÖ No horizontal scroll detected');
  }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
 */
export function setupScrollDiagnostics(): void {
  if (process.env.NODE_ENV !== 'development') return;

  // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', logScrollDiagnostics);
  } else {
    logScrollDiagnostics();
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  let timeoutId: number;
  window.addEventListener('resize', () => {
    clearTimeout(timeoutId);
    timeoutId = window.setTimeout(logScrollDiagnostics, 500);
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  window.addEventListener('orientationchange', () => {
    setTimeout(logScrollDiagnostics, 1000);
  });
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
 */
export function applyScrollFixes(): void {
  // –î–æ–±–∞–≤–ª—è–µ–º overflow-x: hidden –∫ html –∏ body
  document.documentElement.style.overflowX = 'hidden';
  document.body.style.overflowX = 'hidden';

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º max-width –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const style = document.createElement('style');
  style.textContent = `
    * {
      box-sizing: border-box;
    }

    body, html, #root {
      overflow-x: hidden !important;
      max-width: 100vw !important;
    }

    .container, .max-w-4xl, .max-w-6xl, .max-w-7xl {
      max-width: 100% !important;
    }

    @media (max-width: 768px) {
      * {
        max-width: 100vw;
      }

      img, video, iframe {
        max-width: 100% !important;
        height: auto !important;
      }
    }
  `;
  document.head.appendChild(style);
}
