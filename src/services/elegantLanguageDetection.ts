/**
 * üåç –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏–∏ —è–∑—ã–∫–æ–≤ –∏ —à—Ä–∏—Ñ—Ç–æ–≤
 * –ü—Ä–æ—Å—Ç–∞—è, –Ω–æ —É–º–Ω–∞—è - –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ
 */

export interface LanguageInfo {
  language: string;
  script: 'latin' | 'cyrillic' | 'cjk' | 'arabic' | 'devanagari';
  confidence: number;
  recommendedFont: string;
  direction: 'ltr' | 'rtl';
  emoji: string;
  displayName: string;
}

export interface FontInfo {
  family: string;
  weight: string;
  style: string;
  fallbacks: string[];
  supports: string[];
}

// üéØ –£–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
const LANGUAGE_PATTERNS = {
  // –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —è–∑—ã–∫–∏
  cyrillic: {
    regex: /[\u0400-\u04FF]/g,
    languages: {
      russian: { 
        chars: /[–ê–Å–Ü–á–é–Æ–Ø–∞—ë—ñ—ñ—ó—û—é—è]/g, 
        name: '–†—É—Å—Å–∫–∏–π', 
        emoji: 'üá∑üá∫',
        font: 'PT Sans' 
      },
      latvian: { 
        chars: /[ƒÄƒÅƒíƒìƒ¢ƒ£ƒ™ƒ´ƒ∂ƒ∑ƒªƒº≈Ö≈Ü≈å≈ç≈ñ≈ó≈†≈°≈™≈´≈Ω≈æ]/g, 
        name: 'Latvie≈°u', 
        emoji: 'üá±üáª',
        font: 'Roboto' 
      },
      lithuanian: { 
        chars: /[ƒÑƒÖƒåƒçƒòƒôƒñƒóƒÆƒØ≈†≈°≈≤≈≥≈™≈´≈Ω≈æ]/g, 
        name: 'Lietuvi≈≥', 
        emoji: 'üá±üáπ',
        font: 'Source Sans Pro' 
      }
    }
  },
  
  // CJK —è–∑—ã–∫–∏
  cjk: {
    regex: /[\u4E00-\u9FFF\u3400-\u4DBF\u3040-\u309F\u30A0-\u30FF]/g,
    languages: {
      chinese: { 
        chars: /[\u4E00-\u9FFF]/g, 
        name: '‰∏≠Êñá', 
        emoji: 'üá®üá≥',
        font: 'Noto Sans CJK SC' 
      },
      japanese: { 
        chars: /[\u3040-\u309F\u30A0-\u30FF]/g, 
        name: 'Êó•Êú¨Ë™û', 
        emoji: 'üáØüáµ',
        font: 'Noto Sans CJK JP' 
      },
      korean: { 
        chars: /[\uAC00-\uD7AF]/g, 
        name: 'ÌïúÍµ≠Ïñ¥', 
        emoji: 'üá∞üá∑',
        font: 'Noto Sans CJK KR' 
      }
    }
  },
  
  // –ê—Ä–∞–±—Å–∫–∏–µ —è–∑—ã–∫–∏
  arabic: {
    regex: /[\u0600-\u06FF\u0750-\u077F]/g,
    languages: {
      arabic: { 
        chars: /[\u0600-\u06FF]/g, 
        name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', 
        emoji: 'üá∏üá¶',
        font: 'Noto Sans Arabic' 
      }
    }
  },
  
  // –î–µ–≤–∞–Ω–≥–∞—Ä–∏ (—Ö–∏–Ω–¥–∏ –∏ –¥—Ä.)
  devanagari: {
    regex: /[\u0900-\u097F]/g,
    languages: {
      hindi: { 
        chars: /[\u0900-\u097F]/g, 
        name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', 
        emoji: 'üáÆüá≥',
        font: 'Noto Sans Devanagari' 
      }
    }
  },
  
  // –õ–∞—Ç–∏–Ω—Å–∫–∏–µ —è–∑—ã–∫–∏
  latin: {
    regex: /[a-zA-Z]/g,
    languages: {
      english: { 
        chars: /[a-zA-Z]/g, 
        name: 'English', 
        emoji: 'üá∫üá∏',
        font: 'Inter' 
      },
      german: { 
        chars: /[√§√∂√º√ü√Ñ√ñ√ú]/g, 
        name: 'Deutsch', 
        emoji: 'üá©üá™',
        font: 'Roboto' 
      },
      french: { 
        chars: /[√†√¢√§√©√®√™√´√Ø√Æ√¥√π√ª√º√ø√ß√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ô√õ√ú≈∏√á]/g, 
        name: 'Fran√ßais', 
        emoji: 'üá´üá∑',
        font: 'Open Sans' 
      }
    }
  }
};

// üé® –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –ø–æ —Å–∫—Ä–∏–ø—Ç–∞–º
const FONT_RECOMMENDATIONS = {
  latin: ['Inter', 'Roboto', 'Open Sans', 'Lato'],
  cyrillic: ['PT Sans', 'Roboto', 'Open Sans', 'Fira Sans'],
  cjk: ['Noto Sans CJK', 'Source Han Sans', 'Roboto'],
  arabic: ['Noto Sans Arabic', 'Amiri', 'Roboto Arabic'],
  devanagari: ['Noto Sans Devanagari', 'Roboto Devanagari']
};

/**
 * üîç –£–º–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —è–∑—ã–∫–∞ –∏–∑ CSV –¥–∞–Ω–Ω—ã—Ö
 */
export function detectLanguage(data: string[][]): LanguageInfo {
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const allText = data.flat().join(' ').slice(0, 1000); // –ü–µ—Ä–≤–∞—è 1000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  
  if (!allText.trim()) {
    return getDefaultLanguage();
  }
  
  // –ò—â–µ–º —Å–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π —è–∑—ã–∫
  let bestMatch: LanguageInfo = getDefaultLanguage();
  let maxScore = 0;
  
  for (const [scriptName, scriptData] of Object.entries(LANGUAGE_PATTERNS)) {
    const scriptMatches = allText.match(scriptData.regex);
    if (!scriptMatches) continue;
    
    const scriptScore = scriptMatches.length / allText.length;
    
    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫ –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä–∏–ø—Ç–∞
    for (const [langKey, langData] of Object.entries(scriptData.languages)) {
      const langMatches = allText.match(langData.chars);
      const langScore = langMatches ? 
        scriptScore + (langMatches.length / allText.length) * 0.5 : 
        scriptScore;
      
      if (langScore > maxScore) {
        maxScore = langScore;
        bestMatch = {
          language: langKey,
          script: scriptName as any,
          confidence: Math.min(0.95, langScore * 2),
          recommendedFont: langData.font,
          direction: scriptName === 'arabic' ? 'rtl' : 'ltr',
          emoji: langData.emoji,
          displayName: langData.name
        };
      }
    }
  }
  
  return bestMatch;
}

/**
 * üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
 */
export function getRecommendedFonts(script: string): string[] {
  return FONT_RECOMMENDATIONS[script as keyof typeof FONT_RECOMMENDATIONS] || FONT_RECOMMENDATIONS.latin;
}

/**
 * üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */
export async function checkFontAvailability(fontFamily: string): Promise<boolean> {
  if (!document.fonts) return false;
  
  try {
    await document.fonts.load(`12px "${fontFamily}"`);
    return document.fonts.check(`12px "${fontFamily}"`);
  } catch {
    return false;
  }
}

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è–∑—ã–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
 */
export function getLanguageStats(data: string[][]): Array<{
  language: string;
  percentage: number;
  count: number;
  emoji: string;
}> {
  const allText = data.flat().join(' ');
  const stats: Array<{ language: string; percentage: number; count: number; emoji: string }> = [];
  
  for (const [scriptName, scriptData] of Object.entries(LANGUAGE_PATTERNS)) {
    for (const [langKey, langData] of Object.entries(scriptData.languages)) {
      const matches = allText.match(langData.chars);
      if (matches) {
        stats.push({
          language: langData.name,
          percentage: (matches.length / allText.length) * 100,
          count: matches.length,
          emoji: langData.emoji
        });
      }
    }
  }
  
  return stats.sort((a, b) => b.percentage - a.percentage).slice(0, 5);
}

/**
 * ‚ö° –ë—ã—Å—Ç—Ä–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é
 */
export function quickLanguageDetect(text: string): { script: string; emoji: string; confidence: number } {
  const sample = text.slice(0, 100);
  
  if (/[\u0400-\u04FF]/.test(sample)) {
    return { script: 'cyrillic', emoji: 'üá∑üá∫', confidence: 0.8 };
  }
  if (/[\u4E00-\u9FFF]/.test(sample)) {
    return { script: 'cjk', emoji: 'üá®üá≥', confidence: 0.9 };
  }
  if (/[\u0600-\u06FF]/.test(sample)) {
    return { script: 'arabic', emoji: 'üá∏üá¶', confidence: 0.9 };
  }
  if (/[\u0900-\u097F]/.test(sample)) {
    return { script: 'devanagari', emoji: 'üáÆüá≥', confidence: 0.9 };
  }
  
  return { script: 'latin', emoji: 'üåç', confidence: 0.6 };
}

/**
 * üé® –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PDF –¥–ª—è —è–∑—ã–∫–∞
 */
export function getOptimalPDFSettings(languageInfo: LanguageInfo) {
  const baseSettings = {
    fontFamily: languageInfo.recommendedFont,
    direction: languageInfo.direction,
    fontSize: 10,
    lineHeight: 1.4
  };
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
  switch (languageInfo.script) {
    case 'cjk':
      return { ...baseSettings, fontSize: 11, lineHeight: 1.6 };
    case 'arabic':
      return { ...baseSettings, fontSize: 12, lineHeight: 1.8, textAlign: 'right' };
    case 'devanagari':
      return { ...baseSettings, fontSize: 11, lineHeight: 1.7 };
    default:
      return baseSettings;
  }
}

// üéØ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫
function getDefaultLanguage(): LanguageInfo {
  return {
    language: 'auto',
    script: 'latin',
    confidence: 0.5,
    recommendedFont: 'Inter',
    direction: 'ltr',
    emoji: 'üìÑ',
    displayName: 'Auto-detect'
  };
}

export default {
  detectLanguage,
  getRecommendedFonts,
  checkFontAvailability,
  getLanguageStats,
  quickLanguageDetect,
  getOptimalPDFSettings
};