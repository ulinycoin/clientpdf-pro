/**
 * FontManager.ts - –£–õ–£–ß–®–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤ —Å Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * –í–µ—Ä—Å–∏—è 2.0 - —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫
 */

import { jsPDF } from 'jspdf';

export interface FontInfo {
  name: string;
  style: 'normal' | 'bold' | 'italic' | 'bolditalic';
  unicodeSupport: string[];
  fallbackChars: Record<string, string>;
  description: string;
}

export interface FontLoadResult {
  success: boolean;
  fontName: string;
  error?: string;
}

export class FontManager {
  private static loadedFonts = new Set<string>();
  
  /**
   * –ö–∞—Ä—Ç–∞ –∑–∞–º–µ—â–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤
   */
  private static readonly CHAR_REPLACEMENTS: Record<string, string> = {
    // –õ–∞—Ç—ã—à—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã ‚Üí –±–ª–∏–∂–∞–π—à–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
    'ƒÅ': 'a', 'ƒÄ': 'A',
    'ƒç': 'c', 'ƒå': 'C', 
    'ƒì': 'e', 'ƒí': 'E',
    'ƒ£': 'g', 'ƒ¢': 'G',
    'ƒ´': 'i', 'ƒ™': 'I',
    'ƒ∑': 'k', 'ƒ∂': 'K',
    'ƒº': 'l', 'ƒª': 'L',
    '≈Ü': 'n', '≈Ö': 'N',
    '≈°': 's', '≈†': 'S',
    '≈´': 'u', '≈™': 'U',
    '≈æ': 'z', '≈Ω': 'Z',
    
    // –õ–∏—Ç–æ–≤—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    'ƒÖ': 'a', 'ƒÑ': 'A',
    'ƒô': 'e', 'ƒò': 'E',
    'ƒó': 'e', 'ƒñ': 'E',
    'ƒØ': 'i', 'ƒÆ': 'I',
    '≈≥': 'u', '≈≤': 'U',
    
    // –ü–æ–ª—å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    'ƒá': 'c', 'ƒÜ': 'C',
    '≈Ç': 'l', '≈Å': 'L',
    '≈Ñ': 'n', '≈É': 'N',
    '√≥': 'o', '√ì': 'O',
    '≈õ': 's', '≈ö': 'S',
    '≈∫': 'z', '≈π': 'Z',
    '≈º': 'z', '≈ª': 'Z',
    
    // –ì—Ä–µ—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã ‚Üí –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
    'Œ±': 'a', 'Œë': 'A',
    'Œ≤': 'b', 'Œí': 'B', 
    'Œ≥': 'g', 'Œì': 'G',
    'Œ¥': 'd', 'Œî': 'D',
    'Œµ': 'e', 'Œï': 'E',
    'Œ∂': 'z', 'Œñ': 'Z',
    'Œ∑': 'h', 'Œó': 'H',
    'Œ∏': 'th', 'Œò': 'TH',
    'Œπ': 'i', 'Œô': 'I',
    'Œ∫': 'k', 'Œö': 'K',
    'Œª': 'l', 'Œõ': 'L',
    'Œº': 'm', 'Œú': 'M',
    'ŒΩ': 'n', 'Œù': 'N',
    'Œæ': 'x', 'Œû': 'X',
    'Œø': 'o', 'Œü': 'O',
    'œÄ': 'p', 'Œ†': 'P',
    'œÅ': 'r', 'Œ°': 'R',
    'œÉ': 's', 'Œ£': 'S',
    'œÇ': 's',
    'œÑ': 't', 'Œ§': 'T',
    'œÖ': 'y', 'Œ•': 'Y',
    'œÜ': 'f', 'Œ¶': 'F',
    'œá': 'ch', 'Œß': 'CH',
    'œà': 'ps', 'Œ®': 'PS',
    'œâ': 'o', 'Œ©': 'O',
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
    '‚ÇΩ': 'RUB',
    '‚Ç¨': 'EUR',
    '¬£': 'GBP',
    '$': 'USD',
    
    // –î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    '‚Äì': '-',
    '‚Äî': '-',
    ''': "'",
    ''': "'",
    '"': '"',
    '"': '"',
    '‚Ä¶': '...',
    '‚Ññ': 'No.',
  };

  /**
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–µ
   */
  public static readonly SUPPORTED_FONTS: Record<string, FontInfo> = {
    'courier': {
      name: 'courier',
      style: 'normal',
      unicodeSupport: ['latin', 'limited-cyrillic'],
      fallbackChars: {},
      description: 'Courier - –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    },
    'helvetica': {
      name: 'helvetica',
      style: 'normal', 
      unicodeSupport: ['latin', 'limited-cyrillic'],
      fallbackChars: {},
      description: 'Helvetica - –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    },
    'times': {
      name: 'times',
      style: 'normal',
      unicodeSupport: ['latin', 'cyrillic', 'partial-greek'],
      fallbackChars: {},
      description: 'Times Roman - –ª—É—á—à–∏–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Unicode'
    }
  };

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  public static detectLanguage(text: string): string[] {
    const languages: string[] = [];
    
    // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Times)
    if (/[\u0400-\u04FF]/.test(text)) {
      languages.push('cyrillic');
    }
    
    // –õ–∞—Ç–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–ø–ª–æ—Ö–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏)
    if (/[\u0100-\u017F]/.test(text)) {
      languages.push('latin-ext');
    }
    
    // –ì—Ä–µ—á–µ—Å–∫–∏–π (—á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Times)
    if (/[\u0370-\u03FF]/.test(text)) {
      languages.push('greek');
    }
    
    // –ë–∞–∑–æ–≤–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ (—Ö–æ—Ä–æ—à–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ–º–∏)
    if (/[A-Za-z]/.test(text)) {
      languages.push('latin');
    }
    
    return languages.length > 0 ? languages : ['latin'];
  }

  /**
   * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —è–∑—ã–∫–∞
   */
  public static selectOptimalFont(detectedLanguages: string[]): string {
    // –î–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Courier –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
    // Times –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π, Helvetica - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (detectedLanguages.includes('cyrillic')) {
      return 'courier'; // Courier –ª—É—á—à–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É —á–µ–º Times
    }
    
    if (detectedLanguages.includes('latin-ext') || detectedLanguages.includes('greek')) {
      return 'courier'; // Courier + –∑–∞–º–µ—â–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
    }
    
    return 'courier'; // Courier –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è PDF
   */
  public static sanitizeTextForPDF(text: string): string {
    if (!text || typeof text !== 'string') {
      return '';
    }

    let cleanText = text;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ—â–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    Object.entries(this.CHAR_REPLACEMENTS).forEach(([unicode, replacement]) => {
      cleanText = cleanText.replace(new RegExp(unicode, 'g'), replacement);
    });
    
    // –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleanText = cleanText
      // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/[\u200B-\u200D\uFEFF]/g, '')
      // –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
      .replace(/[^\x20-\x7E\u00A0-\u00FF\u0100-\u017F\u0400-\u04FF]/g, '?')
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      .trim();

    return cleanText;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –≤ jsPDF
   */
  public static async loadFont(pdf: jsPDF, fontName: string, style: 'normal' | 'bold' = 'normal'): Promise<FontLoadResult> {
    const cacheKey = `${fontName}_${style}`;
    
    if (this.loadedFonts.has(cacheKey)) {
      return { success: true, fontName };
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–∞
      if (!this.SUPPORTED_FONTS[fontName]) {
        throw new Error(`Font ${fontName} not supported`);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
      pdf.setFont(fontName, style);
      this.loadedFonts.add(cacheKey);
      
      console.log(`‚úÖ Font set: ${fontName} (${style})`);
      return { success: true, fontName };

    } catch (error) {
      console.error(`‚ùå Failed to set font ${fontName}:`, error);
      return { 
        success: false, 
        fontName,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
   */
  public static async setupFontsForText(pdf: jsPDF, texts: string[]): Promise<string> {
    try {
      // –û—á–∏—â–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
      const cleanTexts = texts.map(text => this.sanitizeTextForPDF(text));
      const combinedText = cleanTexts.join(' ');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏
      const languages = this.detectLanguage(combinedText);
      console.log(`üîç Detected languages: ${languages.join(', ')}`);
      
      // –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç
      const selectedFont = this.selectOptimalFont(languages);
      console.log(`üéØ Selected font: ${selectedFont}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç
      const result = await this.loadFont(pdf, selectedFont, 'normal');
      
      if (result.success) {
        pdf.setFont(selectedFont, 'normal');
        return selectedFont;
      } else {
        return this.setupFallbackFont(pdf);
      }
    } catch (error) {
      console.error('‚ùå Font setup failed:', error);
      return this.setupFallbackFont(pdf);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback —à—Ä–∏—Ñ—Ç–∞
   */
  private static setupFallbackFont(pdf: jsPDF): string {
    try {
      pdf.setFont('courier', 'normal');
      console.log(`‚úÖ Fallback font set: courier`);
      return 'courier';
    } catch {
      try {
        pdf.setFont('helvetica', 'normal');
        console.log(`‚úÖ Final fallback font set: helvetica`);
        return 'helvetica';
      } catch {
        console.error(`‚ùå All fonts failed`);
        return 'helvetica';
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —à—Ä–∏—Ñ—Ç–æ–≤
   */
  public static clearCache(): void {
    this.loadedFonts.clear();
    console.log('üßπ Font cache cleared');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–∞—Ö
   */
  public static getSupportedLanguages(): Record<string, string[]> {
    return {
      'latin': ['courier', 'helvetica', 'times'],
      'cyrillic': ['courier', 'times'],
      'latin-ext': ['courier'], // —Å –∑–∞–º–µ–Ω–æ–π —Å–∏–º–≤–æ–ª–æ–≤
      'greek': ['courier'], // —Å –∑–∞–º–µ–Ω–æ–π —Å–∏–º–≤–æ–ª–æ–≤
    };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  public static analyzeAndFixText(text: string): {
    original: string;
    cleaned: string;
    replacements: Array<{from: string, to: string}>;
    recommendedFont: string;
    issues: string[];
  } {
    const original = text;
    const cleaned = this.sanitizeTextForPDF(text);
    const languages = this.detectLanguage(text);
    const recommendedFont = this.selectOptimalFont(languages);
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–º–µ—â–µ–Ω–∏—è
    const replacements: Array<{from: string, to: string}> = [];
    Object.entries(this.CHAR_REPLACEMENTS).forEach(([from, to]) => {
      if (original.includes(from)) {
        replacements.push({ from, to });
      }
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    const issues: string[] = [];
    if (languages.includes('latin-ext')) {
      issues.push('–õ–∞—Ç–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã');
    }
    if (languages.includes('greek')) {
      issues.push('–ì—Ä–µ—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã');
    }
    if (languages.includes('cyrillic')) {
      issues.push('–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö');
    }
    if (original !== cleaned) {
      issues.push('–¢–µ–∫—Å—Ç –±—ã–ª –æ—á–∏—â–µ–Ω –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤');
    }

    return {
      original,
      cleaned,
      replacements,
      recommendedFont,
      issues
    };
  }
}