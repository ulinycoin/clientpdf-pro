/**
 * FontManager.ts - –ú–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –ª–∞—Ç—ã—à—Å–∫–∏–π, –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
 */

import { jsPDF } from 'jspdf';

export interface FontInfo {
  name: string;
  style: 'normal' | 'bold' | 'italic' | 'bolditalic';
  url?: string;
  base64?: string;
  formats: string[];
  languages: string[];
  unicodeRanges: string[];
  description: string;
}

export interface FontLoadResult {
  success: boolean;
  fontName: string;
  error?: string;
}

export class FontManager {
  private static loadedFonts = new Set<string>();
  private static fontCache = new Map<string, string>();
  
  /**
   * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–µ CDN —Å—Å—ã–ª–∫–∏
   */
  public static readonly UNICODE_FONTS: Record<string, FontInfo> = {
    'Roboto-Regular': {
      name: 'Roboto',
      style: 'normal',
      url: 'https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2',
      formats: ['woff2'],
      languages: ['latin', 'cyrillic', 'latin-ext', 'cyrillic-ext'],
      unicodeRanges: ['U+0000-00FF', 'U+0100-017F', 'U+0400-04FF'],
      description: 'Google Roboto - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã'
    },
    'Roboto-Bold': {
      name: 'Roboto',
      style: 'bold',
      url: 'https://fonts.gstatic.com/s/roboto/v30/KFOlCnqEu92Fr1MmWUlfBBc4AMP6lQ.woff2',
      formats: ['woff2'],
      languages: ['latin', 'cyrillic', 'latin-ext', 'cyrillic-ext'],
      unicodeRanges: ['U+0000-00FF', 'U+0100-017F', 'U+0400-04FF'],
      description: 'Google Roboto Bold - –∂–∏—Ä–Ω—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç'
    }
  };

  /**
   * –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Base64 —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
   * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è fallback
   */
  public static readonly EMBEDDED_FONTS: Record<string, string> = {
    // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Base64 –≤–µ—Ä—Å–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤
    'fallback': ''
  };

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  public static detectLanguage(text: string): string[] {
    const languages: string[] = [];
    
    // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    if (/[\u0400-\u04FF]/.test(text)) {
      languages.push('cyrillic');
    }
    
    // –õ–∞—Ç–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –ª–∞—Ç—ã—à—Å–∫–∏–π ƒÅ, ƒç, ƒì, ƒ£, ƒ´, ƒ∑, ƒº, ≈Ü, ≈°, ≈´, ≈æ)
    if (/[\u0100-\u017F]/.test(text)) {
      languages.push('latin-ext');
    }
    
    // –ì—Ä–µ—á–µ—Å–∫–∏–π
    if (/[\u0370-\u03FF]/.test(text)) {
      languages.push('greek');
    }
    
    // –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π
    if (/[\u1EA0-\u1EFF]/.test(text)) {
      languages.push('vietnamese');
    }
    
    // –ê—Ä–∞–±—Å–∫–∏–π
    if (/[\u0600-\u06FF]/.test(text)) {
      languages.push('arabic');
    }
    
    // –ë–∞–∑–æ–≤–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (/[A-Za-z]/.test(text) && languages.length === 0) {
      languages.push('latin');
    }
    
    return languages.length > 0 ? languages : ['latin'];
  }

  /**
   * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —è–∑—ã–∫–∞
   */
  public static selectOptimalFont(detectedLanguages: string[], style: 'normal' | 'bold' = 'normal'): string {
    // –î–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const fontPriority = {
      cyrillic: ['times', 'courier', 'helvetica'],
      'latin-ext': ['times', 'courier', 'helvetica'],
      greek: ['times', 'courier', 'helvetica'],
      vietnamese: ['times', 'courier', 'helvetica'],
      arabic: ['times', 'courier', 'helvetica'],
      latin: ['times', 'courier', 'helvetica']
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Times –∫–∞–∫ –Ω–∞–∏–ª—É—á—à–∏–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Unicode
    return 'times';
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –≤ jsPDF - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  public static async loadFont(pdf: jsPDF, fontName: string, style: 'normal' | 'bold' = 'normal'): Promise<FontLoadResult> {
    const cacheKey = `${fontName}_${style}`;
    
    if (this.loadedFonts.has(cacheKey)) {
      return { success: true, fontName };
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const builtInFonts = ['helvetica', 'times', 'courier'];
      
      if (builtInFonts.includes(fontName.toLowerCase())) {
        pdf.setFont(fontName, style);
        this.loadedFonts.add(cacheKey);
        console.log(`‚úÖ Built-in font set: ${fontName} (${style})`);
        return { success: true, fontName };
      }

      // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      console.warn(`‚ö†Ô∏è External font ${fontName} skipped, using fallback`);
      return { success: false, fontName, error: 'External fonts disabled for stability' };

    } catch (error) {
      console.error(`‚ùå Failed to set font ${fontName}:`, error);
      return { 
        success: false, 
        fontName,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
   */
  public static async setupFontsForText(pdf: jsPDF, texts: string[]): Promise<string> {
    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const combinedText = texts.join(' ');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏
      const languages = this.detectLanguage(combinedText);
      console.log(`üîç Detected languages: ${languages.join(', ')}`);
      
      // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
      const selectedFont = this.selectOptimalFont(languages);
      console.log(`üéØ Selected font: ${selectedFont}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
      const normalResult = await this.loadFont(pdf, selectedFont, 'normal');
      
      if (normalResult.success) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        pdf.setFont(selectedFont, 'normal');
        return selectedFont;
      } else {
        // Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —à—Ä–∏—Ñ—Ç—É
        console.warn('‚ö†Ô∏è Using fallback font due to loading failure');
        return this.setupFallbackFont(pdf);
      }
    } catch (error) {
      console.error('‚ùå Font setup failed:', error);
      return this.setupFallbackFont(pdf);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback —à—Ä–∏—Ñ—Ç–∞
   */
  private static setupFallbackFont(pdf: jsPDF): string {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Times (–ª—É—á—à–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Unicode —á–µ–º Helvetica)
    try {
      pdf.setFont('times', 'normal');
      console.log(`‚úÖ Fallback font set: times`);
      return 'times';
    } catch {
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤ - helvetica
      try {
        pdf.setFont('helvetica', 'normal');
        console.log(`‚úÖ Final fallback font set: helvetica`);
        return 'helvetica';
      } catch {
        console.error(`‚ùå All fonts failed, using default`);
        return 'helvetica';
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –∫–∞–∫ Base64 - –û–¢–ö–õ–Æ–ß–ï–ù–ê –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
   */
  private static async fetchFontAsBase64(url: string): Promise<string> {
    throw new Error('External font loading disabled for stability');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —à—Ä–∏—Ñ—Ç–æ–≤
   */
  public static clearCache(): void {
    this.loadedFonts.clear();
    this.fontCache.clear();
    console.log('üßπ Font cache cleared');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–∞—Ö
   */
  public static getSupportedLanguages(): Record<string, string[]> {
    return {
      'latin': ['times', 'helvetica', 'courier'],
      'cyrillic': ['times'],
      'latin-ext': ['times'],
      'greek': ['times'],
      'vietnamese': ['times'],
      'arabic': ['times']
    };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
   */
  public static testUnicodeSupport(text: string): {
    characters: string[];
    unicodeRanges: string[];
    recommendedFonts: string[];
  } {
    const characters = [...new Set(text.split(''))];
    const unicodeRanges: string[] = [];
    
    characters.forEach(char => {
      const code = char.codePointAt(0);
      if (code) {
        if (code >= 0x0400 && code <= 0x04FF) unicodeRanges.push('Cyrillic');
        if (code >= 0x0100 && code <= 0x017F) unicodeRanges.push('Latin Extended-A');
        if (code >= 0x0180 && code <= 0x024F) unicodeRanges.push('Latin Extended-B');
        if (code >= 0x0370 && code <= 0x03FF) unicodeRanges.push('Greek');
        if (code >= 0x1EA0 && code <= 0x1EFF) unicodeRanges.push('Vietnamese');
      }
    });

    const detectedLanguages = this.detectLanguage(text);
    const recommendedFonts = [
      this.selectOptimalFont(detectedLanguages),
      'times',
      'helvetica'
    ];

    return {
      characters: characters.slice(0, 20), // –ü–µ—Ä–≤—ã–µ 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      unicodeRanges: [...new Set(unicodeRanges)],
      recommendedFonts: [...new Set(recommendedFonts)]
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —à—Ä–∏—Ñ—Ç–∞ –≤ jsPDF
   */
  public static isFontAvailable(pdf: jsPDF, fontName: string, style: string = 'normal'): boolean {
    try {
      const fontList = pdf.getFontList();
      return fontList[fontName] && fontList[fontName].includes(style);
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
   */
  public static getAvailableFonts(pdf: jsPDF): Record<string, string[]> {
    try {
      return pdf.getFontList();
    } catch {
      return {
        'helvetica': ['normal', 'bold', 'italic', 'bolditalic'],
        'times': ['normal', 'bold', 'italic', 'bolditalic'],
        'courier': ['normal', 'bold', 'italic', 'bolditalic']
      };
    }
  }
}