/**
 * MultiLanguageFontService.ts
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —è–∑—ã–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞–º–∏
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º EnhancedUnicodeFontService
 */

import { EnhancedUnicodeFontService, TextAnalysis } from '../EnhancedUnicodeFontService';
import { LanguageDetectionResult, FontRecommendation, MultiLanguageSupport } from '../../types/enhanced-csv-pdf.types';

export class MultiLanguageFontService {
  private static readonly SUPPORTED_LANGUAGES: MultiLanguageSupport['supportedLanguages'] = {
    'ru': '–†—É—Å—Å–∫–∏–π (–ö–∏—Ä–∏–ª–ª–∏—Ü–∞)',
    'lv': 'Latvie≈°u (–õ–∞—Ç—ã—à—Å–∫–∏–π)', 
    'lt': 'Lietuvi≈≥ (–õ–∏—Ç–æ–≤—Å–∫–∏–π)',
    'et': 'Eesti (–≠—Å—Ç–æ–Ω—Å–∫–∏–π)',
    'pl': 'Polski (–ü–æ–ª—å—Å–∫–∏–π)',
    'de': 'Deutsch (–ù–µ–º–µ—Ü–∫–∏–π)',
    'fr': 'Fran√ßais (–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π)',
    'es': 'Espa√±ol (–ò—Å–ø–∞–Ω—Å–∫–∏–π)',
    'it': 'Italiano (–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π)',
    'zh': '‰∏≠Êñá (–ö–∏—Ç–∞–π—Å–∫–∏–π)',
    'ja': 'Êó•Êú¨Ë™û (–Ø–ø–æ–Ω—Å–∫–∏–π)',
    'ko': 'ÌïúÍµ≠Ïñ¥ (–ö–æ—Ä–µ–π—Å–∫–∏–π)',
    'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (–ê—Ä–∞–±—Å–∫–∏–π)',
    'hi': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (–•–∏–Ω–¥–∏)',
  };

  private static readonly FONT_FAMILIES: MultiLanguageSupport['fontFamilies'] = {
    'latin': ['Inter', 'Roboto', 'Open Sans', 'Lato'],
    'cyrillic': ['Roboto', 'Open Sans', 'PT Sans', 'Fira Sans'],
    'baltic': ['Roboto', 'Open Sans', 'Source Sans Pro'],
    'cjk': ['Noto Sans CJK', 'Source Han Sans', 'Roboto'],
    'arabic': ['Noto Sans Arabic', 'Roboto Arabic'],
    'devanagari': ['Noto Sans Devanagari', 'Roboto Devanagari'],
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —è–∑—ã–∫–æ–≤
  private static readonly LANGUAGE_PATTERNS = {
    'ru': /[–∞-—è—ë]/i,
    'lv': /[ƒÅƒçƒìƒ£ƒ´ƒ∑ƒº≈Ü≈°≈´≈æ]/i,
    'lt': /[ƒÖƒôƒóƒØ≈≥]/i,
    'et': /[√§√∂√º√µ]/i,
    'pl': /[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º]/i,
    'de': /[√§√∂√º√ü]/i,
    'fr': /[√†√¢√ß√©√®√™√´√Æ√Ø√¥√π√ª√º√ø]/i,
    'es': /[√°√©√≠√±√≥√∫√º]/i,
    'it': /[√†√®√©√¨√≠√Æ√≤√≥√π]/i,
    'zh': /[\u4e00-\u9fff]/,
    'ja': /[\u3040-\u309f\u30a0-\u30ff]/,
    'ko': /[\uac00-\ud7af]/,
    'ar': /[\u0600-\u06ff]/,
    'hi': /[\u0900-\u097f]/,
  };

  private static readonly SCRIPT_DIRECTIONS = {
    'ar': 'rtl' as const,
    'he': 'rtl' as const,
    'fa': 'rtl' as const,
    'ur': 'rtl' as const,
  };

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —è–∑—ã–∫–∞ –∏–∑ CSV –¥–∞–Ω–Ω—ã—Ö
   */
  public static detectLanguageFromCSV(csvData: string[][]): LanguageDetectionResult {
    // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ CSV
    const allText = this.extractTextFromCSV(csvData);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    const analysis = EnhancedUnicodeFontService.analyzeText(allText);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    const languageScores = new Map<string, number>();
    const totalChars = allText.length;
    
    for (const [langCode, pattern] of Object.entries(this.LANGUAGE_PATTERNS)) {
      const matches = allText.match(new RegExp(pattern.source, pattern.flags + 'g'));
      const score = matches ? matches.length / totalChars : 0;
      if (score > 0) {
        languageScores.set(langCode, score);
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º —è–∑—ã–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–∫–æ—Ä–æ–º
    let detectedLanguage = 'en'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    let maxScore = 0;
    let confidence = 0;

    for (const [lang, score] of languageScores) {
      if (score > maxScore) {
        maxScore = score;
        detectedLanguage = lang;
        confidence = Math.min(score * 100, 95); // –º–∞–∫—Å–∏–º—É–º 95% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
    const script = this.determineScript(detectedLanguage, analysis);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    const direction = this.SCRIPT_DIRECTIONS[detectedLanguage as keyof typeof this.SCRIPT_DIRECTIONS] || 'ltr';

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –∏–∑ –¥–µ—Ç–µ–∫—Ü–∏–∏
    const supportedLanguages = Array.from(languageScores.keys());
    if (!supportedLanguages.includes('en')) {
      supportedLanguages.push('en'); // –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    }

    console.log('üåç Language detection result:', {
      detectedLanguage,
      confidence,
      script,
      supportedLanguages,
      textSample: allText.substring(0, 100)
    });

    return {
      detectedLanguage,
      confidence,
      script,
      direction,
      supportedLanguages,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —à—Ä–∏—Ñ—Ç–∞–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
   */
  public static getFontRecommendations(
    languageResult: LanguageDetectionResult,
    csvData?: string[][]
  ): FontRecommendation[] {
    const recommendations: FontRecommendation[] = [];
    const { detectedLanguage, script, supportedLanguages } = languageResult;

    // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞
    const scriptFonts = this.FONT_FAMILIES[script] || this.FONT_FAMILIES.latin;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    recommendations.push({
      primary: this.getBestFontForLanguage(detectedLanguage),
      fallbacks: [...scriptFonts],
      webSafe: ['Arial', 'Times New Roman', 'Courier New'],
      unicodeSupport: this.hasUnicodeSupport(detectedLanguage),
      qualityRating: this.getFontQuality(detectedLanguage),
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (supportedLanguages.length > 1) {
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      recommendations.push({
        primary: 'Roboto',
        fallbacks: ['Open Sans', 'Noto Sans', 'Arial'],
        webSafe: ['Arial', 'sans-serif'],
        unicodeSupport: true,
        qualityRating: 'good',
      });

      // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (supportedLanguages.includes('ru')) {
        recommendations.push({
          primary: 'PT Sans',
          fallbacks: ['Roboto', 'Open Sans', 'DejaVu Sans'],
          webSafe: ['Times New Roman', 'serif'],
          unicodeSupport: true,
          qualityRating: 'excellent',
        });
      }
    }

    // Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    recommendations.push({
      primary: 'Arial',
      fallbacks: ['Helvetica', 'sans-serif'],
      webSafe: ['Arial', 'Helvetica', 'sans-serif'],
      unicodeSupport: false,
      qualityRating: 'basic',
    });

    return recommendations;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ CSV –¥–∞–Ω–Ω—ã—Ö
   */
  public static validateUnicodeSupport(
    csvData: string[][],
    selectedFont: string
  ): {
    isSupported: boolean;
    unsupportedChars: string[];
    coverage: number;
    recommendations: string[];
  } {
    const allText = this.extractTextFromCSV(csvData);
    const analysis = EnhancedUnicodeFontService.analyzeText(allText);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
    const testResult = EnhancedUnicodeFontService.testFontWithSample(selectedFont, allText);
    
    const recommendations: string[] = [];
    
    if (!testResult.isSupported) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Roboto –∏–ª–∏ Open Sans –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode');
      
      if (analysis.hasCyrillic) {
        recommendations.push('–î–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è PT Sans –∏–ª–∏ DejaVu Sans');
      }
      
      if (analysis.hasLatinExtended) {
        recommendations.push('–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Noto Sans –∏–ª–∏ Source Sans Pro');
      }
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    const totalChars = allText.length;
    const supportedChars = totalChars - analysis.problemChars.length;
    const coverage = totalChars > 0 ? (supportedChars / totalChars) * 100 : 100;

    return {
      isSupported: testResult.isSupported && coverage > 90,
      unsupportedChars: analysis.problemChars,
      coverage,
      recommendations,
    };
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
   */
  public static selectOptimalFont(
    csvData: string[][],
    userPreference?: string
  ): {
    selectedFont: string;
    reasoning: string[];
    alternatives: string[];
    confidence: number;
  } {
    const languageResult = this.detectLanguageFromCSV(csvData);
    const recommendations = this.getFontRecommendations(languageResult);
    
    const reasoning: string[] = [];
    let selectedFont = 'Roboto'; // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let confidence = 70;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
    if (userPreference && userPreference !== 'auto') {
      const validation = this.validateUnicodeSupport(csvData, userPreference);
      if (validation.isSupported) {
        selectedFont = userPreference;
        reasoning.push(`–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à—Ä–∏—Ñ—Ç: ${userPreference}`);
        confidence = 90;
      } else {
        reasoning.push(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à—Ä–∏—Ñ—Ç ${userPreference} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã`);
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if (selectedFont === 'Roboto' || !userPreference) {
      const primaryRecommendation = recommendations[0];
      selectedFont = primaryRecommendation.primary;
      
      reasoning.push(`–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω —è–∑—ã–∫: ${this.SUPPORTED_LANGUAGES[languageResult.detectedLanguage as keyof typeof this.SUPPORTED_LANGUAGES] || languageResult.detectedLanguage}`);
      reasoning.push(`–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: ${selectedFont}`);
      reasoning.push(`–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ${primaryRecommendation.qualityRating}`);
      
      confidence = languageResult.confidence;
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    const alternatives = recommendations
      .slice(1)
      .map(rec => rec.primary)
      .filter((font, index, arr) => arr.indexOf(font) === index); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ

    return {
      selectedFont,
      reasoning,
      alternatives,
      confidence,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤
   */
  public static getLanguageDisplayName(languageCode: string): string {
    return this.SUPPORTED_LANGUAGES[languageCode as keyof typeof this.SUPPORTED_LANGUAGES] || languageCode.toUpperCase();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
   */
  public static getSupportedLanguages(): Array<{ code: string; name: string; script: string }> {
    return Object.entries(this.SUPPORTED_LANGUAGES).map(([code, name]) => ({
      code,
      name,
      script: this.getScriptForLanguage(code),
    }));
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private static extractTextFromCSV(csvData: string[][]): string {
    return csvData
      .flat()
      .filter(cell => cell && typeof cell === 'string')
      .join(' ')
      .substring(0, 10000); // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  }

  private static determineScript(
    language: string,
    analysis: TextAnalysis
  ): LanguageDetectionResult['script'] {
    if (analysis.hasCyrillic) return 'cyrillic';
    
    const scriptMap: Record<string, LanguageDetectionResult['script']> = {
      'ar': 'arabic',
      'he': 'arabic',
      'fa': 'arabic',
      'zh': 'cjk',
      'ja': 'cjk',
      'ko': 'cjk',
      'hi': 'devanagari',
      'bn': 'devanagari',
    };

    return scriptMap[language] || (analysis.hasLatinExtended ? 'latin' : 'latin');
  }

  private static getBestFontForLanguage(language: string): string {
    const fontMap: Record<string, string> = {
      'ru': 'PT Sans',
      'lv': 'Roboto',
      'lt': 'Roboto', 
      'et': 'Open Sans',
      'pl': 'Roboto',
      'de': 'Roboto',
      'fr': 'Open Sans',
      'es': 'Roboto',
      'it': 'Open Sans',
      'zh': 'Noto Sans CJK',
      'ja': 'Noto Sans CJK',
      'ko': 'Noto Sans CJK',
      'ar': 'Noto Sans Arabic',
      'hi': 'Noto Sans Devanagari',
    };

    return fontMap[language] || 'Roboto';
  }

  private static hasUnicodeSupport(language: string): boolean {
    const nonUnicodeLanguages = ['en'];
    return !nonUnicodeLanguages.includes(language);
  }

  private static getFontQuality(language: string): FontRecommendation['qualityRating'] {
    const qualityMap: Record<string, FontRecommendation['qualityRating']> = {
      'ru': 'excellent',
      'lv': 'good',
      'lt': 'good',
      'pl': 'good',
      'de': 'excellent',
      'fr': 'excellent',
      'zh': 'good',
      'ja': 'good',
      'ar': 'good',
    };

    return qualityMap[language] || 'basic';
  }

  private static getScriptForLanguage(language: string): string {
    const scriptMap: Record<string, string> = {
      'ru': 'cyrillic',
      'lv': 'latin-extended',
      'lt': 'latin-extended',
      'et': 'latin-extended',
      'pl': 'latin-extended',
      'de': 'latin-extended',
      'fr': 'latin-extended',
      'es': 'latin-extended',
      'it': 'latin-extended',
      'zh': 'cjk',
      'ja': 'cjk',
      'ko': 'cjk',
      'ar': 'arabic',
      'hi': 'devanagari',
    };

    return scriptMap[language] || 'latin';
  }

  /**
   * –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏
   */
  private static detectionCache = new Map<string, LanguageDetectionResult>();

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  public static clearCache(): void {
    this.detectionCache.clear();
    console.log('üßπ MultiLanguageFontService cache cleared');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  public static getCacheStats(): {
    size: number;
    entries: Array<{ key: string; language: string; confidence: number }>;
  } {
    const entries = Array.from(this.detectionCache.entries()).map(([key, result]) => ({
      key: key.substring(0, 50) + '...',
      language: result.detectedLanguage,
      confidence: result.confidence,
    }));

    return {
      size: this.detectionCache.size,
      entries,
    };
  }
}
