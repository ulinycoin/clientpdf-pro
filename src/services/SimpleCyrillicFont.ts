/**
 * SimpleCyrillicFont.ts - –ü—Ä–æ—Å—Ç–æ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
 */

import { jsPDF } from 'jspdf';

export class SimpleCyrillicFont {
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π base64 —à—Ä–∏—Ñ—Ç DejaVu Sans (—É—Ä–µ–∑–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–æ–ª—å–∫–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–æ–ª–Ω—ã–π —à—Ä–∏—Ñ—Ç
  private static readonly SIMPLE_CYRILLIC_FONT = `
    T1RUTwAMAIQAAAwAAEJBU0UAAAACAAEABAAAAERTSUcAAAACABIAAA==
    // TODO: –í—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π base64 –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ TTF —à—Ä–∏—Ñ—Ç–∞
  `;

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  public static quickSetupCyrillic(pdf: jsPDF): boolean {
    try {
      // –ü—Ä–æ–±—É–µ–º Times (—É –Ω–µ–≥–æ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
      pdf.setFont('times', 'normal');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
      const testText = '–¢–µ—Å—Ç';
      pdf.text(testText, 1000, 1000); // –í–Ω–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
      
      console.log('‚úÖ Times font supports some Cyrillic characters');
      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Cyrillic support limited, will use transliteration');
      pdf.setFont('helvetica', 'normal');
      return false;
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
   */
  public static transliterateRussian(text: string): string {
    const map = new Map([
      ['–∞', 'a'], ['–±', 'b'], ['–≤', 'v'], ['–≥', 'g'], ['–¥', 'd'],
      ['–µ', 'e'], ['—ë', 'yo'], ['–∂', 'zh'], ['–∑', 'z'], ['–∏', 'i'],
      ['–π', 'y'], ['–∫', 'k'], ['–ª', 'l'], ['–º', 'm'], ['–Ω', 'n'],
      ['–æ', 'o'], ['–ø', 'p'], ['—Ä', 'r'], ['—Å', 's'], ['—Ç', 't'],
      ['—É', 'u'], ['—Ñ', 'f'], ['—Ö', 'kh'], ['—Ü', 'ts'], ['—á', 'ch'],
      ['—à', 'sh'], ['—â', 'sch'], ['—ä', ''], ['—ã', 'y'], ['—å', ''],
      ['—ç', 'e'], ['—é', 'yu'], ['—è', 'ya'],
      // –ó–∞–≥–ª–∞–≤–Ω—ã–µ
      ['–ê', 'A'], ['–ë', 'B'], ['–í', 'V'], ['–ì', 'G'], ['–î', 'D'],
      ['–ï', 'E'], ['–Å', 'Yo'], ['–ñ', 'Zh'], ['–ó', 'Z'], ['–ò', 'I'],
      ['–ô', 'Y'], ['–ö', 'K'], ['–õ', 'L'], ['–ú', 'M'], ['–ù', 'N'],
      ['–û', 'O'], ['–ü', 'P'], ['–†', 'R'], ['–°', 'S'], ['–¢', 'T'],
      ['–£', 'U'], ['–§', 'F'], ['–•', 'Kh'], ['–¶', 'Ts'], ['–ß', 'Ch'],
      ['–®', 'Sh'], ['–©', 'Sch'], ['–™', ''], ['–´', 'Y'], ['–¨', ''],
      ['–≠', 'E'], ['–Æ', 'Yu'], ['–Ø', 'Ya']
    ]);

    let result = text;
    for (const [cyrillic, latin] of map) {
      result = result.replace(new RegExp(cyrillic, 'g'), latin);
    }
    return result;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
   */
  public static processText(pdf: jsPDF, text: string, x: number, y: number): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    const hasCyrillic = /[–∞-—è—ë]/i.test(text);
    
    if (!hasCyrillic) {
      // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      pdf.text(text, x, y);
      return;
    }

    // –ü—Ä–æ–±—É–µ–º –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞–ø—Ä—è–º—É—é
    try {
      pdf.setFont('times', 'normal');
      pdf.text(text, x, y);
      console.log('üî§ Cyrillic text rendered with Times font');
    } catch (error) {
      // Fallback –∫ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
      const transliterated = this.transliterateRussian(text);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`${transliterated} [RU]`, x, y);
      console.log('üî§ Cyrillic text transliterated');
    }
  }
}
