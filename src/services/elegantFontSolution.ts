/**
 * üé® –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è PDF
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —è–∑—ã–∫–æ–≤
 */

// üåç Web-safe —à—Ä–∏—Ñ—Ç—ã —Å Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
const WEB_SAFE_FONTS = {
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
  universal: [
    'Arial Unicode MS',
    'Lucida Sans Unicode', 
    'Tahoma',
    'Verdana',
    'Georgia'
  ],
  
  // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
  cyrillic: [
    'Arial',
    'Times New Roman', 
    'Calibri',
    'Segoe UI',
    'DejaVu Sans'
  ],
  
  // CJK (Chinese, Japanese, Korean)
  cjk: [
    'Microsoft YaHei',
    'SimSun',
    'Arial Unicode MS',
    'Malgun Gothic',
    'Yu Gothic'
  ],
  
  // –ê—Ä–∞–±—Å–∫–∏–π
  arabic: [
    'Arial Unicode MS',
    'Tahoma',
    'Microsoft Sans Serif',
    'Segoe UI'
  ]
};

// üéØ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Base64 —à—Ä–∏—Ñ—Ç—ã (–º–∏–Ω–∏-–≤–µ—Ä—Å–∏–∏)
const EMBEDDED_FONTS = {
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
  cyrillicBasic: {
    name: 'CyrillicBasic',
    data: null, // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    supports: ['ru', 'lv', 'lt', 'bg', 'sr']
  },
  
  // –ë–∞–∑–æ–≤–∞—è –ª–∞—Ç—ã–Ω—å —Å –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–æ–π
  latinExtended: {
    name: 'LatinExtended', 
    data: null,
    supports: ['en', 'de', 'fr', 'es', 'it', 'pl']
  }
};

export interface FontSolution {
  primary: string;
  fallback: string[];
  embedded?: string;
  webFontUrl?: string;
  strategy: 'system' | 'web' | 'embedded';
}

/**
 * üîß –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —è–∑—ã–∫–∞
 */
export async function getBestFontSolution(
  language: string, 
  script: string
): Promise<FontSolution> {
  
  // 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
  const systemFonts = getSystemFonts(script);
  const availableSystem = await checkSystemFontAvailability(systemFonts);
  
  if (availableSystem.length > 0) {
    return {
      primary: availableSystem[0],
      fallback: availableSystem.slice(1),
      strategy: 'system'
    };
  }
  
  // 2Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º web-safe —à—Ä–∏—Ñ—Ç—ã
  const webSafeFonts = WEB_SAFE_FONTS.universal;
  const availableWebSafe = await checkSystemFontAvailability(webSafeFonts);
  
  if (availableWebSafe.length > 0) {
    return {
      primary: availableWebSafe[0],
      fallback: availableWebSafe.slice(1),
      strategy: 'system'
    };
  }
  
  // 3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Fonts –∫–∞–∫ fallback
  const googleFont = getGoogleFontForScript(script);
  if (googleFont) {
    return {
      primary: googleFont.family,
      fallback: ['Arial', 'sans-serif'],
      webFontUrl: googleFont.url,
      strategy: 'web'
    };
  }
  
  // 4Ô∏è‚É£ –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
  return {
    primary: 'Arial',
    fallback: ['sans-serif'],
    embedded: getEmbeddedFontForScript(script),
    strategy: 'embedded'
  };
}

/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
 */
async function checkSystemFontAvailability(fonts: string[]): Promise<string[]> {
  const available: string[] = [];
  
  for (const font of fonts) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const testElement = document.createElement('div');
      testElement.style.fontFamily = `"${font}", monospace`;
      testElement.style.fontSize = '12px';
      testElement.style.position = 'absolute';
      testElement.style.visibility = 'hidden';
      testElement.textContent = 'Test';
      
      document.body.appendChild(testElement);
      
      // –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —Å –±–∞–∑–æ–≤—ã–º —à—Ä–∏—Ñ—Ç–æ–º
      testElement.style.fontFamily = 'monospace';
      const baseWidth = testElement.offsetWidth;
      
      // –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —Å —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º —à—Ä–∏—Ñ—Ç–æ–º
      testElement.style.fontFamily = `"${font}", monospace`;
      const testWidth = testElement.offsetWidth;
      
      document.body.removeChild(testElement);
      
      // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —à—Ä–∏—Ñ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
      if (baseWidth !== testWidth) {
        available.push(font);
      }
    } catch (error) {
      console.warn(`Font check failed for ${font}:`, error);
    }
  }
  
  return available;
}

/**
 * üåê Google Fonts –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
 */
function getGoogleFontForScript(script: string): { family: string; url: string } | null {
  const googleFonts = {
    latin: {
      family: 'Inter',
      url: 'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap'
    },
    cyrillic: {
      family: 'Roboto',
      url: 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&subset=cyrillic&display=swap'
    },
    cjk: {
      family: 'Noto Sans SC',
      url: 'https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@400;500;700&display=swap'
    },
    arabic: {
      family: 'Noto Sans Arabic',
      url: 'https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@400;500;700&display=swap'
    }
  };
  
  return googleFonts[script as keyof typeof googleFonts] || googleFonts.latin;
}

/**
 * üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
 */
function getEmbeddedFontForScript(script: string): string | undefined {
  const embeddings = {
    cyrillic: 'cyrillicBasic',
    latin: 'latinExtended'
  };
  
  return embeddings[script as keyof typeof embeddings];
}

/**
 * üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
 */
function getSystemFonts(script: string): string[] {
  return WEB_SAFE_FONTS[script as keyof typeof WEB_SAFE_FONTS] || WEB_SAFE_FONTS.universal;
}

/**
 * üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Google Font
 */
export async function loadGoogleFont(fontUrl: string): Promise<boolean> {
  return new Promise((resolve) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ
    const existingLink = document.querySelector(`link[href="${fontUrl}"]`);
    if (existingLink) {
      resolve(true);
      return;
    }
    
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = fontUrl;
    
    link.onload = () => {
      console.log('‚úÖ Google Font loaded successfully');
      resolve(true);
    };
    
    link.onerror = () => {
      console.warn('‚ùå Failed to load Google Font');
      resolve(false);
    };
    
    document.head.appendChild(link);
    
    // Timeout fallback
    setTimeout(() => resolve(false), 5000);
  });
}

/**
 * üé® –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫ PDF –æ–ø—Ü–∏—è–º
 */
export function applyFontSolutionToPDF(
  pdfOptions: any, 
  fontSolution: FontSolution,
  text: string
): any {
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∏–º–≤–æ–ª–æ–≤
  const hasUnicodeChars = /[^\u0000-\u00FF]/.test(text);
  
  if (hasUnicodeChars && fontSolution.strategy === 'system') {
    // –î–ª—è Unicode –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
    return {
      ...pdfOptions,
      fontFamily: fontSolution.primary,
      fontFallback: fontSolution.fallback,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è Unicode
      useSystemFonts: true,
      embedFonts: false, // –ù–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ
      unicodeSupport: true
    };
  }
  
  return {
    ...pdfOptions,
    fontFamily: fontSolution.primary,
    fontFallback: fontSolution.fallback,
    embedFonts: fontSolution.strategy === 'embedded'
  };
}

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
 */
export function testFontSupport(fontFamily: string, testText: string): boolean {
  try {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return false;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å–∏–º–≤–æ–ª–æ–≤
    ctx.font = `12px "${fontFamily}"`;
    const metrics1 = ctx.measureText(testText);
    
    ctx.font = '12px monospace';
    const metrics2 = ctx.measureText(testText);
    
    // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ —Ä–∞–∑–Ω–∞—è, —à—Ä–∏—Ñ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã
    return Math.abs(metrics1.width - metrics2.width) > 1;
  } catch {
    return false;
  }
}

/**
 * üéØ –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PDF —Å —É—á–µ—Ç–æ–º —à—Ä–∏—Ñ—Ç–æ–≤
 */
export async function getOptimalFontSettings(
  language: string,
  script: string, 
  csvData: string[][]
): Promise<{
  fontSolution: FontSolution;
  pdfOptions: any;
  recommendations: string[];
}> {
  
  const sampleText = csvData.flat().slice(0, 10).join(' ');
  const fontSolution = await getBestFontSolution(language, script);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º web —à—Ä–∏—Ñ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (fontSolution.webFontUrl) {
    await loadGoogleFont(fontSolution.webFontUrl);
  }
  
  const recommendations: string[] = [];
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (fontSolution.strategy === 'web') {
    recommendations.push(`üì° Using web font: ${fontSolution.primary}`);
  } else if (fontSolution.strategy === 'system') {
    recommendations.push(`üíª Using system font: ${fontSolution.primary}`);
  } else {
    recommendations.push(`üì¶ Using embedded font for better compatibility`);
  }
  
  const pdfOptions = applyFontSolutionToPDF({}, fontSolution, sampleText);
  
  return {
    fontSolution,
    pdfOptions,
    recommendations
  };
}

export default {
  getBestFontSolution,
  loadGoogleFont,
  applyFontSolutionToPDF,
  testFontSupport,
  getOptimalFontSettings
};