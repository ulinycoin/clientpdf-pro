/**
 * PDF Libraries Lazy Loader
 * 
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
 * –ö–µ—à–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç fallback –∏ error recovery.
 */

interface PDFLibraries {
  pdfLib: typeof import('pdf-lib');
  jsPDF: typeof import('jspdf');
  pdfjsLib: typeof import('pdfjs-dist');
}

interface LoadingState {
  isLoading: boolean;
  error: string | null;
  libraries: Partial<PDFLibraries>;
}

class PDFLibraryLoader {
  private loadingState: LoadingState = {
    isLoading: false,
    error: null,
    libraries: {}
  };

  private loadingPromise: Promise<PDFLibraries> | null = null;

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
   */
  async loadAll(): Promise<PDFLibraries> {
    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ –ø—Ä–æ–º–∏—Å
    if (this.loadingPromise) {
      return this.loadingPromise;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    if (this.isAllLoaded()) {
      return this.loadingState.libraries as PDFLibraries;
    }

    this.loadingPromise = this.performLoading();
    return this.loadingPromise;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
   */
  async loadLibrary<K extends keyof PDFLibraries>(
    libraryName: K
  ): Promise<PDFLibraries[K]> {
    if (this.loadingState.libraries[libraryName]) {
      return this.loadingState.libraries[libraryName] as PDFLibraries[K];
    }

    try {
      const library = await this.importLibrary(libraryName);
      this.loadingState.libraries[libraryName] = library;
      return library;
    } catch (error) {
      const errorMessage = `Failed to load ${libraryName}: ${error instanceof Error ? error.message : 'Unknown error'}`;
      this.loadingState.error = errorMessage;
      throw new Error(errorMessage);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
   */
  getLoadingState(): LoadingState {
    return { ...this.loadingState };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
   */
  isLibraryLoaded<K extends keyof PDFLibraries>(libraryName: K): boolean {
    return !!this.loadingState.libraries[libraryName];
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ —Ñ–æ–Ω–µ
   */
  async preloadLibraries(): Promise<void> {
    try {
      await this.loadAll();
    } catch (error) {
      console.warn('PDF libraries preloading failed:', error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–µ—à (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  clearCache(): void {
    this.loadingState = {
      isLoading: false,
      error: null,
      libraries: {}
    };
    this.loadingPromise = null;
  }

  private async performLoading(): Promise<PDFLibraries> {
    this.loadingState.isLoading = true;
    this.loadingState.error = null;

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [pdfLib, jsPDF, pdfjsLib] = await Promise.all([
        this.importLibrary('pdfLib'),
        this.importLibrary('jsPDF'), 
        this.importLibrary('pdfjsLib')
      ]);

      const libraries: PDFLibraries = { pdfLib, jsPDF, pdfjsLib };
      
      this.loadingState.libraries = libraries;
      this.loadingState.isLoading = false;
      
      return libraries;
    } catch (error) {
      this.loadingState.isLoading = false;
      this.loadingState.error = error instanceof Error ? error.message : 'Unknown error';
      throw error;
    }
  }

  private async importLibrary<K extends keyof PDFLibraries>(
    libraryName: K
  ): Promise<PDFLibraries[K]> {
    const startTime = performance.now();
    
    try {
      let library: any;

      switch (libraryName) {
        case 'pdfLib':
          library = await import('pdf-lib');
          break;
        case 'jsPDF':
          library = await import('jspdf');
          break;
        case 'pdfjsLib':
          library = await import('pdfjs-dist');
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º worker –¥–ª—è pdfjs
          await this.configurePdfjsWorker(library);
          break;
        default:
          throw new Error(`Unknown library: ${libraryName}`);
      }

      const loadTime = performance.now() - startTime;
      console.log(`üìö Loaded ${libraryName} in ${loadTime.toFixed(2)}ms`);
      
      return library;
    } catch (error) {
      const loadTime = performance.now() - startTime;
      console.error(`‚ùå Failed to load ${libraryName} after ${loadTime.toFixed(2)}ms:`, error);
      throw error;
    }
  }

  private async configurePdfjsWorker(pdfjsLib: any): Promise<void> {
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º worker URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
      const isProduction = import.meta.env.PROD;
      const workerUrl = isProduction 
        ? 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js'
        : '/node_modules/pdfjs-dist/build/pdf.worker.mjs';

      pdfjsLib.GlobalWorkerOptions.workerSrc = workerUrl;
      
      console.log('üîß PDF.js worker configured:', workerUrl);
    } catch (error) {
      console.warn('‚ö†Ô∏è PDF.js worker configuration failed:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ worker (fallback)
    }
  }

  private isAllLoaded(): boolean {
    return !!(
      this.loadingState.libraries.pdfLib &&
      this.loadingState.libraries.jsPDF &&
      this.loadingState.libraries.pdfjsLib
    );
  }
}

// Singleton instance
export const pdfLibraryLoader = new PDFLibraryLoader();

// Export types for consumers
export type { PDFLibraries, LoadingState };

// Helper hooks for React components
export const usePDFLibraries = () => {
  const [state, setState] = React.useState<LoadingState>(
    pdfLibraryLoader.getLoadingState()
  );

  const loadLibraries = React.useCallback(async () => {
    try {
      setState(prev => ({ ...prev, isLoading: true, error: null }));
      await pdfLibraryLoader.loadAll();
      setState(pdfLibraryLoader.getLoadingState());
    } catch (error) {
      setState(pdfLibraryLoader.getLoadingState());
    }
  }, []);

  const loadSpecificLibrary = React.useCallback(async <K extends keyof PDFLibraries>(
    libraryName: K
  ) => {
    try {
      return await pdfLibraryLoader.loadLibrary(libraryName);
    } catch (error) {
      setState(pdfLibraryLoader.getLoadingState());
      throw error;
    }
  }, []);

  return {
    ...state,
    loadLibraries,
    loadSpecificLibrary,
    isLibraryLoaded: pdfLibraryLoader.isLibraryLoaded.bind(pdfLibraryLoader)
  };
};

// Performance monitoring
export const PDFLibraryMetrics = {
  measureLoadTime: async <T>(operation: string, fn: () => Promise<T>): Promise<T> => {
    const startTime = performance.now();
    try {
      const result = await fn();
      const duration = performance.now() - startTime;
      console.log(`‚ö° ${operation} completed in ${duration.toFixed(2)}ms`);
      return result;
    } catch (error) {
      const duration = performance.now() - startTime;
      console.error(`üí• ${operation} failed after ${duration.toFixed(2)}ms:`, error);
      throw error;
    }
  }
};

import React from 'react';
