/**
 * Copyright (c) 2024 LocalPDF Team
 * 
 * This file is part of LocalPDF.
 * 
 * LocalPDF is proprietary software: you may not copy, modify, distribute,
 * or use this software except as expressly permitted under the LocalPDF
 * Source Available License v1.0.
 * 
 * See the LICENSE file in the project root for license terms.
 * For commercial licensing, contact: license@localpdf.online
 */

// src/services/pdfLibraryLoader.ts

// –ö—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
const libraryCache = new Map<string, any>();

// –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
const loadingState = new Map<string, Promise<any>>();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pako –¥–ª—è pdf-lib —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–æ–¥—É–ª–µ–π
 */
async function initializePako() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ pako
    if (typeof window !== 'undefined' && (window as any).pako) {
      return (window as any).pako;
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pako —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–∫ ES6, —Ç–∞–∫ –∏ CommonJS –º–æ–¥—É–ª–µ–π
    const pakoModule = await import('pako');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç pako
    let pako;
    if (pakoModule.default && typeof pakoModule.default === 'object') {
      // –ï—Å–ª–∏ —ç—Ç–æ CommonJS –º–æ–¥—É–ª—å —Å default —ç–∫—Å–ø–æ—Ä—Ç–æ–º
      pako = pakoModule.default;
    } else if (pakoModule.deflate) {
      // –ï—Å–ª–∏ —ç—Ç–æ ES6 –º–æ–¥—É–ª—å —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏
      pako = pakoModule;
    } else {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
      pako = {
        deflate: pakoModule.deflate || pakoModule.default?.deflate,
        inflate: pakoModule.inflate || pakoModule.default?.inflate,
        deflateRaw: pakoModule.deflateRaw || pakoModule.default?.deflateRaw,
        inflateRaw: pakoModule.inflateRaw || pakoModule.default?.inflateRaw,
        gzip: pakoModule.gzip || pakoModule.default?.gzip,
        ungzip: pakoModule.ungzip || pakoModule.default?.ungzip,
        Deflate: pakoModule.Deflate || pakoModule.default?.Deflate,
        Inflate: pakoModule.Inflate || pakoModule.default?.Inflate,
        constants: pakoModule.constants || pakoModule.default?.constants,
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pako –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (!pako || !pako.deflate) {
      throw new Error('Pako library loaded but deflate method not found');
    }
    
    // –î–µ–ª–∞–µ–º pako –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è pdf-lib
    if (typeof window !== 'undefined') {
      (window as any).pako = pako;
    }
    
    console.log('‚úÖ Pako initialized successfully');
    return pako;
  } catch (error) {
    console.error('‚ùå Failed to initialize pako:', error);
    throw new Error(`Failed to initialize compression library: ${error.message}`);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É pdf-lib —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
 */
export async function loadPDFLib() {
  const cacheKey = 'pdf-lib';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (libraryCache.has(cacheKey)) {
    return libraryCache.get(cacheKey);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
  if (loadingState.has(cacheKey)) {
    return loadingState.get(cacheKey);
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingPromise = (async () => {
    try {
      console.log('üì¶ Loading PDF-lib...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pako
      await initializePako();
      
      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º pdf-lib
      const pdfLib = await import('pdf-lib');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
      if (!pdfLib.PDFDocument) {
        throw new Error('PDF-lib loaded but PDFDocument not found');
      }
      
      console.log('‚úÖ PDF-lib loaded successfully');
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      libraryCache.set(cacheKey, pdfLib);
      loadingState.delete(cacheKey);
      
      return pdfLib;
    } catch (error) {
      loadingState.delete(cacheKey);
      console.error('‚ùå Failed to load pdf-lib:', error);
      throw new Error(`Failed to load PDF processing library: ${error.message}`);
    }
  })();
  
  loadingState.set(cacheKey, loadingPromise);
  return loadingPromise;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É jsPDF —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
 */
export async function loadJsPDF() {
  const cacheKey = 'jspdf';
  
  if (libraryCache.has(cacheKey)) {
    return libraryCache.get(cacheKey);
  }
  
  if (loadingState.has(cacheKey)) {
    return loadingState.get(cacheKey);
  }
  
  const loadingPromise = (async () => {
    try {
      console.log('üì¶ Loading jsPDF...');
      
      const jsPDFModule = await import('jspdf');
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º jsPDF –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
      let jsPDF;
      if (jsPDFModule.jsPDF) {
        jsPDF = jsPDFModule.jsPDF;
      } else if (jsPDFModule.default) {
        jsPDF = jsPDFModule.default;
      } else {
        throw new Error('jsPDF constructor not found in module');
      }
      
      console.log('‚úÖ jsPDF loaded successfully');
      
      const result = { jsPDF };
      libraryCache.set(cacheKey, result);
      loadingState.delete(cacheKey);
      
      return result;
    } catch (error) {
      loadingState.delete(cacheKey);
      console.error('‚ùå Failed to load jsPDF:', error);
      throw new Error(`Failed to load PDF generation library: ${error.message}`);
    }
  })();
  
  loadingState.set(cacheKey, loadingPromise);
  return loadingPromise;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É pdfjs-dist —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
 */
export async function loadPDFJS() {
  const cacheKey = 'pdfjs';
  
  if (libraryCache.has(cacheKey)) {
    return libraryCache.get(cacheKey);
  }
  
  if (loadingState.has(cacheKey)) {
    return loadingState.get(cacheKey);
  }
  
  const loadingPromise = (async () => {
    try {
      console.log('üì¶ Loading PDF.js...');
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π worker
      const pdfjsLib = await import('pdfjs-dist');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ worker –¥–ª—è pdfjs
      const workerUrl = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;
      pdfjsLib.GlobalWorkerOptions.workerSrc = workerUrl;
      
      console.log('‚úÖ PDF.js loaded successfully');
      
      libraryCache.set(cacheKey, pdfjsLib);
      loadingState.delete(cacheKey);
      
      return pdfjsLib;
    } catch (error) {
      loadingState.delete(cacheKey);
      console.error('‚ùå Failed to load PDF.js:', error);
      throw new Error(`Failed to load PDF viewing library: ${error.message}`);
    }
  })();
  
  loadingState.set(cacheKey, loadingPromise);
  return loadingPromise;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É html2canvas —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
 */
export async function loadHtml2Canvas() {
  const cacheKey = 'html2canvas';
  
  if (libraryCache.has(cacheKey)) {
    return libraryCache.get(cacheKey);
  }
  
  if (loadingState.has(cacheKey)) {
    return loadingState.get(cacheKey);
  }
  
  const loadingPromise = (async () => {
    try {
      console.log('üì¶ Loading html2canvas...');
      
      const html2canvasModule = await import('html2canvas');
      const html2canvas = html2canvasModule.default || html2canvasModule;
      
      if (typeof html2canvas !== 'function') {
        throw new Error('html2canvas function not found');
      }
      
      console.log('‚úÖ html2canvas loaded successfully');
      
      libraryCache.set(cacheKey, html2canvas);
      loadingState.delete(cacheKey);
      
      return html2canvas;
    } catch (error) {
      loadingState.delete(cacheKey);
      console.error('‚ùå Failed to load html2canvas:', error);
      throw new Error(`Failed to load HTML to canvas library: ${error.message}`);
    }
  })();
  
  loadingState.set(cacheKey, loadingPromise);
  return loadingPromise;
}

/**
 * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
 */
export async function preloadAllLibraries() {
  try {
    console.log('üöÄ Preloading all PDF libraries...');
    
    await Promise.all([
      loadPDFLib(),
      loadJsPDF(),
      loadPDFJS(),
      loadHtml2Canvas()
    ]);
    
    console.log('‚úÖ All PDF libraries preloaded successfully');
  } catch (error) {
    console.error('‚ùå Failed to preload PDF libraries:', error);
    throw error;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∫—ç—à –±–∏–±–ª–∏–æ—Ç–µ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏)
 */
export function clearLibraryCache() {
  console.log('üßπ Clearing library cache...');
  libraryCache.clear();
  loadingState.clear();
}
