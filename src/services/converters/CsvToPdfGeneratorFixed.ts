import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { CsvParseResult, CsvToPdfOptions } from './CsvToPdfConverter';

/**
 * Fixed CSV to PDF Generator with robust font handling
 * Solves the "Cannot read properties of undefined (reading 'widths')" error
 * Provides reliable Unicode support without external font dependencies
 */
export class CsvToPdfGeneratorFixed {
  
  // Safe font mappings that are guaranteed to work in jsPDF
  private static readonly SAFE_FONTS = {
    'helvetica': { name: 'helvetica', supportsUnicode: false },
    'times': { name: 'times', supportsUnicode: true },
    'courier': { name: 'courier', supportsUnicode: false }
  } as const;

  // Unicode to ASCII transliteration map
  private static readonly UNICODE_REPLACEMENTS = new Map<string, string>([
    // Cyrillic to Latin transliteration
    ['–∞', 'a'], ['–ê', 'A'], ['–±', 'b'], ['–ë', 'B'],
    ['–≤', 'v'], ['–í', 'V'], ['–≥', 'g'], ['–ì', 'G'],
    ['–¥', 'd'], ['–î', 'D'], ['–µ', 'e'], ['–ï', 'E'],
    ['—ë', 'yo'], ['–Å', 'Yo'], ['–∂', 'zh'], ['–ñ', 'Zh'],
    ['–∑', 'z'], ['–ó', 'Z'], ['–∏', 'i'], ['–ò', 'I'],
    ['–π', 'y'], ['–ô', 'Y'], ['–∫', 'k'], ['–ö', 'K'],
    ['–ª', 'l'], ['–õ', 'L'], ['–º', 'm'], ['–ú', 'M'],
    ['–Ω', 'n'], ['–ù', 'N'], ['–æ', 'o'], ['–û', 'O'],
    ['–ø', 'p'], ['–ü', 'P'], ['—Ä', 'r'], ['–†', 'R'],
    ['—Å', 's'], ['–°', 'S'], ['—Ç', 't'], ['–¢', 'T'],
    ['—É', 'u'], ['–£', 'U'], ['—Ñ', 'f'], ['–§', 'F'],
    ['—Ö', 'h'], ['–•', 'H'], ['—Ü', 'ts'], ['–¶', 'Ts'],
    ['—á', 'ch'], ['–ß', 'Ch'], ['—à', 'sh'], ['–®', 'Sh'],
    ['—â', 'sch'], ['–©', 'Sch'], ['—ä', ''], ['–™', ''],
    ['—ã', 'y'], ['–´', 'Y'], ['—å', ''], ['–¨', ''],
    ['—ç', 'e'], ['–≠', 'E'], ['—é', 'yu'], ['–Æ', 'Yu'],
    ['—è', 'ya'], ['–Ø', 'Ya'],
    
    // Extended Latin characters
    ['√°', 'a'], ['√†', 'a'], ['√¢', 'a'], ['√§', 'a'], ['√£', 'a'], ['√•', 'a'],
    ['√Å', 'A'], ['√Ä', 'A'], ['√Ç', 'A'], ['√Ñ', 'A'], ['√É', 'A'], ['√Ö', 'A'],
    ['√©', 'e'], ['√®', 'e'], ['√™', 'e'], ['√´', 'e'],
    ['√â', 'E'], ['√à', 'E'], ['√ä', 'E'], ['√ã', 'E'],
    ['√≠', 'i'], ['√¨', 'i'], ['√Æ', 'i'], ['√Ø', 'i'],
    ['√ç', 'I'], ['√å', 'I'], ['√é', 'I'], ['√è', 'I'],
    ['√≥', 'o'], ['√≤', 'o'], ['√¥', 'o'], ['√∂', 'o'], ['√µ', 'o'],
    ['√ì', 'O'], ['√í', 'O'], ['√î', 'O'], ['√ñ', 'O'], ['√ï', 'O'],
    ['√∫', 'u'], ['√π', 'u'], ['√ª', 'u'], ['√º', 'u'],
    ['√ö', 'U'], ['√ô', 'U'], ['√õ', 'U'], ['√ú', 'U'],
    ['√ß', 'c'], ['√á', 'C'], ['√±', 'n'], ['√ë', 'N'],
    
    // Baltic languages (Latvian, Lithuanian)
    ['ƒÅ', 'a'], ['ƒÄ', 'A'], ['ƒç', 'c'], ['ƒå', 'C'],
    ['ƒì', 'e'], ['ƒí', 'E'], ['ƒ£', 'g'], ['ƒ¢', 'G'],
    ['ƒ´', 'i'], ['ƒ™', 'I'], ['ƒ∑', 'k'], ['ƒ∂', 'K'],
    ['ƒº', 'l'], ['ƒª', 'L'], ['≈Ü', 'n'], ['≈Ö', 'N'],
    ['≈°', 's'], ['≈†', 'S'], ['≈´', 'u'], ['≈™', 'U'],
    ['≈æ', 'z'], ['≈Ω', 'Z'],
    ['ƒÖ', 'a'], ['ƒÑ', 'A'], ['ƒô', 'e'], ['ƒò', 'E'],
    ['ƒó', 'e'], ['ƒñ', 'E'], ['ƒØ', 'i'], ['ƒÆ', 'I'],
    ['≈≥', 'u'], ['≈≤', 'U'],
    
    // Polish
    ['ƒá', 'c'], ['ƒÜ', 'C'], ['≈Ç', 'l'], ['≈Å', 'L'],
    ['≈Ñ', 'n'], ['≈É', 'N'], ['≈õ', 's'], ['≈ö', 'S'],
    ['≈∫', 'z'], ['≈π', 'Z'], ['≈º', 'z'], ['≈ª', 'Z'],
    
    // German
    ['√ü', 'ss'],
    
    // Special characters
    ['"', '"'], ['"', '"'], [''', "'"], [''', "'"],
    ['‚Äì', '-'], ['‚Äî', '-'], ['‚Ä¶', '...'],
    ['‚Ç¨', 'EUR'], ['¬£', 'GBP'], ['¬•', 'JPY']
  ]);

  /**
   * Main conversion method with robust error handling
   */
  public static async convertToPDF(
    parseResult: CsvParseResult, 
    options: Partial<CsvToPdfOptions> = {}
  ): Promise<Uint8Array> {
    
    const finalOptions: CsvToPdfOptions = {
      orientation: 'landscape',
      pageSize: 'legal',
      fontSize: 8,
      tableStyle: 'grid',
      headerStyle: 'bold',
      fitToPage: true,
      includeRowNumbers: false,
      marginTop: 20,
      marginBottom: 20,
      marginLeft: 10,
      marginRight: 10,
      fontFamily: 'auto',
      ...options
    };

    console.log('üöÄ Starting robust PDF generation...');

    // Create PDF with error handling
    const pdf = new jsPDF({
      orientation: finalOptions.orientation,
      unit: 'pt',
      format: finalOptions.pageSize
    });

    try {
      // Step 1: Set up safe font
      const fontResult = this.setupSafeFont(pdf, parseResult, finalOptions);
      console.log('‚úÖ Font setup result:', fontResult);

      // Step 2: Process data with safe character handling
      const processedData = this.processDataSafely(parseResult, fontResult.needsTransliteration);
      console.log('‚úÖ Data processed safely');

      // Step 3: Generate PDF content
      this.generatePDFContent(pdf, processedData, finalOptions, fontResult.selectedFont);
      console.log('‚úÖ PDF content generated');

      // Step 4: Return as Uint8Array
      const pdfOutput = pdf.output('arraybuffer');
      return new Uint8Array(pdfOutput);

    } catch (error) {
      console.error('‚ùå PDF generation error:', error);
      return this.createErrorPDF(pdf, error);
    }
  }

  /**
   * Set up a safe font that won't cause the 'widths' error
   */
  private static setupSafeFont(
    pdf: jsPDF,
    parseResult: CsvParseResult,
    options: CsvToPdfOptions
  ): {
    selectedFont: string;
    needsTransliteration: boolean;
    warnings: string[];
  } {
    const result = {
      selectedFont: 'helvetica',
      needsTransliteration: false,
      warnings: [] as string[]
    };

    try {
      // Analyze text content
      const allText = [
        ...parseResult.headers,
        ...parseResult.data.slice(0, 10).flatMap(row => 
          Object.values(row).map(v => String(v || ''))
        )
      ].join(' ');

      const hasUnicode = this.detectUnicodeCharacters(allText);
      console.log('üîç Unicode analysis:', {
        hasUnicode: hasUnicode.hasAny,
        hasCyrillic: hasUnicode.hasCyrillic,
        hasExtendedLatin: hasUnicode.hasExtendedLatin
      });

      // Determine best safe font
      let targetFont = 'helvetica'; // Default safe option

      if (hasUnicode.hasAny) {
        // Try times font for better Unicode support
        if (this.testFontSafely(pdf, 'times')) {
          targetFont = 'times';
          result.warnings.push('Using Times font for Unicode support');
        } else {
          result.needsTransliteration = true;
          result.warnings.push('Unicode characters will be transliterated');
        }
      }

      // Set the font safely
      this.setFontSafely(pdf, targetFont);
      result.selectedFont = targetFont;

      // If we have Unicode but using helvetica, we need transliteration
      if (hasUnicode.hasAny && targetFont === 'helvetica') {
        result.needsTransliteration = true;
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è Font setup warning:', error);
      // Fallback to absolute safest option
      pdf.setFont('helvetica', 'normal');
      result.selectedFont = 'helvetica';
      result.needsTransliteration = true;
      result.warnings.push('Using fallback font due to setup error');
    }

    return result;
  }

  /**
   * Test if a font can be safely used without causing errors
   */
  private static testFontSafely(pdf: jsPDF, fontName: string): boolean {
    try {
      // Save current state
      const originalFont = (pdf as any).internal.getFont();
      
      // Try to set the font
      pdf.setFont(fontName, 'normal');
      
      // Test with a simple string to trigger any width calculation
      const testWidth = pdf.getTextWidth('Test');
      
      // Check if width is valid
      const isValid = !isNaN(testWidth) && testWidth > 0;
      
      console.log(`üß™ Font test for ${fontName}:`, { isValid, testWidth });
      return isValid;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Font test failed for ${fontName}:`, error);
      return false;
    }
  }

  /**
   * Set font with comprehensive error handling
   */
  private static setFontSafely(pdf: jsPDF, fontName: string): void {
    try {
      pdf.setFont(fontName, 'normal');
      
      // Test that it actually works
      const testWidth = pdf.getTextWidth('Test');
      if (isNaN(testWidth) || testWidth <= 0) {
        throw new Error('Font metrics not available');
      }
      
      console.log(`‚úÖ Font ${fontName} set successfully`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Font ${fontName} failed, using helvetica:`, error);
      pdf.setFont('helvetica', 'normal');
    }
  }

  /**
   * Detect Unicode characters in text
   */
  private static detectUnicodeCharacters(text: string): {
    hasAny: boolean;
    hasCyrillic: boolean;
    hasExtendedLatin: boolean;
    hasSpecialChars: boolean;
  } {
    return {
      hasAny: /[^\x00-\x7F]/.test(text),
      hasCyrillic: /[–∞-—è—ë]/i.test(text),
      hasExtendedLatin: /[√Ä-√øƒÄ-≈æ]/.test(text),
      hasSpecialChars: /["'"‚Äì‚Äî‚Ä¶‚Ç¨¬£¬•]/.test(text)
    };
  }

  /**
   * Process data with safe character handling
   */
  private static processDataSafely(
    parseResult: CsvParseResult,
    needsTransliteration: boolean
  ): {
    headers: string[];
    rows: string[][];
  } {
    console.log('üîÑ Processing data, transliteration needed:', needsTransliteration);

    // Process headers
    const headers = parseResult.headers.map(header => 
      needsTransliteration ? this.transliterateText(header) : header
    );

    // Process data rows
    const rows = parseResult.data.map(row =>
      parseResult.headers.map(header => {
        const value = String(row[header] || '');
        return needsTransliteration ? this.transliterateText(value) : value;
      })
    );

    return { headers, rows };
  }

  /**
   * Transliterate Unicode text to safe ASCII
   */
  private static transliterateText(text: string): string {
    if (!text) return '';

    let result = String(text);
    
    // Apply character replacements
    for (const [unicode, replacement] of this.UNICODE_REPLACEMENTS) {
      result = result.replace(new RegExp(unicode, 'g'), replacement);
    }

    // Remove any remaining non-ASCII characters
    result = result.replace(/[^\x00-\x7F]/g, '');
    
    // Clean up multiple spaces
    result = result.replace(/\s+/g, ' ').trim();

    return result;
  }

  /**
   * Generate PDF content with safe table rendering
   */
  private static generatePDFContent(
    pdf: jsPDF,
    data: { headers: string[]; rows: string[][]; },
    options: CsvToPdfOptions,
    selectedFont: string
  ): void {
    
    // Set initial font size
    pdf.setFontSize(options.fontSize);

    let startY = options.marginTop;

    // Add title if specified
    if (options.title) {
      pdf.setFontSize(16);
      pdf.setFont(selectedFont, 'bold');
      pdf.text(this.transliterateText(options.title), options.marginLeft, startY);
      startY += 30;
    }

    // Generate table with safe configuration
    const tableConfig = this.getSafeTableConfig(options, selectedFont, data.headers.length);

    try {
      (pdf as any).autoTable({
        head: [data.headers],
        body: data.rows,
        startY: startY,
        margin: {
          top: options.marginTop,
          bottom: options.marginBottom,
          left: options.marginLeft,
          right: options.marginRight
        },
        ...tableConfig,
        
        // Error handling for table generation
        didParseCell: (cellInfo: any) => {
          try {
            if (cellInfo.cell && cellInfo.cell.text) {
              // Ensure text is always an array of strings
              if (!Array.isArray(cellInfo.cell.text)) {
                cellInfo.cell.text = [String(cellInfo.cell.text)];
              }
              
              // Clean each text element
              cellInfo.cell.text = cellInfo.cell.text.map((text: any) => 
                this.transliterateText(String(text))
              );
            }
          } catch (cellError) {
            console.warn('‚ö†Ô∏è Cell processing error:', cellError);
            cellInfo.cell.text = [''];
          }
        },

        didDrawPage: (data: any) => {
          try {
            // Add page numbers safely
            const pageNum = data.pageNumber || 1;
            pdf.setFontSize(8);
            pdf.setFont(selectedFont, 'normal');
            pdf.text(
              `Page ${pageNum}`,
              options.marginLeft,
              pdf.internal.pageSize.height - 10
            );
          } catch (pageError) {
            console.warn('‚ö†Ô∏è Page drawing error:', pageError);
          }
        }
      });

    } catch (tableError) {
      console.error('‚ùå Table generation failed:', tableError);
      throw new Error(`Table generation failed: ${tableError}`);
    }
  }

  /**
   * Get safe table configuration
   */
  private static getSafeTableConfig(
    options: CsvToPdfOptions,
    selectedFont: string,
    columnCount: number
  ) {
    // Adjust font size for wide tables
    const adjustedFontSize = columnCount > 10 ? 
      Math.max(6, options.fontSize - 1) : 
      options.fontSize;

    const baseStyles = {
      fontSize: adjustedFontSize,
      cellPadding: 3,
      overflow: 'linebreak' as const,
      halign: 'left' as const,
      valign: 'middle' as const
    };

    const headerStyles = {
      fillColor: options.headerStyle === 'colored' ? [41, 128, 185] : [245, 245, 245],
      textColor: options.headerStyle === 'colored' ? [255, 255, 255] : [51, 51, 51],
      fontStyle: options.headerStyle === 'bold' ? 'bold' as const : 'normal' as const
    };

    let alternateRowStyles = {};
    let tableLineWidth = 0.5;

    switch (options.tableStyle) {
      case 'striped':
        alternateRowStyles = { fillColor: [249, 249, 249] };
        break;
      case 'minimal':
        tableLineWidth = 0.25;
        break;
      case 'plain':
        tableLineWidth = 0;
        break;
    }

    return {
      styles: baseStyles,
      headStyles: headerStyles,
      alternateRowStyles,
      tableLineWidth,
      theme: 'plain',
      showHead: true
    };
  }

  /**
   * Create error PDF when main generation fails
   */
  private static createErrorPDF(pdf: jsPDF, error: any): Uint8Array {
    try {
      console.log('üìÑ Creating error PDF...');
      
      // Reset to safest possible state
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(12);
      
      // Add error information
      pdf.text('PDF Generation Error', 50, 50);
      pdf.setFontSize(10);
      pdf.text('An error occurred while generating the PDF:', 50, 80);
      pdf.text(String(error).substring(0, 100), 50, 100);
      pdf.text('Please try with different settings or contact support.', 50, 120);
      pdf.text('Suggestions:', 50, 150);
      pdf.text('- Use smaller font size', 60, 170);
      pdf.text('- Try portrait orientation', 60, 190);
      pdf.text('- Reduce data complexity', 60, 210);

      const errorOutput = pdf.output('arraybuffer');
      return new Uint8Array(errorOutput);
    } catch (fallbackError) {
      console.error('‚ùå Even error PDF failed:', fallbackError);
      // Return minimal valid PDF
      const minimalPdf = new jsPDF();
      minimalPdf.text('Error', 20, 20);
      return new Uint8Array(minimalPdf.output('arraybuffer'));
    }
  }

  /**
   * Quick compatibility test method
   */
  public static testFontCompatibility(): {
    helvetica: boolean;
    times: boolean;
    courier: boolean;
    recommendations: string[];
  } {
    const testPdf = new jsPDF();
    
    const results = {
      helvetica: this.testFontSafely(testPdf, 'helvetica'),
      times: this.testFontSafely(testPdf, 'times'),
      courier: this.testFontSafely(testPdf, 'courier'),
      recommendations: [] as string[]
    };

    // Add recommendations
    if (results.times) {
      results.recommendations.push('Times font recommended for Unicode content');
    }
    if (!results.times && results.helvetica) {
      results.recommendations.push('Use Helvetica with transliteration for special characters');
    }
    if (!results.helvetica && !results.times) {
      results.recommendations.push('Consider updating jsPDF version');
    }

    return results;
  }
}
