import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { CsvParseResult, CsvToPdfOptions, ColumnAnalysis } from './CsvToPdfConverter';

export class CsvToPdfGenerator {
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSV –≤ PDF —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async convertToPDF(
    parseResult: CsvParseResult, 
    options: Partial<CsvToPdfOptions> = {}
  ): Promise<Uint8Array> {
    const opts = { 
      orientation: 'landscape' as const,
      pageSize: 'a4' as const,
      fontSize: 7,
      tableStyle: 'grid' as const,
      headerStyle: 'bold' as const,
      fitToPage: true,
      includeRowNumbers: false,
      marginTop: 20,
      marginBottom: 20,
      marginLeft: 10,
      marginRight: 10,
      maxRowsPerPage: 1000,
      autoDetectDataTypes: true,
      ...options
    };
    
    try {
      // –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      const columnAnalysis = this.analyzeColumns(parseResult.headers, parseResult.data, parseResult.columnTypes);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const pdf = new jsPDF({
        orientation: opts.orientation,
        unit: 'mm',
        format: opts.pageSize.toLowerCase() as any,
      });

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      pdf.setProperties({
        title: opts.title || 'CSV Data Export',
        subject: `Data table with ${parseResult.rowCount} rows and ${parseResult.columnCount} columns`,
        author: 'ClientPDF Pro',
        creator: 'ClientPDF Pro - CSV to PDF Converter',
        keywords: 'CSV, PDF, data, table, export',
      });

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      let currentY = opts.marginTop;
      if (opts.title) {
        pdf.setFontSize(16);
        pdf.setFont('helvetica', 'bold');
        pdf.text(opts.title, opts.marginLeft, currentY);
        currentY += 10;
      }

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'normal');
      pdf.text(
        `Data: ${parseResult.rowCount} rows √ó ${parseResult.columnCount} columns | Delimiter: "${parseResult.delimiter}"`,
        opts.marginLeft,
        currentY
      );
      currentY += 5;

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
      const tableHeaders = opts.includeRowNumbers 
        ? ['#', ...parseResult.headers]
        : parseResult.headers;

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é
      const maxRows = opts.maxRowsPerPage || 1000;
      const dataToProcess = parseResult.data.slice(0, maxRows);

      const tableData = dataToProcess.map((row, index) => {
        const rowData = parseResult.headers.map(header => {
          const value = row[header];
          return this.formatCellValue(value, parseResult.columnTypes[header]);
        });
        return opts.includeRowNumbers 
          ? [String(index + 1), ...rowData]
          : rowData;
      });

      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –ø–æ–¥–≥–æ–Ω–∫–∏ –ø–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const columnStyles = this.calculateOptimalColumnWidths(
        columnAnalysis, 
        opts, 
        opts.includeRowNumbers
      );
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã
      const tableStyles = this.getTableStyles(opts);
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
      pdf.autoTable({
        head: [tableHeaders],
        body: tableData,
        startY: currentY + 5,
        margin: {
          top: opts.marginTop,
          bottom: opts.marginBottom,
          left: opts.marginLeft,
          right: opts.marginRight,
        },
        styles: {
          fontSize: opts.fontSize,
          cellPadding: 1.5,
          overflow: 'linebreak',
          halign: 'left',
          valign: 'top',
        },
        headStyles: {
          ...tableStyles.headerStyles,
          minCellHeight: 6,
          fontSize: Math.max(opts.fontSize, 7),
        },
        bodyStyles: tableStyles.bodyStyles,
        alternateRowStyles: tableStyles.alternateRowStyles,
        columnStyles: columnStyles,
        showHead: true,
        showFoot: false,
        tableLineColor: tableStyles.lineColor,
        tableLineWidth: tableStyles.lineWidth,
        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–≥–æ–Ω—è–Ω–∏–µ –ø–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        tableWidth: 'wrap',
        horizontalPageBreak: true,
        horizontalPageBreakRepeat: 0,
        didDrawPage: (data: any) => {
          // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
          const pageNumber = (pdf as any).internal.getCurrentPageInfo().pageNumber;
          const totalPages = (pdf as any).internal.getNumberOfPages();
          
          pdf.setFontSize(8);
          pdf.setFont('helvetica', 'normal');
          
          // –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          pdf.text(
            `Page ${pageNumber} of ${totalPages}`,
            opts.marginLeft,
            (pdf as any).internal.pageSize.height - 10
          );
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
          const pageWidth = (pdf as any).internal.pageSize.width;
          pdf.text(
            `${parseResult.rowCount} rows | ${parseResult.columnCount} columns`,
            pageWidth - 50,
            (pdf as any).internal.pageSize.height - 10
          );
        },
      });

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫
      if (parseResult.rowCount > maxRows) {
        const finalY = (pdf as any).lastAutoTable.finalY || currentY + 50;
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'italic');
        pdf.text(
          `Note: Only first ${maxRows} of ${parseResult.rowCount} rows are displayed`,
          opts.marginLeft,
          finalY + 10
        );
      }

      // –í–æ–∑–≤—Ä–∞—Ç PDF –∫–∞–∫ Uint8Array
      const pdfOutput = pdf.output('arraybuffer');
      return new Uint8Array(pdfOutput);

    } catch (error) {
      throw new Error(`PDF generation failed: ${error}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private static analyzeColumns(headers: string[], data: Record<string, any>[], columnTypes: Record<string, string>): ColumnAnalysis[] {
    return headers.map(header => {
      const sampleSize = Math.min(50, data.length);
      const values = data.slice(0, sampleSize)
        .map(row => String(row[header] || ''))
        .filter(val => val.trim() !== '');
      
      const lengths = values.map(val => val.length);
      const maxLength = Math.max(...lengths, header.length);
      const avgLength = lengths.length > 0 ? lengths.reduce((a, b) => a + b, 0) / lengths.length : 0;
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
      let alignment: 'left' | 'center' | 'right' = 'left';
      const type = columnTypes[header];
      
      if (type === 'number') {
        alignment = 'right';
      } else if (type === 'date' || type === 'boolean') {
        alignment = 'center';
      } else if (avgLength < 10) {
        alignment = 'center';
      }
      
      return {
        name: header,
        type: type as any,
        maxLength,
        avgLength,
        hasEmptyValues: values.length < sampleSize,
        alignment,
        samples: values.slice(0, 3)
      };
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏ –ø–æ —Ç–∏–ø—É
   */
  private static formatCellValue(value: any, type: string): string {
    if (value === null || value === undefined || value === '') {
      return '';
    }
    
    const strValue = String(value);
    
    switch (type) {
      case 'number':
        const numValue = parseFloat(strValue.replace(/[,\s]/g, ''));
        if (!isNaN(numValue)) {
          return numValue.toLocaleString('en-US', { maximumFractionDigits: 2 });
        }
        return strValue;
        
      case 'date':
        const dateValue = new Date(strValue);
        if (!isNaN(dateValue.getTime())) {
          return dateValue.toLocaleDateString();
        }
        return strValue;
        
      case 'boolean':
        const lowerValue = strValue.toLowerCase();
        if (['true', 'yes', '1', 'on'].includes(lowerValue)) return 'Yes';
        if (['false', 'no', '0', 'off'].includes(lowerValue)) return 'No';
        return strValue;
        
      default:
        return strValue;
    }
  }

  /**
   * üî• REVOLUTIONIZED: Bulletproof column width calculation with GUARANTEED page fitting
   */
  private static calculateOptimalColumnWidths(
    columnAnalysis: ColumnAnalysis[], 
    opts: CsvToPdfOptions,
    includeRowNumbers: boolean
  ): { [key: number]: any } {
    const columnStyles: { [key: number]: any } = {};
    
    // üéØ –ö–†–ò–¢–ò–ß–ù–û: –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —à–∏—Ä–∏–Ω—ã
    const pageWidth = this.getPageWidth(opts.pageSize, opts.orientation);
    const availableWidth = pageWidth - opts.marginLeft - opts.marginRight;
    
    console.log(`üìè Page calculations: ${pageWidth}mm total, ${availableWidth}mm available for table`);
    
    // üéØ –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ –≤–∫–ª—é—á–∞—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
    const totalColumns = columnAnalysis.length + (includeRowNumbers ? 1 : 0);
    
    // üéØ –ö–†–ò–¢–ò–ß–ù–û: –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    const absoluteMinWidth = 8; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ –º–º
    const absoluteMaxWidth = Math.floor(availableWidth / 3); // –ú–∞–∫—Å–∏–º—É–º 1/3 –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    // üéØ –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: —á–µ–º –±–æ–ª—å—à–µ –∫–æ–ª–æ–Ω–æ–∫, —Ç–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
    let targetMinWidth: number;
    let targetMaxWidth: number;
    let adaptiveFontSize = opts.fontSize;
    
    if (totalColumns <= 5) {
      targetMinWidth = 25;
      targetMaxWidth = 60;
    } else if (totalColumns <= 10) {
      targetMinWidth = 20;
      targetMaxWidth = 45;
      adaptiveFontSize = Math.max(opts.fontSize - 0.5, 6);
    } else if (totalColumns <= 15) {
      targetMinWidth = 15;
      targetMaxWidth = 35;
      adaptiveFontSize = Math.max(opts.fontSize - 1, 6);
    } else {
      // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –º–Ω–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å
      targetMinWidth = 12;
      targetMaxWidth = 25;
      adaptiveFontSize = Math.max(opts.fontSize - 1.5, 5);
    }
    
    // üî• BULLETPROOF: –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    targetMinWidth = Math.max(targetMinWidth, absoluteMinWidth);
    targetMaxWidth = Math.min(targetMaxWidth, absoluteMaxWidth);
    
    console.log(`üìä Column strategy: ${totalColumns} columns, width range ${targetMinWidth}-${targetMaxWidth}mm, font ${adaptiveFontSize}pt`);
    
    // üéØ –§–ê–ó–ê 1: –†–∞—Å—á–µ—Ç –∂–µ–ª–∞–µ–º—ã—Ö —à–∏—Ä–∏–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const desiredWidths: number[] = [];
    let totalDesiredWidth = 0;
    
    // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if (includeRowNumbers) {
      const rowNumberWidth = Math.min(15, targetMinWidth * 1.2);
      desiredWidths.push(rowNumberWidth);
      totalDesiredWidth += rowNumberWidth;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
    columnAnalysis.forEach((column) => {
      // –ë–∞–∑–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const headerLength = column.name.length;
      const contentLength = Math.max(column.avgLength, column.maxLength * 0.7);
      const effectiveLength = Math.max(headerLength, contentLength);
      
      // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞: 1 —Å–∏–º–≤–æ–ª ‚âà 1.5–º–º –ø—Ä–∏ fontSize=7
      const charWidthMm = (adaptiveFontSize / 7) * 1.5;
      let desiredWidth = effectiveLength * charWidthMm + 4; // +4–º–º padding
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
      switch (column.type) {
        case 'number':
          desiredWidth = Math.max(desiredWidth, targetMinWidth);
          break;
        case 'date':
          desiredWidth = Math.max(desiredWidth, 22);
          break;
        case 'boolean':
          desiredWidth = Math.max(desiredWidth, 15);
          break;
        default:
          // –î–ª—è —Ç–µ–∫—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if (column.avgLength > 50) {
            desiredWidth = Math.min(desiredWidth, targetMaxWidth);
          }
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      desiredWidth = Math.max(targetMinWidth, Math.min(desiredWidth, targetMaxWidth));
      
      desiredWidths.push(desiredWidth);
      totalDesiredWidth += desiredWidth;
    });
    
    console.log(`üí° Desired total width: ${totalDesiredWidth.toFixed(1)}mm (available: ${availableWidth.toFixed(1)}mm)`);
    
    // üéØ –§–ê–ó–ê 2: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏ –ø–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    let finalWidths: number[];
    
    if (totalDesiredWidth > availableWidth) {
      // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è
      const scaleFactor = availableWidth / totalDesiredWidth;
      console.log(`üîß Scaling down by factor: ${scaleFactor.toFixed(3)}`);
      
      finalWidths = desiredWidths.map(width => {
        const scaledWidth = width * scaleFactor;
        // –ö–†–ò–¢–ò–ß–ù–û: –¥–∞–∂–µ –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±–ª—é–¥–∞–µ–º –º–∏–Ω–∏–º—É–º
        return Math.max(scaledWidth, absoluteMinWidth);
      });
      
      // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–æ–≤
      const recalculatedTotal = finalWidths.reduce((sum, w) => sum + w, 0);
      if (recalculatedTotal > availableWidth) {
        // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É—Ä–µ–∑–∞–µ–º –í–°–ï –∫–æ–ª–æ–Ω–∫–∏ –¥–æ –º–∏–Ω–∏–º—É–º–∞
        const excessWidth = recalculatedTotal - availableWidth;
        const reductionPerColumn = excessWidth / finalWidths.length;
        
        finalWidths = finalWidths.map(width => 
          Math.max(width - reductionPerColumn, absoluteMinWidth)
        );
      }
    } else {
      // –ï—Å—Ç—å –ª–∏—à–Ω–µ–µ –º–µ—Å—Ç–æ - –º–æ–∂–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
      const extraSpace = availableWidth - totalDesiredWidth;
      const bonusPerColumn = extraSpace / desiredWidths.length;
      
      finalWidths = desiredWidths.map(width => 
        Math.min(width + bonusPerColumn, targetMaxWidth)
      );
    }
    
    const finalTotalWidth = finalWidths.reduce((sum, w) => sum + w, 0);
    console.log(`‚úÖ Final total width: ${finalTotalWidth.toFixed(1)}mm (fit: ${finalTotalWidth <= availableWidth})`);
    
    // üéØ –§–ê–ó–ê 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ –∫–æ–ª–æ–Ω–∫–∞–º
    finalWidths.forEach((width, index) => {
      const column = index === 0 && includeRowNumbers ? null : columnAnalysis[includeRowNumbers ? index - 1 : index];
      
      columnStyles[index] = {
        cellWidth: width,
        overflow: 'linebreak',
        halign: column ? column.alignment : 'center',
        fontSize: adaptiveFontSize,
        valign: 'top',
        minCellHeight: 4,
      };
    });
    
    // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ò–ù–£–ñ–î–ï–ù–ò–ï: autoTable –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–≥–æ–Ω–∫–∏
    if (finalTotalWidth > availableWidth * 0.98) { // 2% –±—É—Ñ–µ—Ä
      console.log('üö® Applying emergency table constraints');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
      Object.keys(columnStyles).forEach(key => {
        columnStyles[parseInt(key)].fontSize = Math.max(adaptiveFontSize - 1, 5);
        columnStyles[parseInt(key)].cellPadding = 1;
      });
    }
    
    return columnStyles;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –º–º
   */
  private static getPageWidth(pageSize: string, orientation: string): number {
    const sizes = {
      'a4': orientation === 'landscape' ? 297 : 210,
      'a3': orientation === 'landscape' ? 420 : 297,
      'letter': orientation === 'landscape' ? 279 : 216,
      'legal': orientation === 'landscape' ? 356 : 216,
    };
    return sizes[pageSize as keyof typeof sizes] || 297;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
   */
  private static getTableStyles(options: CsvToPdfOptions) {
    const baseStyles = {
      lineColor: [200, 200, 200],
      lineWidth: 0.1,
    };

    switch (options.tableStyle) {
      case 'grid':
        return {
          ...baseStyles,
          headerStyles: {
            fillColor: [41, 128, 185],
            textColor: [255, 255, 255],
            fontStyle: 'bold' as const,
            halign: 'center' as const,
          },
          bodyStyles: {
            fillColor: [255, 255, 255],
            textColor: [0, 0, 0],
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245],
          },
          lineWidth: 0.3,
        };

      case 'striped':
        return {
          ...baseStyles,
          headerStyles: {
            fillColor: [52, 73, 94],
            textColor: [255, 255, 255],
            fontStyle: 'bold' as const,
            halign: 'center' as const,
          },
          bodyStyles: {
            fillColor: [255, 255, 255],
            textColor: [0, 0, 0],
          },
          alternateRowStyles: {
            fillColor: [248, 249, 250],
          },
          lineWidth: 0.1,
        };

      case 'minimal':
        return {
          ...baseStyles,
          headerStyles: {
            fillColor: [255, 255, 255],
            textColor: [0, 0, 0],
            fontStyle: 'bold' as const,
            halign: 'center' as const,
          },
          bodyStyles: {
            fillColor: [255, 255, 255],
            textColor: [0, 0, 0],
          },
          alternateRowStyles: {
            fillColor: [255, 255, 255],
          },
          lineColor: [220, 220, 220],
          lineWidth: 0.1,
        };

      case 'plain':
      default:
        return {
          ...baseStyles,
          headerStyles: {
            fillColor: [255, 255, 255],
            textColor: [0, 0, 0],
            fontStyle: 'bold' as const,
            halign: 'center' as const,
          },
          bodyStyles: {
            fillColor: [255, 255, 255],
            textColor: [0, 0, 0],
          },
          alternateRowStyles: {
            fillColor: [255, 255, 255],
          },
          lineColor: [0, 0, 0],
          lineWidth: 0,
        };
    }
  }
}