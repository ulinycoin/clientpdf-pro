import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import { OCRResult } from '../types/ocr.types';

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä searchable PDF —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
 * ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ Unicode —à—Ä–∏—Ñ—Ç–æ–≤
 * ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * ‚úÖ Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤
 * ‚úÖ Proper debugging –∏ logging
 * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö OCR –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
 */
export class ImprovedPDFGenerator {
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ searchable PDF —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  async createSearchablePDF(
    originalFile: File,
    ocrResult: OCRResult,
    images: ImageData[]
  ): Promise<Blob> {
    
    console.log('üìÑ ImprovedPDF - Starting searchable PDF creation:', {
      originalFile: originalFile.name,
      pagesCount: images.length,
      textLength: ocrResult.text.length,
      hasWords: !!(ocrResult.words && ocrResult.words.length > 0),
      hasBlocks: !!(ocrResult.blocks && ocrResult.blocks.length > 0)
    });

    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
      const pdfDoc = await PDFDocument.create();
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fontkit –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
      pdfDoc.registerFontkit(fontkit);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç
      const textSample = ocrResult.text || '';
      const needsCyrillic = this.containsCyrillic(textSample);
      
      console.log(`üî§ ImprovedPDF - Text analysis:`, {
        textLength: textSample.length,
        textPreview: textSample.substring(0, 100) + '...',
        needsCyrillic,
        language: this.detectLanguage(textSample)
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç
      const font = await this.loadOptimalFont(pdfDoc, needsCyrillic, textSample);
      
      console.log(`‚úÖ ImprovedPDF - Font loaded successfully:`, {
        fontType: font.name || 'unknown',
        supportsCyrillic: needsCyrillic
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      for (let pageIndex = 0; pageIndex < images.length; pageIndex++) {
        const imageData = images[pageIndex];
        const pageResult = ocrResult.pages?.[pageIndex] || ocrResult.pages?.[0] || {
          text: ocrResult.text,
          confidence: ocrResult.confidence,
          blocks: ocrResult.blocks || [],
          dimensions: { width: imageData.width, height: imageData.height }
        };

        console.log(`üìÑ ImprovedPDF - Processing page ${pageIndex + 1}:`, {
          dimensions: `${imageData.width}x${imageData.height}`,
          blocks: pageResult.blocks?.length || 0,
          pageText: pageResult.text?.length || 0
        });

        await this.createSearchablePage(
          pdfDoc, 
          font, 
          imageData, 
          pageResult, 
          pageIndex + 1
        );
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
      console.log('üíæ ImprovedPDF - Saving PDF...');
      const pdfBytes = await pdfDoc.save();
      
      console.log(`‚úÖ ImprovedPDF - PDF created successfully:`, {
        size: pdfBytes.length,
        sizeKB: (pdfBytes.length / 1024).toFixed(1) + 'KB',
        pages: images.length
      });

      return new Blob([pdfBytes], { type: 'application/pdf' });

    } catch (error) {
      console.error('‚ùå ImprovedPDF - Creation failed:', error);
      throw new Error(`Failed to create searchable PDF: ${error.message}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å searchable —Ç–µ–∫—Å—Ç–æ–º
   */
  private async createSearchablePage(
    pdfDoc: PDFDocument,
    font: any,
    imageData: ImageData,
    pageResult: any,
    pageNumber: number
  ): Promise<void> {
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const page = pdfDoc.addPage([imageData.width, imageData.height]);
    
    console.log(`üìÑ Page ${pageNumber} - Adding background image...`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await this.addBackgroundImage(page, imageData);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    console.log(`üîç Page ${pageNumber} - Adding searchable text layer...`);
    await this.addSearchableTextLayer(page, font, pageResult, imageData, pageNumber);
    
    console.log(`‚úÖ Page ${pageNumber} completed`);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private async addBackgroundImage(page: any, imageData: ImageData): Promise<void> {
    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ImageData –≤ PNG
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        throw new Error('Could not create canvas context');
      }

      canvas.width = imageData.width;
      canvas.height = imageData.height;
      ctx.putImageData(imageData, 0, 0);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
      const imageBlob = await new Promise<Blob>((resolve, reject) => {
        canvas.toBlob((blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('Failed to create image blob'));
          }
        }, 'image/png', 0.95);
      });

      // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ PDF
      const imageBytes = await imageBlob.arrayBuffer();
      const image = await page.doc.embedPng(imageBytes);

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      page.drawImage(image, {
        x: 0,
        y: 0,
        width: imageData.width,
        height: imageData.height,
      });

      console.log('üñºÔ∏è Background image added successfully');

    } catch (error) {
      console.error('‚ùå Failed to add background image:', error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  private async addSearchableTextLayer(
    page: any,
    font: any,
    pageResult: any,
    imageData: ImageData,
    pageNumber: number
  ): Promise<void> {
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
      const words = this.extractWordsFromPageResult(pageResult);
      
      console.log(`üî§ Page ${pageNumber} - Found ${words.length} words to place`);

      if (words.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤, —Ä–∞–∑–º–µ—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        await this.addFallbackText(page, font, pageResult.text || '', imageData);
        return;
      }

      // –†–∞–∑–º–µ—â–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
      let placedWords = 0;
      for (const word of words) {
        try {
          if (word.text && word.text.trim() && word.bbox) {
            await this.placeWordInPDF(page, font, word, imageData);
            placedWords++;
          }
        } catch (wordError) {
          console.warn(`‚ö†Ô∏è Failed to place word "${word.text}":`, wordError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        }
      }

      console.log(`‚úÖ Page ${pageNumber} - Successfully placed ${placedWords}/${words.length} words`);

    } catch (error) {
      console.error(`‚ùå Failed to add searchable text layer for page ${pageNumber}:`, error);
      
      // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º
      try {
        await this.addFallbackText(page, font, pageResult.text || '', imageData);
        console.log(`‚úÖ Page ${pageNumber} - Added fallback text layer`);
      } catch (fallbackError) {
        console.error(`‚ùå Even fallback text failed for page ${pageNumber}:`, fallbackError);
      }
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
   */
  private extractWordsFromPageResult(pageResult: any): any[] {
    let words: any[] = [];

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–ª–æ–≤
    if (pageResult.words && Array.isArray(pageResult.words)) {
      words = pageResult.words;
    } else if (pageResult.blocks && Array.isArray(pageResult.blocks)) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –±–ª–æ–∫–æ–≤
      for (const block of pageResult.blocks) {
        if (block.words && Array.isArray(block.words)) {
          words.push(...block.words);
        }
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å–ª–æ–≤–∞
    return words.filter(word => 
      word && 
      word.text && 
      word.text.trim() && 
      word.bbox &&
      typeof word.bbox.x0 === 'number' &&
      typeof word.bbox.y0 === 'number' &&
      typeof word.bbox.x1 === 'number' &&
      typeof word.bbox.y1 === 'number'
    );
  }

  /**
   * –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ PDF
   */
  private async placeWordInPDF(
    page: any,
    font: any,
    word: any,
    imageData: ImageData
  ): Promise<void> {
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ bbox
    const wordHeight = Math.abs(word.bbox.y1 - word.bbox.y0);
    const fontSize = Math.max(wordHeight * 0.8, 8); // –ú–∏–Ω–∏–º—É–º 8pt
    
    // PDF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (Y –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
    const x = word.bbox.x0;
    const y = imageData.height - word.bbox.y1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (x < 0 || x > imageData.width || y < 0 || y > imageData.height) {
      console.warn(`‚ö†Ô∏è Word "${word.text}" has invalid coordinates: x=${x}, y=${y}`);
      return;
    }

    try {
      // –†–∞–∑–º–µ—â–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
      page.drawText(word.text, {
        x: x,
        y: y,
        size: fontSize,
        font: font,
        color: rgb(0, 0, 0),
        opacity: 0, // –ù–µ–≤–∏–¥–∏–º—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –ø–æ–∏—Å–∫–∞
      });

    } catch (drawError) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–æ–±—É–µ–º fallback
      console.warn(`‚ö†Ô∏è Failed to draw "${word.text}", trying ASCII fallback`);
      
      try {
        // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const asciiText = word.text.replace(/[^\x20-\x7E]/g, ' ');
        if (asciiText.trim()) {
          page.drawText(asciiText, {
            x: x,
            y: y,
            size: fontSize,
            font: font,
            color: rgb(0, 0, 0),
            opacity: 0,
          });
        }
      } catch (fallbackError) {
        console.warn(`‚ö†Ô∏è Even ASCII fallback failed for word "${word.text}"`);
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ fallback —Ç–µ–∫—Å—Ç–∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–ª–æ–≤
   */
  private async addFallbackText(
    page: any,
    font: any,
    text: string,
    imageData: ImageData
  ): Promise<void> {
    
    if (!text || !text.trim()) {
      console.warn('‚ö†Ô∏è No text to add as fallback');
      return;
    }

    try {
      // –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É –Ω–µ–≤–∏–¥–∏–º—ã–º —Å–ª–æ–µ–º
      page.drawText(text, {
        x: 10,
        y: imageData.height - 50,
        size: 12,
        font: font,
        color: rgb(0, 0, 0),
        opacity: 0, // –ù–µ–≤–∏–¥–∏–º—ã–π
      });

      console.log(`‚úÖ Fallback text added: ${text.length} characters`);

    } catch (error) {
      console.error('‚ùå Failed to add fallback text:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
   */
  private async loadOptimalFont(pdfDoc: PDFDocument, needsCyrillic: boolean, textSample: string): Promise<any> {
    
    if (needsCyrillic) {
      console.log('üî§ Loading Cyrillic font...');
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å DejaVu Sans –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      try {
        const fontUrl = 'https://cdn.jsdelivr.net/npm/dejavu-fonts-ttf@2.37.3/ttf/DejaVuSans.ttf';
        const response = await fetch(fontUrl, { mode: 'cors' });
        
        if (!response.ok) {
          throw new Error(`Font fetch failed: ${response.status}`);
        }
        
        const fontBytes = await response.arrayBuffer();
        const font = await pdfDoc.embedFont(fontBytes);
        
        console.log('‚úÖ DejaVu Sans font loaded successfully');
        return font;
        
      } catch (fontError) {
        console.warn('‚ö†Ô∏è Failed to load DejaVu Sans, trying alternative:', fontError);
        
        // Fallback: –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç
        try {
          const fallbackUrl = 'https://fonts.gstatic.com/s/notosans/v36/o-0mIpQlx3QUlC5A4PNB6Ryti20_6n1iPHjcz6L1SoM-jCpoiyD9A-9a6Vs.woff2';
          const response = await fetch(fallbackUrl, { mode: 'cors' });
          
          if (response.ok) {
            const fontBytes = await response.arrayBuffer();
            const font = await pdfDoc.embedFont(fontBytes);
            
            console.log('‚úÖ Noto Sans font loaded as fallback');
            return font;
          }
        } catch (fallbackError) {
          console.warn('‚ö†Ô∏è Fallback font also failed:', fallbackError);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—É
        console.log('‚ö†Ô∏è Using standard font as final fallback');
        return await pdfDoc.embedFont(StandardFonts.Helvetica);
      }
      
    } else {
      // –î–ª—è –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
      console.log('üî§ Loading standard font for Latin text...');
      return await pdfDoc.embedFont(StandardFonts.Helvetica);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ
   */
  private containsCyrillic(text: string): boolean {
    return /[\u0400-\u04FF]/.test(text);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  private detectLanguage(text: string): string {
    const hasCyrillic = this.containsCyrillic(text);
    const hasLatin = /[A-Za-z]/.test(text);
    
    if (hasCyrillic && hasLatin) {
      return 'mixed';
    } else if (hasCyrillic) {
      return 'cyrillic';
    } else if (hasLatin) {
      return 'latin';
    } else {
      return 'unknown';
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
export const improvedPDFGenerator = new ImprovedPDFGenerator();