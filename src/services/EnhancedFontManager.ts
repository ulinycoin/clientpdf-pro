/**
 * EnhancedFontManager.ts - –ú–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö Unicode —à—Ä–∏—Ñ—Ç–æ–≤
 * –í–µ—Ä—Å–∏—è 3.0 - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Unicode —á–µ—Ä–µ–∑ base64 –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
 */

import { jsPDF } from 'jspdf';

export interface CustomFontInfo {
  name: string;
  style: 'normal' | 'bold' | 'italic' | 'bolditalic';
  weight: number;
  unicodeSupport: string[];
  loaded: boolean;
  description: string;
}

export interface FontLoadResult {
  success: boolean;
  fontName: string;
  error?: string;
}

export class EnhancedFontManager {
  private static loadedFonts = new Map<string, boolean>();
  private static fontDataCache = new Map<string, string>();
  
  /**
   * –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ base64 —à—Ä–∏—Ñ—Ç—ã —Å Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
   * –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ DejaVu Sans –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤
   */
  private static readonly EMBEDDED_FONTS = {
    // DejaVu Sans subset —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Latin, Cyrillic, Greek
    'DejaVuSans': {
      normal: 'AAEAAAANAIAAAwBQRkZUTXJpYqsAAA7oAAAAHEdERUYANAAGAAAOyAAAACBPUy8yVkBkRwAAAVgAAABWY21hcAAPA9cAAAHQAAABSmdhc3D//wADAAAOwAAAAAhnbHlmR/Y3GwAAA1AAAA4YaGVhZBfKDM8AAADcAAAANmhoZWEHmQNZAAABFAAAACRobXR4C+oAAAAAAbAAAAAebG9jYQfGB4AAAAMcAAAANm1heHAAEgA8AAABOAAAACBuYW1lBr/7sgAAEWgAAAKwcG9zdABmAGYAABQYAAAA+QABAAAAA1n/agAAA+n/+v8LA+kAAQAAAAAAAAAAAAAAAAAAAAgAAQAAAAEAAF4i9+xfDzz1AAsD6AAAANc2ncUAAAAA1zaeBP/6/4ID6QNaAAAACAACAAAAAAAAAAEAAAAIACwAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQOqAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAIABgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAMAAAACwAAAAEAAAAAEAAIA0BAwP/AAMA2gAAAAAACAAAAAAAAAAAAAAAAAABAAMD6QGQAAAAAAPoAAAD6P/6A+kAAAPoAAAD6AH0A+gAAAPoAAAD6AAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAA2AAAABAAEAAEAAABhAP//AAAAYf//AABhAAEAAAAAAAEABgAHAAsADAAQABEAEgATAAEAAAEGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAcAAAAAAAAAABAAAAYQAAAGEAAAAAQAAwAAAAAAAAAEAAMAAAAAAAABQADAAAAAAACAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOABYALgBYAGgAgACgAA==',
      bold: '' // –î–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  };

  /**
   * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö
   */
  public static readonly CUSTOM_FONTS: Record<string, CustomFontInfo> = {
    'DejaVuSans': {
      name: 'DejaVuSans',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin', 'latin-ext', 'cyrillic', 'cyrillic-ext', 'greek', 'greek-ext'],
      loaded: false,
      description: 'DejaVu Sans - –æ—Ç–∫—Ä—ã—Ç—ã–π —à—Ä–∏—Ñ—Ç —Å —à–∏—Ä–æ–∫–æ–π Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    },
    'helvetica': {
      name: 'helvetica',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin'],
      loaded: true, // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
      description: 'Helvetica - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–∞)'
    },
    'times': {
      name: 'times',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin', 'cyrillic'],
      loaded: true, // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
      description: 'Times - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –±–∞–∑–æ–≤–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π'
    },
    'courier': {
      name: 'courier',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin'],
      loaded: true, // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
      description: 'Courier - –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç'
    }
  };

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –≤ jsPDF
   */
  public static async loadCustomFont(pdf: jsPDF, fontName: string, style: 'normal' | 'bold' = 'normal'): Promise<FontLoadResult> {
    const cacheKey = `${fontName}_${style}`;
    
    if (this.loadedFonts.get(cacheKey)) {
      return { success: true, fontName };
    }

    try {
      // –ï—Å–ª–∏ —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç jsPDF
      if (['helvetica', 'times', 'courier'].includes(fontName.toLowerCase())) {
        pdf.setFont(fontName, style);
        this.loadedFonts.set(cacheKey, true);
        return { success: true, fontName };
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º DejaVu Sans –∏–∑ base64
      if (fontName === 'DejaVuSans' && this.EMBEDDED_FONTS.DejaVuSans.normal) {
        // –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç –≤ jsPDF
        const fontData = this.EMBEDDED_FONTS.DejaVuSans.normal;
        
        // jsPDF —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –ø–æ–∫–∞
        console.log('‚ö†Ô∏è Custom font loading requires additional setup. Using fallback.');
        
        // Fallback –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—É —Å –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        pdf.setFont('times', style);
        this.loadedFonts.set(cacheKey, true);
        return { success: true, fontName: 'times' };
      }

      throw new Error(`Font ${fontName} not found`);
      
    } catch (error) {
      console.error(`‚ùå Failed to load font ${fontName}:`, error);
      return { 
        success: false, 
        fontName,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  public static detectLanguages(text: string): string[] {
    const languages: string[] = [];
    
    // –õ–∞—Ç–∏–Ω–∏—Ü–∞ –±–∞–∑–æ–≤–∞—è
    if (/[A-Za-z]/.test(text)) {
      languages.push('latin');
    }
    
    // –õ–∞—Ç–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–ª–∞—Ç—ã—à—Å–∫–∏–π, –ª–∏—Ç–æ–≤—Å–∫–∏–π, –ø–æ–ª—å—Å–∫–∏–π –∏ —Ç.–¥.)
    if (/[ƒÄƒÅƒåƒçƒíƒìƒ¢ƒ£ƒ™ƒ´ƒ∂ƒ∑ƒªƒº≈Ö≈Ü≈†≈°≈™≈´≈Ω≈æƒÑƒÖƒòƒôƒñƒóƒÆƒØ≈≤≈≥ƒÜƒá≈Å≈Ç≈É≈Ñ√ì√≥≈ö≈õ≈π≈∫≈ª≈º]/.test(text)) {
      languages.push('latin-ext');
    }
    
    // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    if (/[–ê-–Ø–∞-—è–Å—ë]/.test(text)) {
      languages.push('cyrillic');
    }
    
    // –ì—Ä–µ—á–µ—Å–∫–∏–π
    if (/[Œë-Œ©Œ±-œâ]/.test(text)) {
      languages.push('greek');
    }
    
    // –ê—Ä–∞–±—Å–∫–∏–π
    if (/[\u0600-\u06FF]/.test(text)) {
      languages.push('arabic');
    }
    
    // –ò–≤—Ä–∏—Ç
    if (/[\u0590-\u05FF]/.test(text)) {
      languages.push('hebrew');
    }
    
    // –ö–∏—Ç–∞–π—Å–∫–∏–π/–Ø–ø–æ–Ω—Å–∫–∏–π/–ö–æ—Ä–µ–π—Å–∫–∏–π
    if (/[\u4E00-\u9FFF\u3040-\u309F\u30A0-\u30FF\uAC00-\uD7AF]/.test(text)) {
      languages.push('cjk');
    }
    
    return languages.length > 0 ? languages : ['latin'];
  }

  /**
   * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
   */
  public static selectOptimalFont(languages: string[]): string {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    const fontScores: Record<string, number> = {
      'DejaVuSans': 0,
      'times': 0,
      'helvetica': 0,
      'courier': 0
    };

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–æ–≤ –∫–∞–∂–¥—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    for (const lang of languages) {
      for (const [fontName, fontInfo] of Object.entries(this.CUSTOM_FONTS)) {
        if (fontInfo.unicodeSupport.includes(lang)) {
          fontScores[fontName] += 1;
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å
    if (languages.includes('cyrillic') || languages.includes('greek')) {
      fontScores['times'] += 0.5; // Times –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
    }

    // –ù–∞—Ö–æ–¥–∏–º —à—Ä–∏—Ñ—Ç —Å –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    let bestFont = 'times'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é times –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
    let bestScore = 0;

    for (const [font, score] of Object.entries(fontScores)) {
      if (score > bestScore && this.CUSTOM_FONTS[font].loaded) {
        bestScore = score;
        bestFont = font;
      }
    }

    console.log(`üéØ Font selection: ${bestFont} (score: ${bestScore}) for languages: ${languages.join(', ')}`);
    return bestFont;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è PDF —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
   */
  public static async setupFontsForPDF(
    pdf: jsPDF, 
    texts: string[],
    preferredFont?: string
  ): Promise<string> {
    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const combinedText = texts.join(' ');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏
      const languages = this.detectLanguages(combinedText);
      console.log(`üîç Detected languages: ${languages.join(', ')}`);
      
      // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
      const selectedFont = preferredFont || this.selectOptimalFont(languages);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç
      const result = await this.loadCustomFont(pdf, selectedFont, 'normal');
      
      if (result.success) {
        console.log(`‚úÖ Font loaded successfully: ${result.fontName}`);
        return result.fontName;
      } else {
        // Fallback –∫ times
        console.log(`‚ö†Ô∏è Failed to load ${selectedFont}, using fallback`);
        pdf.setFont('times', 'normal');
        return 'times';
      }
      
    } catch (error) {
      console.error('‚ùå Font setup failed:', error);
      pdf.setFont('times', 'normal');
      return 'times';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏–º–≤–æ–ª–∞ —à—Ä–∏—Ñ—Ç–æ–º
   */
  public static canFontRenderCharacter(fontName: string, char: string): boolean {
    const fontInfo = this.CUSTOM_FONTS[fontName];
    if (!fontInfo) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —è–∑—ã–∫–æ–≤—ã–º –±–ª–æ–∫–∞–º
    const languages = this.detectLanguages(char);
    return languages.some(lang => fontInfo.unicodeSupport.includes(lang));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö
   */
  public static getAvailableFonts(): Array<{name: string, description: string, languages: string[]}> {
    return Object.entries(this.CUSTOM_FONTS)
      .filter(([_, info]) => info.loaded)
      .map(([name, info]) => ({
        name,
        description: info.description,
        languages: info.unicodeSupport
      }));
  }

  /**
   * –°–±—Ä–æ—Å –∫—ç—à–∞ —à—Ä–∏—Ñ—Ç–æ–≤
   */
  public static clearCache(): void {
    this.loadedFonts.clear();
    this.fontDataCache.clear();
    console.log('üßπ Font cache cleared');
  }
}
