/**
 * CyrillicFontService.ts - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */

import { jsPDF } from 'jspdf';
import { CyrillicFontEmbedded } from './CyrillicFontEmbedded';

export interface CyrillicSetupResult {
  success: boolean;
  selectedFont: string;
  method: string;
  preservesCyrillic: boolean;
}

export class CyrillicFontService {
  
  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ PDF
   */
  public static setupCyrillicSupport(pdf: jsPDF): CyrillicSetupResult {
    console.log('üî§ Setting up Cyrillic support...');

    // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
    try {
      const embeddedResult = CyrillicFontEmbedded.addEmbeddedCyrillicFont(pdf, 'DejaVu-Cyrillic');
      if (embeddedResult.success) {
        return {
          success: true,
          selectedFont: embeddedResult.fontName,
          method: 'Embedded TTF font with Cyrillic',
          preservesCyrillic: true
        };
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Embedded font failed:', error);
    }

    // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Times (–∏–º–µ–µ—Ç —á–∞—Å—Ç–∏—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
    try {
      pdf.setFont('times', 'normal');
      console.log('‚úÖ Using Times font for Cyrillic (partial support)');
      return {
        success: true,
        selectedFont: 'times',
        method: 'Built-in Times font (partial Cyrillic)',
        preservesCyrillic: false // –ß–∞—Å—Ç–∏—á–Ω–æ
      };
    } catch (error) {
      console.warn('‚ö†Ô∏è Times font failed:', error);
    }

    // –ú–µ—Ç–æ–¥ 3: –ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8 –≤ jsPDF
    try {
      this.enableAdvancedUnicodeSupport(pdf);
      pdf.setFont('helvetica', 'normal');
      console.log('‚úÖ Using Helvetica with enhanced Unicode support');
      return {
        success: true,
        selectedFont: 'helvetica',
        method: 'Enhanced Unicode support',
        preservesCyrillic: false // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
      };
    } catch (error) {
      console.warn('‚ö†Ô∏è Enhanced Unicode failed:', error);
    }

    // –ú–µ—Ç–æ–¥ 4: Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É Helvetica
    pdf.setFont('helvetica', 'normal');
    return {
      success: true,
      selectedFont: 'helvetica',
      method: 'Standard fallback (transliteration required)',
      preservesCyrillic: false
    };
  }

  /**
   * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Unicode –≤ jsPDF
   */
  private static enableAdvancedUnicodeSupport(pdf: jsPDF): void {
    const pdfInternal = (pdf as any).internal;
    
    if (pdfInternal) {
      // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É UTF-8
      pdfInternal.events.subscribe('putText', function () {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
      });

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      pdfInternal.unicode = {
        enabled: true,
        encoding: 'UTF-8'
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —à–∏—Ä–æ–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      pdfInternal.putText = function(text: string) {
        // –ö–∞—Å—Ç–æ–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        return text;
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ç–µ–∫—É—â–µ–º —à—Ä–∏—Ñ—Ç–µ
   */
  public static testCyrillicSupport(pdf: jsPDF): {
    supportsCyrillic: boolean;
    testText: string;
    recommendation: string;
  } {
    const testText = "–¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: –ê–ë–í–ì–î –∞–±–≤–≥–¥";
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
      pdf.text(testText, 10, 10);
      
      return {
        supportsCyrillic: true,
        testText: testText,
        recommendation: "Current font supports Cyrillic characters"
      };
    } catch (error) {
      return {
        supportsCyrillic: false,
        testText: "Test kirilicy: ABVGD abvgd",
        recommendation: "Use embedded fonts or transliteration"
      };
    }
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  public static processRussianText(text: string, preserveCyrillic: boolean = true): string {
    if (!text) return '';

    if (preserveCyrillic) {
      // –¢–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
      return text
        .replace(/[\u200B-\u200D\uFEFF]/g, '') // –ù–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/\s+/g, ' ')
        .trim();
    } else {
      // –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
      return this.transliterateRussian(text);
    }
  }

  /**
   * –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  private static transliterateRussian(text: string): string {
    const russianMap = new Map<string, string>([
      // –°—Ç—Ä–æ—á–Ω—ã–µ
      ['–∞', 'a'], ['–±', 'b'], ['–≤', 'v'], ['–≥', 'g'], ['–¥', 'd'],
      ['–µ', 'e'], ['—ë', 'yo'], ['–∂', 'zh'], ['–∑', 'z'], ['–∏', 'i'],
      ['–π', 'y'], ['–∫', 'k'], ['–ª', 'l'], ['–º', 'm'], ['–Ω', 'n'],
      ['–æ', 'o'], ['–ø', 'p'], ['—Ä', 'r'], ['—Å', 's'], ['—Ç', 't'],
      ['—É', 'u'], ['—Ñ', 'f'], ['—Ö', 'kh'], ['—Ü', 'ts'], ['—á', 'ch'],
      ['—à', 'sh'], ['—â', 'sch'], ['—ä', ''], ['—ã', 'y'], ['—å', ''],
      ['—ç', 'e'], ['—é', 'yu'], ['—è', 'ya'],
      
      // –ó–∞–≥–ª–∞–≤–Ω—ã–µ
      ['–ê', 'A'], ['–ë', 'B'], ['–í', 'V'], ['–ì', 'G'], ['–î', 'D'],
      ['–ï', 'E'], ['–Å', 'Yo'], ['–ñ', 'Zh'], ['–ó', 'Z'], ['–ò', 'I'],
      ['–ô', 'Y'], ['–ö', 'K'], ['–õ', 'L'], ['–ú', 'M'], ['–ù', 'N'],
      ['–û', 'O'], ['–ü', 'P'], ['–†', 'R'], ['–°', 'S'], ['–¢', 'T'],
      ['–£', 'U'], ['–§', 'F'], ['–•', 'Kh'], ['–¶', 'Ts'], ['–ß', 'Ch'],
      ['–®', 'Sh'], ['–©', 'Sch'], ['–™', ''], ['–´', 'Y'], ['–¨', ''],
      ['–≠', 'E'], ['–Æ', 'Yu'], ['–Ø', 'Ya']
    ]);

    let result = text;
    for (const [cyrillic, latin] of russianMap) {
      result = result.replace(new RegExp(cyrillic, 'g'), latin);
    }

    return result
      .replace(/\s+/g, ' ')
      .trim();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ
   */
  public static getCyrillicPercentage(text: string): number {
    if (!text) return 0;

    const cyrillicMatches = text.match(/[–∞-—è—ë]/gi);
    const totalLetters = text.match(/[a-zA-Z–∞-—è—ë]/gi);
    
    if (!cyrillicMatches || !totalLetters) {
      return 0;
    }
    
    return (cyrillicMatches.length / totalLetters.length) * 100;
  }

  /**
   * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
   */
  public static getCyrillicRecommendations(text: string): {
    percentage: number;
    recommendation: string;
    suggestedMethod: string;
  } {
    const percentage = this.getCyrillicPercentage(text);
    
    if (percentage > 50) {
      return {
        percentage,
        recommendation: "Document is primarily in Cyrillic. Use embedded fonts for best quality.",
        suggestedMethod: "embedded-font"
      };
    } else if (percentage > 20) {
      return {
        percentage,
        recommendation: "Mixed content. Consider embedded fonts or quality transliteration.",
        suggestedMethod: "mixed-approach"
      };
    } else if (percentage > 0) {
      return {
        percentage,
        recommendation: "Minimal Cyrillic content. Transliteration is acceptable.",
        suggestedMethod: "transliteration"
      };
    } else {
      return {
        percentage,
        recommendation: "No Cyrillic content detected. Use standard fonts.",
        suggestedMethod: "standard"
      };
    }
  }
}
