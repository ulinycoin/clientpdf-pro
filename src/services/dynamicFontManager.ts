import { PDFDocument, StandardFonts } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';

export interface CyrillicFontInfo {
  name: string;
  displayName: string;
  supportsCyrillic: boolean;
  isStandard: boolean;
  url?: string;
  fallbackUrl?: string;
  googleFontsUrl?: string;
  isEmbedded?: boolean;
  priority: number; // 1 = highest priority for Cyrillic
  fileSize?: number; // KB
}

export interface FontLoadResult {
  font: any;
  fontName: string;
  supportsCyrillic: boolean;
  source: 'standard' | 'external' | 'embedded' | 'google-fonts' | 'browser-fallback';
  actualFontFamily?: string;
}

export interface CyrillicFontLoadOptions {
  preferredFontFamily?: string;
  allowFallback: boolean;
  requireCyrillic: boolean;
  documentType: 'mixed' | 'cyrillic-only' | 'latin-only';
  userAgent?: string;
}

/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
 * 
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Web Fonts –∏–∑ CDN –∏ Google Fonts
 * - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π fallback –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ –û–°
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
 * - –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞)
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode –Ω–∞ —É—Ä–æ–≤–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞
 */
export class DynamicFontManager {
  private static instance: DynamicFontManager;
  private fontCache = new Map<string, any>();
  private fontTestCache = new Map<string, boolean>();
  private webFontLoadPromises = new Map<string, Promise<FontFace>>();
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞
  private readonly FONT_LOAD_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥
  
  static getInstance(): DynamicFontManager {
    if (!this.instance) {
      this.instance = new DynamicFontManager();
    }
    return this.instance;
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
   * –í–∫–ª—é—á–∞–µ—Ç CDN –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ Google Fonts
   */
  private readonly cyrillicFonts: { [key: string]: CyrillicFontInfo } = {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ PDF —à—Ä–∏—Ñ—Ç—ã (–±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
    'Helvetica': {
      name: 'Helvetica',
      displayName: 'Helvetica',
      supportsCyrillic: false,
      isStandard: true,
      priority: 10
    },
    'Times-Roman': {
      name: 'Times-Roman',
      displayName: 'Times New Roman',
      supportsCyrillic: false,
      isStandard: true,
      priority: 10
    },
    'Courier': {
      name: 'Courier',
      displayName: 'Courier',
      supportsCyrillic: false,
      isStandard: true,
      priority: 10
    },

    // –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    'DejaVu-Sans': {
      name: 'DejaVu-Sans',
      displayName: 'DejaVu Sans',
      supportsCyrillic: true,
      isStandard: false,
      priority: 1,
      url: 'https://cdn.jsdelivr.net/npm/dejavu-fonts-ttf@2.37.3/ttf/DejaVuSans.ttf',
      fallbackUrl: 'https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf',
      fileSize: 757 // KB
    },

    'PT-Sans': {
      name: 'PT-Sans',
      displayName: 'PT Sans',
      supportsCyrillic: true,
      isStandard: false,
      priority: 2,
      googleFontsUrl: 'https://fonts.googleapis.com/css2?family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap',
      url: 'https://fonts.gstatic.com/s/ptsans/v17/jizaRExUiTo99u79D0KEwA.woff2',
      fileSize: 45 // KB
    },

    'Noto-Sans': {
      name: 'Noto-Sans',
      displayName: 'Noto Sans',
      supportsCyrillic: true,
      isStandard: false,
      priority: 3,
      googleFontsUrl: 'https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400;700&display=swap',
      url: 'https://fonts.gstatic.com/s/notosans/v36/o-0mIpQlx3QUlC5A4PNB6Ryti20_6n1iPHjcz6L1SoM-jCpoiyD9A-9a6Vs.woff2',
      fileSize: 120 // KB
    },

    'Roboto': {
      name: 'Roboto',
      displayName: 'Roboto',
      supportsCyrillic: true,
      isStandard: false,
      priority: 4,
      googleFontsUrl: 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap',
      url: 'https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2',
      fileSize: 85 // KB
    },

    'Source-Sans-Pro': {
      name: 'Source-Sans-Pro',
      displayName: 'Source Sans Pro',
      supportsCyrillic: true,
      isStandard: false,
      priority: 5,
      googleFontsUrl: 'https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;700&display=swap',
      url: 'https://fonts.gstatic.com/s/sourcesanspro/v22/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7lujVj9w.woff2',
      fileSize: 78 // KB
    },

    // –≠–º–±–µ–¥–¥–µ–¥ —à—Ä–∏—Ñ—Ç –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
    'Embedded-Cyrillic': {
      name: 'Embedded-Cyrillic',
      displayName: 'Embedded Cyrillic',
      supportsCyrillic: true,
      isStandard: false,
      isEmbedded: true,
      priority: 9
    }
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async checkBrowserCyrillicSupport(): Promise<{
    hasSystemCyrillicFonts: boolean;
    detectedFonts: string[];
    recommendedStrategy: 'system' | 'web-fonts' | 'embedded';
  }> {
    const testText = '–¢–µ—Å—Ç –ö–∏—Ä–∏–ª–ª–∏—Ü—ã'; // –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
    const testFonts = [
      'Arial', 'Helvetica', 'Times New Roman', 'Georgia', 
      'PT Sans', 'Roboto', 'DejaVu Sans', 'Liberation Sans'
    ];

    const detectedFonts: string[] = [];
    
    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      return {
        hasSystemCyrillicFonts: false,
        detectedFonts: [],
        recommendedStrategy: 'web-fonts'
      };
    }

    canvas.width = 300;
    canvas.height = 100;

    // –ë–∞–∑–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å fallback —à—Ä–∏—Ñ—Ç–æ–º
    ctx.font = '20px monospace';
    const baselineWidth = ctx.measureText(testText).width;

    for (const fontName of testFonts) {
      ctx.font = `20px "${fontName}", monospace`;
      const testWidth = ctx.measureText(testText).width;
      
      // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç —à—Ä–∏—Ñ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É
      if (Math.abs(testWidth - baselineWidth) > 2) {
        detectedFonts.push(fontName);
      }
    }

    const hasSystemCyrillicFonts = detectedFonts.length > 0;
    const recommendedStrategy = hasSystemCyrillicFonts ? 'system' : 
                               (detectedFonts.length >= 2) ? 'web-fonts' : 'embedded';

    console.log(`üîç Browser Cyrillic Support Analysis:`, {
      hasSystemCyrillicFonts,
      detectedFonts,
      recommendedStrategy,
      testText,
      baselineWidth
    });

    return { hasSystemCyrillicFonts, detectedFonts, recommendedStrategy };
  }

  /**
   * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Web Font —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
   */
  private async loadWebFont(fontInfo: CyrillicFontInfo): Promise<FontFace> {
    const cacheKey = fontInfo.name;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—â–∏–π—Å—è –ø—Ä–æ–º–∏—Å
    if (this.webFontLoadPromises.has(cacheKey)) {
      return await this.webFontLoadPromises.get(cacheKey)!;
    }

    const loadPromise = this.performWebFontLoad(fontInfo);
    this.webFontLoadPromises.set(cacheKey, loadPromise);
    
    try {
      const fontFace = await loadPromise;
      console.log(`‚úÖ Web Font loaded: ${fontInfo.displayName}`);
      return fontFace;
    } catch (error) {
      this.webFontLoadPromises.delete(cacheKey);
      throw error;
    }
  }

  private async performWebFontLoad(fontInfo: CyrillicFontInfo): Promise<FontFace> {
    const urls = [
      fontInfo.url,
      fontInfo.fallbackUrl,
    ].filter(Boolean) as string[];

    let lastError: Error | null = null;

    for (const url of urls) {
      try {
        console.log(`üì• Loading Web Font: ${fontInfo.displayName} from ${url}`);

        // –°–æ–∑–¥–∞–µ–º FontFace —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        const fontFace = new FontFace(fontInfo.displayName, `url(${url})`, {
          style: 'normal',
          weight: 'normal',
          unicodeRange: 'U+0000-04FF', // –í–∫–ª—é—á–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É U+0400-04FF
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const loadedFont = await Promise.race([
          fontFace.load(),
          new Promise<never>((_, reject) => 
            setTimeout(() => reject(new Error('Font load timeout')), this.FONT_LOAD_TIMEOUT)
          )
        ]);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—ã —à—Ä–∏—Ñ—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
        document.fonts.add(loadedFont);
        
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        await document.fonts.ready;

        return loadedFont;

      } catch (error) {
        lastError = error as Error;
        console.warn(`‚ö†Ô∏è Failed to load ${fontInfo.displayName} from ${url}:`, error);
      }
    }

    throw new Error(`Failed to load ${fontInfo.displayName}: ${lastError?.message}`);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ Google Fonts —á–µ—Ä–µ–∑ CSS API
   */
  private async loadGoogleFont(fontInfo: CyrillicFontInfo): Promise<void> {
    if (!fontInfo.googleFontsUrl) {
      throw new Error('No Google Fonts URL provided');
    }

    return new Promise((resolve, reject) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —à—Ä–∏—Ñ—Ç
      const existingLink = document.querySelector(`link[href="${fontInfo.googleFontsUrl}"]`);
      if (existingLink) {
        resolve();
        return;
      }

      // –°–æ–∑–¥–∞–µ–º link —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Google Font
      const link = document.createElement('link');
      link.href = fontInfo.googleFontsUrl;
      link.rel = 'stylesheet';
      link.type = 'text/css';

      link.onload = () => {
        console.log(`‚úÖ Google Font loaded: ${fontInfo.displayName}`);
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π —à—Ä–∏—Ñ—Ç
        setTimeout(() => resolve(), 500);
      };

      link.onerror = () => {
        reject(new Error(`Failed to load Google Font: ${fontInfo.displayName}`));
      };

      document.head.appendChild(link);

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Google Fonts
      setTimeout(() => {
        reject(new Error(`Google Font load timeout: ${fontInfo.displayName}`));
      }, this.FONT_LOAD_TIMEOUT);
    });
  }

  /**
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
   */
  async selectBestFont(
    text: string,
    options: CyrillicFontLoadOptions
  ): Promise<CyrillicFontInfo> {
    const needsCyrillic = this.containsCyrillic(text);
    const browserSupport = await this.checkBrowserCyrillicSupport();

    console.log(`üéØ Font Selection for document type: ${options.documentType}`, {
      needsCyrillic,
      requireCyrillic: options.requireCyrillic,
      preferredFamily: options.preferredFontFamily,
      browserStrategy: browserSupport.recommendedStrategy
    });

    // –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if (options.preferredFontFamily && this.cyrillicFonts[options.preferredFontFamily]) {
      const preferred = this.cyrillicFonts[options.preferredFontFamily];
      if (!needsCyrillic || preferred.supportsCyrillic) {
        console.log(`üéØ Using preferred font: ${preferred.displayName}`);
        return preferred;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const candidates = Object.values(this.cyrillicFonts)
      .filter(font => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        if (options.requireCyrillic && !font.supportsCyrillic) {
          return false;
        }
        
        // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        if (options.documentType === 'mixed' && !font.supportsCyrillic) {
          return false;
        }

        return true;
      })
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        if (needsCyrillic) {
          return a.priority - b.priority;
        }
        
        // –î–ª—è –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        if (a.isStandard && !b.isStandard) return -1;
        if (!a.isStandard && b.isStandard) return 1;
        
        return a.priority - b.priority;
      });

    if (candidates.length === 0) {
      console.warn('‚ö†Ô∏è No suitable fonts found, using Helvetica fallback');
      return this.cyrillicFonts['Helvetica'];
    }

    const selected = candidates[0];
    console.log(`‚úÖ Selected font: ${selected.displayName} (priority: ${selected.priority})`);
    
    return selected;
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  async loadFont(
    pdfDoc: PDFDocument,
    text: string,
    options: CyrillicFontLoadOptions = {
      allowFallback: true,
      requireCyrillic: false,
      documentType: 'mixed'
    }
  ): Promise<FontLoadResult> {
    
    console.log(`üîÑ DynamicFontManager - Loading font for text analysis...`);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fontkit –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
    pdfDoc.registerFontkit(fontkit);

    try {
      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —à—Ä–∏—Ñ—Ç
      const selectedFont = await this.selectBestFont(text, options);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = `${selectedFont.name}-${Date.now()}`;
      if (this.fontCache.has(cacheKey)) {
        const cached = this.fontCache.get(cacheKey);
        console.log(`‚úÖ Using cached font: ${selectedFont.displayName}`);
        return {
          font: cached,
          fontName: selectedFont.displayName,
          supportsCyrillic: selectedFont.supportsCyrillic,
          source: 'cache'
        } as FontLoadResult;
      }

      let font: any;
      let source: FontLoadResult['source'] = 'standard';

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ PDF —à—Ä–∏—Ñ—Ç—ã
      if (selectedFont.isStandard) {
        font = await this.loadStandardFont(pdfDoc, selectedFont.name);
        source = 'standard';
        
      } 
      // Embedded —à—Ä–∏—Ñ—Ç
      else if (selectedFont.isEmbedded) {
        font = await this.loadEmbeddedFont(pdfDoc);
        source = 'embedded';
        
      } 
      // Web Fonts (Google Fonts –∏–ª–∏ CDN)
      else {
        try {
          // –ü—Ä–æ–±—É–µ–º Google Fonts –ø–µ—Ä–≤—ã–º (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
          if (selectedFont.googleFontsUrl) {
            await this.loadGoogleFont(selectedFont);
            
            // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Google Font, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if (await this.testFontAvailability(selectedFont.displayName, text)) {
              font = await this.loadBrowserFont(pdfDoc, selectedFont.displayName);
              source = 'google-fonts';
            } else {
              throw new Error('Google Font not available after loading');
            }
          } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ FontFace API
            await this.loadWebFont(selectedFont);
            font = await this.loadBrowserFont(pdfDoc, selectedFont.displayName);
            source = 'external';
          }
        } catch (webFontError) {
          console.warn(`‚ö†Ô∏è Web font loading failed: ${webFontError.message}`);
          
          // Fallback –∫ embedded —à—Ä–∏—Ñ—Ç—É
          if (options.allowFallback) {
            try {
              font = await this.loadEmbeddedFont(pdfDoc);
              source = 'embedded';
              console.log(`‚úÖ Using embedded font fallback`);
            } catch (embeddedError) {
              console.warn(`‚ö†Ô∏è Embedded fallback failed: ${embeddedError.message}`);
              font = await pdfDoc.embedFont(StandardFonts.Helvetica);
              source = 'browser-fallback';
            }
          } else {
            throw webFontError;
          }
        }
      }

      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.fontCache.set(cacheKey, font);

      const result: FontLoadResult = {
        font,
        fontName: selectedFont.displayName,
        supportsCyrillic: selectedFont.supportsCyrillic,
        source
      };

      console.log(`‚úÖ Font loaded successfully:`, {
        fontName: result.fontName,
        supportsCyrillic: result.supportsCyrillic,
        source: result.source
      });

      return result;

    } catch (error) {
      console.error(`‚ùå Font loading failed:`, error);
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –∫ Helvetica
      const fallbackFont = await pdfDoc.embedFont(StandardFonts.Helvetica);
      return {
        font: fallbackFont,
        fontName: 'Helvetica',
        supportsCyrillic: false,
        source: 'browser-fallback'
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ PDF —à—Ä–∏—Ñ—Ç–∞
   */
  private async loadStandardFont(pdfDoc: PDFDocument, fontName: string): Promise<any> {
    switch (fontName) {
      case 'Times-Roman':
        return await pdfDoc.embedFont(StandardFonts.TimesRoman);
      case 'Courier':
        return await pdfDoc.embedFont(StandardFonts.Courier);
      case 'Helvetica':
      default:
        return await pdfDoc.embedFont(StandardFonts.Helvetica);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –±—Ä–∞—É–∑–µ—Ä–∞
   */
  private async loadBrowserFont(pdfDoc: PDFDocument, fontFamily: string): Promise<any> {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    // –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ pdf-lib –Ω–µ—Ç –ø—Ä—è–º–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∫ embedded —à—Ä–∏—Ñ—Ç—É
    return await this.loadEmbeddedFont(pdfDoc);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ embedded –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
   */
  private async loadEmbeddedFont(pdfDoc: PDFDocument): Promise<any> {
    try {
      // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π CDN
      const response = await fetch('https://cdn.jsdelivr.net/npm/dejavu-fonts-ttf@2.37.3/ttf/DejaVuSans.ttf', {
        mode: 'cors',
        cache: 'force-cache'
      });
      
      if (!response.ok) {
        throw new Error(`DejaVu fetch failed: ${response.status}`);
      }
      
      const fontBytes = await response.arrayBuffer();
      return await pdfDoc.embedFont(fontBytes);
      
    } catch (error) {
      console.error('‚ùå Embedded font loading failed:', error);
      throw new Error('Unable to load Cyrillic font');
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —à—Ä–∏—Ñ—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  private async testFontAvailability(fontFamily: string, testText: string): Promise<boolean> {
    const cacheKey = `${fontFamily}-${testText.substring(0, 20)}`;
    
    if (this.fontTestCache.has(cacheKey)) {
      return this.fontTestCache.get(cacheKey)!;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Canvas –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) return false;

      canvas.width = 200;
      canvas.height = 50;

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å fallback —à—Ä–∏—Ñ—Ç–æ–º
      ctx.font = '16px monospace';
      const fallbackWidth = ctx.measureText(testText).width;

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ü–µ–ª–µ–≤—ã–º —à—Ä–∏—Ñ—Ç–æ–º
      ctx.font = `16px "${fontFamily}", monospace`;
      const targetWidth = ctx.measureText(testText).width;

      const isAvailable = Math.abs(targetWidth - fallbackWidth) > 1;
      
      this.fontTestCache.set(cacheKey, isAvailable);
      return isAvailable;
      
    } catch (error) {
      console.warn(`Font availability test failed for ${fontFamily}:`, error);
      this.fontTestCache.set(cacheKey, false);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ
   */
  containsCyrillic(text: string): boolean {
    return /[\u0400-\u04FF]/.test(text);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –ª–∞—Ç–∏–Ω–∏—Ü–∞)
   */
  isMixedScript(text: string): boolean {
    const hasCyrillic = /[\u0400-\u04FF]/.test(text);
    const hasLatin = /[A-Za-z]/.test(text);
    return hasCyrillic && hasLatin;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
   */
  getAvailableFonts(): CyrillicFontInfo[] {
    return Object.values(this.cyrillicFonts);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
   */
  getFontRecommendations(text: string): CyrillicFontInfo[] {
    const needsCyrillic = this.containsCyrillic(text);
    const isMixed = this.isMixedScript(text);

    return Object.values(this.cyrillicFonts)
      .filter(font => {
        if (needsCyrillic && !font.supportsCyrillic) {
          return false;
        }
        return true;
      })
      .sort((a, b) => {
        // –î–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —à—Ä–∏—Ñ—Ç–∞–º
        if (isMixed) {
          if (a.supportsCyrillic && !b.supportsCyrillic) return -1;
          if (!a.supportsCyrillic && b.supportsCyrillic) return 1;
        }
        
        return a.priority - b.priority;
      });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
   */
  clearCache(): void {
    this.fontCache.clear();
    this.fontTestCache.clear();
    this.webFontLoadPromises.clear();
    console.log('üßπ DynamicFontManager - Cache cleared');
  }
}