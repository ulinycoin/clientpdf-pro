  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PDF —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º - –û–ë–ù–û–í–õ–ï–ù–û –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
   */
  public static async setupPDFFont(pdf: jsPDF, sampleTexts: string[]): Promise<FontSetupResult> {
    this.initialize();

    const result: FontSetupResult = {
      success: false,
      selectedFont: 'helvetica',
      warnings: [],
      appliedTransliterations: 0
    };

    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
      const combinedText = sampleTexts.join(' ');
      const analysis = this.analyzeText(combinedText);

      console.log('üîç Text analysis:', {
        languages: analysis.detectedLanguages,
        problemChars: analysis.problemChars.length,
        recommendedFont: analysis.recommendedFont,
        needsTransliteration: analysis.needsTransliteration,
        hasCyrillic: analysis.hasCyrillic
      });

      // üÜï –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const needsCyrillic = analysis.hasCyrillic && this.shouldPreserveCyrillic(combinedText);

      if (needsCyrillic) {
        console.log('üî§ Attempting to preserve Cyrillic characters...');
        
        // –ü–æ–ø—ã—Ç–∫–∞ 1: –í–Ω–µ—à–Ω–∏–π —à—Ä–∏—Ñ—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        try {
          const { ExternalFontLoader } = await import('./ExternalFontLoader');
          const fontResult = await ExternalFontLoader.setupPDFWithCyrillicFont(pdf, 'Roboto');
          
          if (fontResult.success) {
            result.success = true;
            result.selectedFont = fontResult.fontName;
            result.warnings.push('Using external Cyrillic font: ' + fontResult.fontName);
            console.log(`‚úÖ External Cyrillic font loaded: ${fontResult.fontName}`);
            return result;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è External font loading failed:', error);
        }

        // –ü–æ–ø—ã—Ç–∫–∞ 2: –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        try {
          const { CyrillicFontService } = await import('./CyrillicFontService');
          const cyrillicResult = CyrillicFontService.setupCyrillicSupport(pdf);
          
          if (cyrillicResult.success) {
            result.success = true;
            result.selectedFont = cyrillicResult.selectedFont;
            result.warnings.push('Using built-in Cyrillic support');
            console.log(`‚úÖ Built-in Cyrillic support enabled`);
            return result;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Built-in Cyrillic support failed:', error);
        }

        // –ï—Å–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result.warnings.push('Cyrillic characters will be transliterated due to font limitations');
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
      const targetFont = analysis.recommendedFont;
      
      try {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è jsPDF
        this.enableUnicodeSupport(pdf);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
        pdf.setFont(targetFont, 'normal');
        this.loadedFonts.add(targetFont);
        
        result.success = true;
        result.selectedFont = targetFont;
        
        console.log(`‚úÖ Font set successfully: ${targetFont}`);

      } catch (fontError) {
        console.warn(`‚ö†Ô∏è Failed to set ${targetFont}, falling back...`);
        result.warnings.push(`Font ${targetFont} failed, using fallback`);
        
        // Fallback –∫ helvetica
        pdf.setFont('helvetica', 'normal');
        result.selectedFont = 'helvetica';
        result.success = true;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      if (analysis.needsTransliteration && !needsCyrillic) {
        result.warnings.push(`${analysis.problemChars.length} characters will be transliterated`);
        result.appliedTransliterations = analysis.problemChars.length;
      }

      if (analysis.detectedLanguages.length > 1) {
        result.warnings.push(`Multiple languages detected: ${analysis.detectedLanguages.join(', ')}`);
      }

    } catch (error) {
      console.error('‚ùå Font setup failed:', error);
      result.warnings.push(`Setup failed: ${error}`);
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
      try {
        pdf.setFont('helvetica', 'normal');
        result.selectedFont = 'helvetica';
        result.success = true;
      } catch {
        result.success = false;
        result.warnings.push('All fonts failed');
      }
    }

    return result;
  }

  /**
   * üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É
   */
  private static shouldPreserveCyrillic(text: string): boolean {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const cyrillicMatches = text.match(/[–∞-—è—ë]/gi);
    const totalLetters = text.match(/[a-zA-Z–∞-—è—ë]/gi);
    
    if (!cyrillicMatches || !totalLetters) {
      return false;
    }
    
    const cyrillicPercentage = cyrillicMatches.length / totalLetters.length;
    
    // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 20% —Ç–µ–∫—Å—Ç–∞ - –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    return cyrillicPercentage > 0.2;
  }

  /**
   * üÜï –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥: –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
   */
  public static smartCleanText(text: string, preserveCyrillic: boolean = false): string {
    if (!text) return '';

    let cleaned = String(text);
    let replacementCount = 0;

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é
    const replacements = preserveCyrillic ? 
      this.getNonCyrillicReplacements() : 
      this.UNICODE_REPLACEMENTS;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for (const [unicode, replacement] of replacements) {
      if (cleaned.includes(unicode)) {
        cleaned = cleaned.replace(new RegExp(unicode, 'g'), replacement);
        replacementCount++;
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    cleaned = cleaned
      // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/[\u200B-\u200D\uFEFF]/g, '')
      // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
      .replace(/\?\?+/g, '?')
      // –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Å–ª–æ–≤
      .replace(/\b\?+/g, '')
      .replace(/\?+\b/g, '')
      // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ "?alpha?epsilon"
      .replace(/\?[a-z]+\?/g, '')
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      .trim();

    // –ï—Å–ª–∏ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (!preserveCyrillic) {
      cleaned = cleaned.replace(/[^\x20-\x7E\u00A0-\u00FF]/g, '');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleaned = cleaned.replace(/\s+/g, ' ').trim();

    return cleaned;
  }

  /**
   * üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ–Ω—ã –±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
   */
  private static getNonCyrillicReplacements(): Map<string, string> {
    const nonCyrillicReplacements = new Map<string, string>();
    
    for (const [key, value] of this.UNICODE_REPLACEMENTS) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
      if (!/[–∞-—è—ë]/i.test(key)) {
        nonCyrillicReplacements.set(key, value);
      }
    }
    
    return nonCyrillicReplacements;
  }