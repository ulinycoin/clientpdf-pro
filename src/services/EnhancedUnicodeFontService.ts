/**
 * EnhancedUnicodeFontService.ts
 * üõ°Ô∏è –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ñ–ª–∞–≥ useSystemFonts –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞—Ç—ã—à—Å–∫–∏—Ö, —Ä—É—Å—Å–∫–∏—Ö –∏ –¥—Ä—É–≥–∏—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤ –≤ PDF
 */

import { jsPDF } from 'jspdf';

export interface FontMetrics {
  name: string;
  unicodeSupport: boolean;
  supportedLanguages: string[];
  fallbackRequired: boolean;
  quality: 'excellent' | 'good' | 'basic' | 'poor';
}

export interface TextAnalysis {
  hasLatinExtended: boolean;
  hasCyrillic: boolean;
  hasSpecialChars: boolean;
  detectedLanguages: string[];
  problemChars: string[];
  recommendedFont: string;
  needsTransliteration: boolean;
}

export interface FontSetupResult {
  success: boolean;
  selectedFont: string;
  warnings: string[];
  appliedTransliterations: number;
  preservesCyrillic?: boolean;
}

// üÜï –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ñ–ª–∞–≥–æ–º useSystemFonts
export interface FontSetupOptions {
  useSystemFonts?: boolean;
  fontFamily?: string;
  preserveCyrillic?: boolean;
}

export class EnhancedUnicodeFontService {
  private static loadedFonts = new Set<string>();
  private static fontMetrics = new Map<string, FontMetrics>();
  private static isInitialized = false;

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –∑–∞–º–µ–Ω –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤
   */
  private static readonly UNICODE_REPLACEMENTS = new Map<string, string>([
    // –õ–∞—Ç—ã—à—Å–∫–∏–µ –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏
    ['ƒÅ', 'a'], ['ƒÄ', 'A'],
    ['ƒç', 'c'], ['ƒå', 'C'],
    ['ƒì', 'e'], ['ƒí', 'E'],
    ['ƒ£', 'g'], ['ƒ¢', 'G'],
    ['ƒ´', 'i'], ['ƒ™', 'I'],
    ['ƒ∑', 'k'], ['ƒ∂', 'K'],
    ['ƒº', 'l'], ['ƒª', 'L'],
    ['≈Ü', 'n'], ['≈Ö', 'N'],
    ['≈°', 's'], ['≈†', 'S'],
    ['≈´', 'u'], ['≈™', 'U'],
    ['≈æ', 'z'], ['≈Ω', 'Z'],
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
    ['\\u201C', '\"'], ['\\u201D', '\"'], // –£–º–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    ['\\u2018', \"'\"], ['\\u2019', \"'\"], // –£–º–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
    ['\\u2013', '-'], ['\\u2014', '-'], // –¢–∏—Ä–µ
    ['\\u2026', '...'], // –ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    ['\\u2116', 'No.'], // –ù–æ–º–µ—Ä
    ['\\u00B0', 'deg'], // –ì—Ä–∞–¥—É—Å
    
    // –°–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
    ['\\u20AC', 'EUR'], ['\\u00A3', 'GBP'], ['\\u00A5', 'JPY'],
    ['\\u20BD', 'RUB'], ['\\u20B4', 'UAH'],
    
    // –≠–º–æ–¥–∑–∏ (—É–¥–∞–ª—è–µ–º)
    ['\\u{1F600}', ''], ['\\u{1F601}', ''], ['\\u{1F602}', ''],
    ['\\u{1F603}', ''], ['\\u{1F604}', ''], ['\\u{1F605}', '']
  ]);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  public static initialize(): void {
    if (this.isInitialized) return;

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
    this.fontMetrics.set('Arial', {
      name: 'Arial',
      unicodeSupport: true,
      supportedLanguages: ['en', 'ru', 'lv', 'lt', 'pl', 'de', 'fr'],
      fallbackRequired: false,
      quality: 'excellent'
    });

    this.fontMetrics.set('helvetica', {
      name: 'helvetica',
      unicodeSupport: false,
      supportedLanguages: ['en', 'basic-latin'],
      fallbackRequired: true,
      quality: 'good'
    });

    this.fontMetrics.set('times', {
      name: 'times',
      unicodeSupport: true,
      supportedLanguages: ['en', 'ru', 'lv', 'lt', 'pl', 'de', 'fr'],
      fallbackRequired: false,
      quality: 'good'
    });

    this.isInitialized = true;
    console.log('‚úÖ Enhanced Unicode Font Service initialized');
  }

  /**
   * üõ°Ô∏è –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–ª–∞–≥–∞ useSystemFonts
   */
  public static async setupPDFFont(
    pdf: jsPDF, 
    sampleTexts: string[], 
    options: FontSetupOptions = {}
  ): Promise<FontSetupResult> {
    this.initialize();

    const result: FontSetupResult = {
      success: false,
      selectedFont: 'Arial',
      warnings: [],
      appliedTransliterations: 0,
      preservesCyrillic: false
    };

    try {
      // üõ°Ô∏è –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ useSystemFonts
      if (options.useSystemFonts) {
        console.log('üõ°Ô∏è Using system fonts (reliable mode)');
        
        // –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç –∏–∑ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
        const systemFont = options.fontFamily || 'Arial';
        
        try {
          // –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
          pdf.setFont(systemFont, 'normal');
          
          result.success = true;
          result.selectedFont = systemFont;
          result.preservesCyrillic = false; // –°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É
          result.warnings.push(`‚úÖ Using reliable system font: ${systemFont}`);
          
          console.log(`‚úÖ System font set successfully: ${systemFont}`);
          return result;
          
        } catch (fontError) {
          console.warn(`‚ö†Ô∏è System font ${systemFont} failed, trying Arial...`);
          
          // Fallback –∫ Arial
          try {
            pdf.setFont('Arial', 'normal');
            result.success = true;
            result.selectedFont = 'Arial';
            result.warnings.push('Fallback to Arial font');
            console.log('‚úÖ Fallback Arial font set successfully');
            return result;
          } catch (arialError) {
            // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –∫ helvetica
            pdf.setFont('helvetica', 'normal');
            result.success = true;
            result.selectedFont = 'helvetica';
            result.warnings.push('Fallback to Helvetica font');
            console.log('‚úÖ Final fallback Helvetica font set');
            return result;
          }
        }
      }

      // üîÑ –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –°–ª–æ–∂–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (–µ—Å–ª–∏ useSystemFonts = false)
      console.log('üî§ Using complex embedded fonts (compatibility mode)');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
      const combinedText = sampleTexts.join(' ');
      const analysis = this.analyzeText(combinedText);

      console.log('üîç Text analysis:', {
        languages: analysis.detectedLanguages,
        problemChars: analysis.problemChars.length,
        recommendedFont: analysis.recommendedFont,
        needsTransliteration: analysis.needsTransliteration,
        hasCyrillic: analysis.hasCyrillic
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const needsCyrillic = analysis.hasCyrillic && this.shouldPreserveCyrillic(combinedText);

      if (needsCyrillic) {
        console.log('üî§ Attempting to preserve Cyrillic characters...');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç—Ä–æ–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç
        try {
          const { CyrillicFontEmbedded } = await import('./CyrillicFontEmbedded');
          const embeddedResult = CyrillicFontEmbedded.addEmbeddedCyrillicFont(pdf, 'DejaVu-Cyrillic');
          
          if (embeddedResult.success) {
            result.success = true;
            result.selectedFont = embeddedResult.fontName;
            result.preservesCyrillic = true;
            result.warnings.push('Using embedded Cyrillic font: ' + embeddedResult.fontName);
            console.log(`‚úÖ Embedded Cyrillic font loaded: ${embeddedResult.fontName}`);
            return result;
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Embedded font loading failed:', error);
          result.warnings.push('Embedded fonts failed - using system fonts instead');
          
          // Fallback –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —à—Ä–∏—Ñ—Ç–∞–º
          pdf.setFont('Arial', 'normal');
          result.success = true;
          result.selectedFont = 'Arial';
          result.preservesCyrillic = false;
          return result;
        }
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ-–∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
      const targetFont = analysis.recommendedFont;
      
      try {
        pdf.setFont(targetFont, 'normal');
        this.loadedFonts.add(targetFont);
        
        result.success = true;
        result.selectedFont = targetFont;
        
        console.log(`‚úÖ Font set successfully: ${targetFont}`);

      } catch (fontError) {
        console.warn(`‚ö†Ô∏è Failed to set ${targetFont}, falling back to Arial...`);
        
        // Fallback –∫ Arial
        pdf.setFont('Arial', 'normal');
        result.selectedFont = 'Arial';
        result.success = true;
        result.warnings.push(`Font ${targetFont} failed, using Arial`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      if (analysis.needsTransliteration && !result.preservesCyrillic) {
        result.warnings.push(`${analysis.problemChars.length} characters will be transliterated`);
        result.appliedTransliterations = analysis.problemChars.length;
      }

    } catch (error) {
      console.error('‚ùå Font setup failed:', error);
      result.warnings.push(`Setup failed: ${error}`);
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
      try {
        pdf.setFont('Arial', 'normal');
        result.selectedFont = 'Arial';
        result.success = true;
        result.warnings.push('Emergency fallback to Arial');
      } catch {
        result.success = false;
        result.warnings.push('All fonts failed');
      }
    }

    return result;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  public static analyzeText(text: string): TextAnalysis {
    if (!text) {
      return {
        hasLatinExtended: false,
        hasCyrillic: false,
        hasSpecialChars: false,
        detectedLanguages: ['en'],
        problemChars: [],
        recommendedFont: 'Arial',
        needsTransliteration: false
      };
    }

    const analysis: TextAnalysis = {
      hasLatinExtended: false,
      hasCyrillic: false,
      hasSpecialChars: false,
      detectedLanguages: [],
      problemChars: [],
      recommendedFont: 'Arial',
      needsTransliteration: false
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    if (/[–ê-—è]/u.test(text)) {
      analysis.hasCyrillic = true;
      analysis.detectedLanguages.push('ru');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ª–∞—Ç–∏–Ω–∏—Ü—É
    if (/[√Ä-√øƒÄ-≈æ]/.test(text)) {
      analysis.hasLatinExtended = true;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º
    if (/[ƒÅƒçƒìƒ£ƒ´ƒ∑ƒº≈Ü≈°≈´≈æ]/i.test(text)) {
      analysis.detectedLanguages.push('lv'); // –õ–∞—Ç—ã—à—Å–∫–∏–π
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const problemChars = new Set<string>();
    for (const char of text) {
      if (this.UNICODE_REPLACEMENTS.has(char)) {
        problemChars.add(char);
      }
    }
    analysis.problemChars = Array.from(problemChars);
    analysis.needsTransliteration = analysis.problemChars.length > 0;

    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º Arial –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
    analysis.recommendedFont = 'Arial';

    if (analysis.detectedLanguages.length === 0) {
      analysis.detectedLanguages.push('en');
    }

    return analysis;
  }

  /**
   * üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–º–æ–¥–∑–∏
   */
  public static smartCleanText(text: string, preserveCyrillic: boolean = false): string {
    if (!text) return '';

    let cleaned = String(text);

    // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ (–∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)
    cleaned = cleaned.replace(/[\u{1F000}-\u{1FFFF}]/gu, '');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤
    for (const [unicode, replacement] of this.UNICODE_REPLACEMENTS) {
      if (cleaned.includes(unicode)) {
        cleaned = cleaned.replace(new RegExp(unicode, 'g'), replacement);
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleaned = cleaned
      .replace(/[\\u200B-\\u200D\\uFEFF]/g, '') // –ù–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/\\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .trim();

    // –ï—Å–ª–∏ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –∑–∞–º–µ–Ω—è–µ–º –µ—ë
    if (!preserveCyrillic) {
      cleaned = cleaned.replace(/[^\\x20-\\x7E\\u00A0-\\u00FF]/g, '');
    }

    return cleaned.trim();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É
   */
  private static shouldPreserveCyrillic(text: string): boolean {
    const cyrillicMatches = text.match(/[–∞-—è—ë]/gi);
    const totalLetters = text.match(/[a-zA-Z–∞-—è—ë]/gi);
    
    if (!cyrillicMatches || !totalLetters) {
      return false;
    }
    
    const cyrillicPercentage = cyrillicMatches.length / totalLetters.length;
    return cyrillicPercentage > 0.2;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  public static clearCache(): void {
    this.loadedFonts.clear();
    console.log('üßπ Font cache cleared');
  }
}