/**
 * FontManagerEnhanced.ts - –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö Unicode —à—Ä–∏—Ñ—Ç–æ–≤
 * –í–µ—Ä—Å–∏—è 3.0 - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Unicode —á–µ—Ä–µ–∑ base64 –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
 */

import { jsPDF } from 'jspdf';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º base64 –≤–µ—Ä—Å–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤
import { RobotoRegularBase64 } from '../assets/fonts/RobotoRegular';
import { RobotoBoldBase64 } from '../assets/fonts/RobotoBold';
import { DejaVuSansBase64 } from '../assets/fonts/DejaVuSans';

export interface CustomFontInfo {
  name: string;
  style: 'normal' | 'bold' | 'italic' | 'bolditalic';
  weight: number;
  unicodeSupport: string[];
  fontData?: string; // Base64 encoded font
  loaded: boolean;
  description: string;
}

export interface FontLoadResult {
  success: boolean;
  fontName: string;
  error?: string;
}

export class FontManagerEnhanced {
  private static loadedFonts = new Map<string, boolean>();
  private static fontDataCache = new Map<string, string>();
  
  /**
   * –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö base64 —à—Ä–∏—Ñ—Ç–æ–≤
   */
  private static readonly EMBEDDED_FONTS: Record<string, { normal?: string; bold?: string }> = {
    'Roboto': {
      normal: RobotoRegularBase64,
      bold: RobotoBoldBase64
    },
    'DejaVuSans': {
      normal: DejaVuSansBase64,
      bold: DejaVuSansBase64 // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –¥–ª—è bold –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ
    }
  };

  /**
   * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö
   */
  public static readonly CUSTOM_FONTS: Record<string, CustomFontInfo> = {
    'Roboto': {
      name: 'Roboto',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin', 'latin-ext', 'cyrillic', 'cyrillic-ext', 'greek', 'greek-ext'],
      loaded: false,
      description: 'Roboto - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–ª–Ω–æ–π Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    },
    'DejaVuSans': {
      name: 'DejaVuSans',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin', 'latin-ext', 'cyrillic', 'cyrillic-ext', 'greek', 'greek-ext', 'arabic'],
      loaded: false,
      description: 'DejaVu Sans - –æ—Ç–∫—Ä—ã—Ç—ã–π —à—Ä–∏—Ñ—Ç —Å —à–∏—Ä–æ–∫–æ–π Unicode –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    }
  };

  /**
   * –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã jsPDF (fallback)
   */
  public static readonly BUILTIN_FONTS: Record<string, CustomFontInfo> = {
    'helvetica': {
      name: 'helvetica',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin'],
      loaded: true,
      description: 'Helvetica - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –±–∞–∑–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    },
    'times': {
      name: 'times',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin'],
      loaded: true,
      description: 'Times - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –±–∞–∑–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'
    },
    'courier': {
      name: 'courier',
      style: 'normal',
      weight: 400,
      unicodeSupport: ['latin'],
      loaded: true,
      description: 'Courier - –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç'
    }
  };

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –≤ jsPDF
   */
  public static async loadCustomFont(
    pdf: jsPDF, 
    fontName: string, 
    style: 'normal' | 'bold' = 'normal'
  ): Promise<FontLoadResult> {
    const cacheKey = `${fontName}_${style}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.loadedFonts.has(cacheKey) && this.loadedFonts.get(cacheKey)) {
      return { success: true, fontName };
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ base64 —à—Ä–∏—Ñ—Ç–∞
      const embeddedFont = this.EMBEDDED_FONTS[fontName];
      if (!embeddedFont || !embeddedFont[style]) {
        throw new Error(`Font ${fontName} (${style}) not found in embedded fonts`);
      }

      const fontData = embeddedFont[style];
      if (!fontData) {
        throw new Error(`Font data for ${fontName} (${style}) is empty`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç –≤ jsPDF
      const fontId = `${fontName}-${style}`;
      pdf.addFileToVFS(`${fontId}.ttf`, fontData);
      pdf.addFont(`${fontId}.ttf`, fontName, style);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
      pdf.setFont(fontName, style);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.loadedFonts.set(cacheKey, true);
      console.log(`‚úÖ Custom font loaded: ${fontName} (${style})`);
      
      return { success: true, fontName };

    } catch (error) {
      console.error(`‚ùå Failed to load custom font ${fontName}:`, error);
      return { 
        success: false, 
        fontName,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  public static detectLanguages(text: string): string[] {
    const languages: string[] = [];
    
    // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
    if (/[\u0400-\u04FF]/.test(text)) {
      languages.push('cyrillic');
    }
    
    // –õ–∞—Ç–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if (/[\u0100-\u017F]/.test(text)) {
      languages.push('latin-ext');
    }
    
    // –ì—Ä–µ—á–µ—Å–∫–∏–π
    if (/[\u0370-\u03FF]/.test(text)) {
      languages.push('greek');
    }
    
    // –ê—Ä–∞–±—Å–∫–∏–π
    if (/[\u0600-\u06FF]/.test(text)) {
      languages.push('arabic');
    }
    
    // –ò–≤—Ä–∏—Ç
    if (/[\u0590-\u05FF]/.test(text)) {
      languages.push('hebrew');
    }
    
    // CJK (–∫–∏—Ç–∞–π—Å–∫–∏–π, —è–ø–æ–Ω—Å–∫–∏–π, –∫–æ—Ä–µ–π—Å–∫–∏–π)
    if (/[\u4E00-\u9FFF\u3040-\u309F\u30A0-\u30FF\uAC00-\uD7AF]/.test(text)) {
      languages.push('cjk');
    }
    
    // –ë–∞–∑–æ–≤–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞
    if (/[A-Za-z]/.test(text)) {
      languages.push('latin');
    }
    
    return languages.length > 0 ? languages : ['latin'];
  }

  /**
   * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —è–∑—ã–∫–æ–≤
   */
  public static selectOptimalFont(languages: string[]): { fontName: string; useCustom: boolean } {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
    const needsCustomFont = languages.some(lang => 
      ['cyrillic', 'cyrillic-ext', 'greek', 'greek-ext', 'arabic', 'hebrew', 'cjk', 'latin-ext'].includes(lang)
    );

    if (!needsCustomFont) {
      // –î–ª—è –±–∞–∑–æ–≤–æ–π –ª–∞—Ç–∏–Ω–∏—Ü—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
      return { fontName: 'helvetica', useCustom: false };
    }

    // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
    if (languages.includes('arabic') || languages.includes('hebrew')) {
      return { fontName: 'DejaVuSans', useCustom: true };
    }
    
    if (languages.includes('cjk')) {
      // –î–ª—è CJK –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º DejaVuSans)
      return { fontName: 'DejaVuSans', useCustom: true };
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Roboto
    return { fontName: 'Roboto', useCustom: true };
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
   */
  public static async setupFontsForText(
    pdf: jsPDF, 
    texts: string[],
    preferredFont?: string
  ): Promise<string> {
    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const combinedText = texts.join(' ');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏
      const languages = this.detectLanguages(combinedText);
      console.log(`üîç Detected languages: ${languages.join(', ')}`);
      
      // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
      const { fontName, useCustom } = preferredFont 
        ? { fontName: preferredFont, useCustom: !this.BUILTIN_FONTS[preferredFont] }
        : this.selectOptimalFont(languages);
      
      console.log(`üéØ Selected font: ${fontName} (custom: ${useCustom})`);
      
      if (useCustom) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        const normalResult = await this.loadCustomFont(pdf, fontName, 'normal');
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å bold –≤–µ—Ä—Å–∏—é
        await this.loadCustomFont(pdf, fontName, 'bold').catch(() => {
          console.log(`‚ö†Ô∏è Bold version of ${fontName} not available`);
        });
        
        if (normalResult.success) {
          return fontName;
        } else {
          // Fallback –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–∞–º
          return this.setupBuiltinFont(pdf);
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        return this.setupBuiltinFont(pdf, fontName);
      }
      
    } catch (error) {
      console.error('‚ùå Font setup failed:', error);
      return this.setupBuiltinFont(pdf);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
   */
  private static setupBuiltinFont(pdf: jsPDF, fontName: string = 'helvetica'): string {
    try {
      pdf.setFont(fontName, 'normal');
      console.log(`‚úÖ Builtin font set: ${fontName}`);
      return fontName;
    } catch {
      // Final fallback
      pdf.setFont('helvetica', 'normal');
      console.log(`‚úÖ Final fallback font set: helvetica`);
      return 'helvetica';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
   */
  public static validateTextSupport(text: string, fontName: string): {
    supported: boolean;
    unsupportedChars: string[];
    recommendation?: string;
  } {
    const languages = this.detectLanguages(text);
    const fontInfo = { ...this.CUSTOM_FONTS, ...this.BUILTIN_FONTS }[fontName];
    
    if (!fontInfo) {
      return { 
        supported: false, 
        unsupportedChars: [],
        recommendation: 'Use Roboto or DejaVuSans for better Unicode support'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–æ–≤
    const unsupportedLanguages = languages.filter(lang => 
      !fontInfo.unicodeSupport.includes(lang)
    );

    if (unsupportedLanguages.length === 0) {
      return { supported: true, unsupportedChars: [] };
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const unsupportedChars = new Set<string>();
    const chars = text.split('');
    
    chars.forEach(char => {
      const charCode = char.charCodeAt(0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã Unicode
      if (unsupportedLanguages.includes('cyrillic') && charCode >= 0x0400 && charCode <= 0x04FF) {
        unsupportedChars.add(char);
      }
      if (unsupportedLanguages.includes('greek') && charCode >= 0x0370 && charCode <= 0x03FF) {
        unsupportedChars.add(char);
      }
      // ... –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    });

    return {
      supported: false,
      unsupportedChars: Array.from(unsupportedChars),
      recommendation: `Font ${fontName} doesn't support: ${unsupportedLanguages.join(', ')}. Use DejaVuSans or Roboto instead.`
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö
   */
  public static getAvailableFonts(): Array<CustomFontInfo & { isBuiltin: boolean }> {
    const customFonts = Object.values(this.CUSTOM_FONTS).map(font => ({
      ...font,
      isBuiltin: false
    }));
    
    const builtinFonts = Object.values(this.BUILTIN_FONTS).map(font => ({
      ...font,
      isBuiltin: true
    }));
    
    return [...customFonts, ...builtinFonts];
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —à—Ä–∏—Ñ—Ç–æ–≤
   */
  public static clearCache(): void {
    this.loadedFonts.clear();
    this.fontDataCache.clear();
    console.log('üßπ Font cache cleared');
  }
}
