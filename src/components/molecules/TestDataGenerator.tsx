import React from 'react';
import * as XLSX from 'xlsx';
import Button from '../atoms/Button';

interface TestDataGeneratorProps {
  onFileGenerated?: (file: File) => void;
}

const TestDataGenerator: React.FC<TestDataGeneratorProps> = ({ onFileGenerated }) => {

  const createTestExcelFile = () => {
    // Create a new workbook
    const wb = XLSX.utils.book_new();

    // Sheet 1: Multilingual Text Test
    const multilingualData = [
      // Headers in different languages
      ['English', '–†—É—Å—Å–∫–∏–π', 'Espa√±ol', 'Fran√ßais', 'Deutsch', '‰∏≠Êñá', 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'],

      // Row 1: Greetings
      ['Hello World', '–ü—Ä–∏–≤–µ—Ç –º–∏—Ä', 'Hola mundo', 'Bonjour monde', 'Hallo Welt', '‰Ω†Â•Ω‰∏ñÁïå', 'ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ', '‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ'],

      // Row 2: Numbers and currencies
      ['Numbers: 123', '–ß–∏—Å–ª–∞: 456', 'N√∫meros: 789', 'Nombres: 012', 'Zahlen: 345', 'Êï∞Â≠ó: 678', 'ÿ£ÿ±ŸÇÿßŸÖ: 901', '‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ: 234'],

      // Row 3: Special characters
      ['Symbols: @#$%^&*', '–°–∏–º–≤–æ–ª—ã: !?()[]{}', 'S√≠mbolos: <>+=|\\', 'Symboles: ~`\'"', 'Symbole: ¬±√ó√∑‚â†', 'Á¨¶Âè∑: ÔΩûÔø•¬•‚Ç¨', 'ÿ±ŸÖŸàÿ≤: ÿüÔºÅ√ó√∑¬±', '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï: ‚Çπ‚Ç¨$¬£¬•'],

      // Row 4: Long text wrapping test
      ['This is a very long text that should test text wrapping capabilities in PDF generation and see how it handles overflow',
       '–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è',
       'Este es un texto muy largo para probar las capacidades de ajuste de texto en la generaci√≥n de PDF',
       'Ceci est un texte tr√®s long pour tester les capacit√©s d\'ajustement du texte dans la g√©n√©ration PDF',
       'Dies ist ein sehr langer Text zum Testen der Textumbruch-Funktionen bei der PDF-Generierung',
       'ËøôÊòØ‰∏Ä‰∏™ÂæàÈïøÁöÑÊñáÊú¨ÔºåÁî®‰∫éÊµãËØïPDFÁîüÊàê‰∏≠ÁöÑÊñáÊú¨Êç¢Ë°åÂäüËÉΩ‰ª•ÂèäÂ¶Ç‰ΩïÂ§ÑÁêÜÊ∫¢Âá∫ÊÉÖÂÜµ',
       'Ÿáÿ∞ÿß ŸÜÿµ ÿ∑ŸàŸäŸÑ ÿ¨ÿØÿßŸã ŸÑÿßÿÆÿ™ÿ®ÿßÿ± ŸÇÿØÿ±ÿßÿ™ ÿßŸÑÿ™ŸÅÿßŸÅ ÿßŸÑŸÜÿµ ŸÅŸä ÿ™ŸàŸÑŸäÿØ PDF ŸàŸÖÿπÿ±ŸÅÿ© ŸÉŸäŸÅŸäÿ© ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑŸÅŸäÿ∂',
       '‡§Ø‡§π ‡§¨‡§π‡•Å‡§§ ‡§≤‡§Ç‡§¨‡§æ ‡§™‡§æ‡§† ‡§π‡•à ‡§ú‡•ã PDF ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§† ‡§≤‡§™‡•á‡§ü‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à'],

      // Row 5: Dates and mixed content
      ['Date: 2024-01-15', '–î–∞—Ç–∞: 15.01.2024', 'Fecha: 15/01/2024', 'Date: 15-01-2024', 'Datum: 15.01.2024', 'Êó•Êúü: 2024Âπ¥1Êúà15Êó•', 'ÿßŸÑÿ™ÿßÿ±ŸäÿÆ: Ÿ°Ÿ•/Ÿ†Ÿ°/Ÿ¢Ÿ†Ÿ¢Ÿ§', '‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï: ‡•ß‡•´/‡•¶‡•ß/‡•®‡•¶‡•®‡•™'],

      // Row 6: Prices and currency
      ['Price: $99.99', '–¶–µ–Ω–∞: 1999‚ÇΩ', 'Precio: ‚Ç¨89.50', 'Prix: 75.25‚Ç¨', 'Preis: 85,00‚Ç¨', '‰ª∑Ê†º: ¬•688', 'ÿßŸÑÿ≥ÿπÿ±: 299 ÿ±.ÿ≥', '‡§Æ‡•Ç‡§≤‡•ç‡§Ø: ‚Çπ2,999']
    ];

    const ws1 = XLSX.utils.aoa_to_sheet(multilingualData);
    XLSX.utils.book_append_sheet(wb, ws1, 'Multilingual Test');

    // Sheet 2: Data Types and Numbers
    const dataTypesData = [
      ['Data Type', 'Example', 'Numeric Value', 'Formatted', 'Notes'],
      ['Text', 'Sample Text', '', 'N/A', 'Plain text content'],
      ['Small Integer', '42', 42, '42', 'Whole number'],
      ['Large Integer', '1234567890', 1234567890, '1,234,567,890', 'Big number'],
      ['Decimal', '3.14159', 3.14159, '3.14', 'Pi approximation'],
      ['Currency', '$1,234.56', 1234.56, '$1,234.56', 'US Dollar'],
      ['Percentage', '75%', 0.75, '75.0%', 'Three quarters'],
      ['Scientific', '1.23E+10', 12300000000, '1.23√ó10¬π‚Å∞', 'Scientific notation'],
      ['Negative', '-456.789', -456.789, '(456.79)', 'Negative number'],
      ['Zero', '0', 0, '0.00', 'Zero value'],
      ['Fraction', '3/4', 0.75, '¬æ', 'Fraction representation'],
      ['Boolean True', 'TRUE', 1, '‚úì', 'Boolean true'],
      ['Boolean False', 'FALSE', 0, '‚úó', 'Boolean false'],
      ['Empty Cell', '', '', '', 'Blank content'],
      ['Unicode Emoji', 'üåçüöÄüíé‚ú®üéâüìäüí∞', '', 'N/A', 'Unicode symbols and emoji']
    ];

    const ws2 = XLSX.utils.aoa_to_sheet(dataTypesData);
    XLSX.utils.book_append_sheet(wb, ws2, 'Data Types');

    // Sheet 3: Wide Table (many columns)
    const wideTableHeaders = [
      'ID', 'First Name', 'Last Name', 'Email Address', 'Phone Number',
      'Street Address', 'City', 'State/Region', 'Country', 'Postal Code',
      'Department', 'Job Title', 'Manager', 'Hire Date', 'Salary',
      'Performance Rating', 'Languages', 'Skills', 'Notes', 'Status'
    ];

    const wideTableData = [
      wideTableHeaders,
      [1, 'John', 'Doe', 'john.doe@company.com', '+1-555-0123', '123 Main Street', 'New York', 'NY', 'USA', '10001', 'Engineering', 'Senior Software Developer', 'Jane Smith', '2022-03-15', 95000, 'Excellent', 'English, Spanish', 'React, TypeScript, Node.js', 'Top performer, ready for promotion', 'Active'],
      [2, '–ê–Ω–Ω–∞', '–ò–≤–∞–Ω–æ–≤–∞', 'anna.ivanova@company.ru', '+7-495-123-4567', '—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5', '–ú–æ—Å–∫–≤–∞', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.', '–†–æ—Å—Å–∏—è', '101000', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É', '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', '2021-06-01', 75000, '–û—Ç–ª–∏—á–Ω–æ', '–†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 'SEO, PPC, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á', '–ê–∫—Ç–∏–≤–Ω—ã–π'],
      [3, 'Mar√≠a', 'Garc√≠a L√≥pez', 'maria.garcia@company.es', '+34-91-123-4567', 'Calle Mayor, 25, 3¬∫ B', 'Madrid', 'Comunidad de Madrid', 'Espa√±a', '28001', 'Ventas', 'Representante de Ventas', 'Carlos L√≥pez', '2023-01-10', 55000, 'Bueno', 'Espa√±ol, Ingl√©s, Franc√©s', 'CRM, Negociaci√≥n', 'Excelente trato con clientes', 'Activo'],
      [4, 'Jean-Pierre', 'Dupont', 'jp.dupont@company.fr', '+33-1-23-45-67-89', '15 Rue de la Paix, Apt 12', 'Paris', '√éle-de-France', 'France', '75001', 'Finance', 'Comptable Senior', 'Sophie Martin', '2020-09-22', 65000, 'Tr√®s bien', 'Fran√ßais, Anglais', 'SAP, Excel, Audit', 'Tr√®s rigoureux et pr√©cis', 'Actif'],
      [5, 'Â±±Áî∞', 'Â§™ÈÉé', 'yamada.taro@company.jp', '+81-3-1234-5678', 'Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫Á•ûÂçó1-2-3', 'Êù±‰∫¨', 'Êù±‰∫¨ÈÉΩ', 'Êó•Êú¨', '150-0001', 'ÈñãÁô∫ÈÉ®', '„Ç∑„Éã„Ç¢„Éó„É≠„Ç∞„É©„Éû„Éº', 'Áî∞‰∏≠Ëä±Â≠ê', '2022-11-30', 8000000, 'ÂÑ™ÁßÄ', 'Êó•Êú¨Ë™û, Ëã±Ë™û', 'Java, Python, AWS', 'ÊäÄË°ìÂäõ„ÅåÈ´ò„Åè„ÄÅ„ÉÅ„Éº„É†„ÅÆ„É™„Éº„ÉÄ„ÉºÁöÑÂ≠òÂú®', '„Ç¢„ÇØ„ÉÜ„Ç£„Éñ']
    ];

    const ws3 = XLSX.utils.aoa_to_sheet(wideTableData);
    XLSX.utils.book_append_sheet(wb, ws3, 'Wide Table');

    // Sheet 4: Special Characters and Symbols
    const specialCharData = [
      ['Category', 'Characters', 'Description', 'Use Case'],
      ['Mathematical', '‚àë ‚àÜ œÄ ‚àû ‚â§ ‚â• ‚â† ¬± ‚àö ‚à´ ‚àÇ ‚àá', 'Math symbols', 'Scientific documents'],
      ['Arrows', '‚Üê ‚Üí ‚Üë ‚Üì ‚Üî ‚Üï ‚üµ ‚ü∂ ‚áí ‚áî ‚Üó ‚Üò', 'Directional arrows', 'Flow charts, directions'],
      ['Bullets & Lists', '‚Ä¢ ‚ó¶ ‚ñ™ ‚ñ´ ‚óã ‚óè ‚óÜ ‚óá ‚ñ† ‚ñ° ‚ñ≤ ‚ñº', 'List markers', 'Bullet points, lists'],
      ['Currency Symbols', '$ ‚Ç¨ ¬£ ¬• ‚Çπ ‚ÇΩ ‚Ç© ‚Ç™ ‚Ç´ ‚Ç¶ ‚Ç° ‚Çµ', 'World currencies', 'Financial documents'],
      ['Fractions', '¬Ω ‚Öì ¬º ‚Öï ‚Öô ‚Öõ ‚Öî ¬æ ‚Öñ ‚Öó ‚Öò ‚Öö', 'Common fractions', 'Measurements, recipes'],
      ['Superscript', 'x¬≤ y¬≥ z‚Å¥ E=mc¬≤ a‚Å∞ b¬π c¬≤', 'Raised numbers/letters', 'Mathematical formulas'],
      ['Subscript', 'H‚ÇÇO CO‚ÇÇ CH‚ÇÑ H‚ÇÇSO‚ÇÑ C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ', 'Lowered numbers/letters', 'Chemical formulas'],
      ['Diacritics Latin', 'caf√© na√Øve r√©sum√© pi√±ata fa√ßade', 'Accented characters', 'International names'],
      ['Quotation Marks', '"Double" \'Single\' ‚ÄûGerman" ¬´French¬ª ‚ÄûPolish"', 'Various quote styles', 'Text formatting'],
      ['Dashes & Spaces', 'Hyphen- En‚Äìdash Em‚Äîdash Non-breaking space', 'Different dash types', 'Typography'],
      ['Mixed Scripts', 'Hello ŸÖÿ±ÿ≠ÿ®ÿß ‰Ω†Â•Ω –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π ŒìŒµŒπŒ±', 'Multiple writing systems', 'International content'],
      ['Emoji & Symbols', 'üåç üöÄ üíé ‚ú® üéâ üìä üí∞ ‚≠ê ‚ù§Ô∏è üî•', 'Modern unicode symbols', 'Social media, modern docs'],
      ['Technical', '¬© ¬Æ ‚Ñ¢ ¬ß ¬∂ ‚Ä† ‚Ä° ‚Ä¢ ‚Ä∞ ‚Ä±', 'Legal and technical', 'Legal documents'],
      ['Weather & Time', '‚òÄ ‚òÅ ‚òÇ ‚ùÑ ‚ö° üåô ‚è∞ üìÖ üïê üïë', 'Time and weather', 'Reports, schedules']
    ];

    const ws4 = XLSX.utils.aoa_to_sheet(specialCharData);
    XLSX.utils.book_append_sheet(wb, ws4, 'Special Characters');

    // Sheet 5: Layout Challenges
    const layoutData = [
      ['Short', 'Medium Length Text', 'This is a significantly longer text that will test column width calculations', '', 'Empty'],
      ['A', 'Longer header that might cause issues', 'Content', 'More content here', 'End'],
      ['', '', '', '', ''],
      ['Data', '', 'Some data', '', 'Final'],
      ['Test', 'Multiple\nLines\nIn\nOne\nCell', 'Normal text', 'URL: https://example.com/very/long/path/to/resource', ''],
      ['Numbers', '123,456.789', '-999.99', '0.001', '1,000,000,000'],
      ['Final Row', 'Last cell with some content', '', 'Almost done', 'The End!']
    ];

    const ws5 = XLSX.utils.aoa_to_sheet(layoutData);
    XLSX.utils.book_append_sheet(wb, ws5, 'Layout Test');

    return wb;
  };

  const generateAndDownload = () => {
    try {
      const wb = createTestExcelFile();
      const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });

      // Create blob and file
      const blob = new Blob([wbout], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const file = new File([blob], 'excel-to-pdf-test.xlsx', {
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      });

      // Download file
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'excel-to-pdf-test.xlsx';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      // Notify parent component
      if (onFileGenerated) {
        onFileGenerated(file);
      }

      console.log('‚úÖ Test Excel file generated successfully!');
      console.log('The file contains:');
      console.log('‚Ä¢ Multilingual Test - 8 languages including RTL');
      console.log('‚Ä¢ Data Types - Various data formats and numbers');
      console.log('‚Ä¢ Wide Table - 20 columns with international data');
      console.log('‚Ä¢ Special Characters - Unicode, symbols, emoji');
      console.log('‚Ä¢ Layout Test - Edge cases and formatting challenges');

    } catch (error) {
      console.error('Error generating test file:', error);
      alert('Error generating test file. Check console for details.');
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
      <h3 className="text-lg font-semibold mb-4">üìä Test Data Generator</h3>
      <p className="text-gray-600 mb-4">
        Generate a comprehensive test Excel file with multilingual content, special characters,
        various data types, and layout challenges to test all PDF conversion features.
      </p>

      <div className="mb-4">
        <h4 className="font-medium mb-2">Test file includes:</h4>
        <ul className="text-sm text-gray-600 space-y-1">
          <li>‚Ä¢ <strong>Multilingual Test:</strong> 8 languages (English, Russian, Spanish, French, German, Chinese, Arabic, Hindi)</li>
          <li>‚Ä¢ <strong>Data Types:</strong> Numbers, dates, currencies, percentages, booleans, emoji</li>
          <li>‚Ä¢ <strong>Wide Table:</strong> 20 columns with international employee data</li>
          <li>‚Ä¢ <strong>Special Characters:</strong> Math symbols, arrows, fractions, diacritics</li>
          <li>‚Ä¢ <strong>Layout Test:</strong> Long text, empty cells, mixed content</li>
        </ul>
      </div>

      <Button
        onClick={generateAndDownload}
        className="w-full sm:w-auto"
      >
        üìÅ Generate Test Excel File
      </Button>

      <p className="text-xs text-gray-500 mt-2">
        File will be saved as "excel-to-pdf-test.xlsx" and contains realistic test data
        for comprehensive PDF conversion testing.
      </p>
    </div>
  );
};

export default TestDataGenerator;
