import React, { useState } from 'react'\nimport { \n  validatePDFFiles, \n  mergePDFFiles, \n  downloadPDF, \n  generateMergedFilename,\n  formatFileSize,\n  PDFValidationResult \n} from '../services/pdfService'\n\ninterface MergePDFProps {\n  files: FileList | null\n  onClose: () => void\n}\n\ntype ProcessingState = 'idle' | 'validating' | 'merging' | 'downloading' | 'success' | 'error'\n\nconst MergePDF: React.FC<MergePDFProps> = ({ files, onClose }) => {\n  const [processingState, setProcessingState] = useState<ProcessingState>('idle')\n  const [errorMessage, setErrorMessage] = useState<string>('')\n  const [validationResult, setValidationResult] = useState<PDFValidationResult | null>(null)\n  const [mergedFileSize, setMergedFileSize] = useState<number>(0)\n\n  // Validate files on component mount\n  React.useEffect(() => {\n    if (files) {\n      setProcessingState('validating')\n      const result = validatePDFFiles(files)\n      setValidationResult(result)\n      \n      if (!result.isValid) {\n        setErrorMessage(result.error || 'Invalid files')\n        setProcessingState('error')\n      } else {\n        setProcessingState('idle')\n        setErrorMessage('')\n      }\n    }\n  }, [files])\n\n  const handleMergePDF = async () => {\n    if (!validationResult?.validFiles.length) {\n      setErrorMessage('No valid files to merge')\n      setProcessingState('error')\n      return\n    }\n\n    try {\n      setProcessingState('merging')\n      setErrorMessage('')\n\n      const result = await mergePDFFiles(validationResult.validFiles)\n      \n      if (!result.success || !result.pdfBytes) {\n        setErrorMessage(result.error || 'Failed to merge PDF files')\n        setProcessingState('error')\n        return\n      }\n\n      setProcessingState('downloading')\n      setMergedFileSize(result.pdfBytes.length)\n      \n      const filename = generateMergedFilename(validationResult.validFiles)\n      downloadPDF(result.pdfBytes, filename)\n      \n      setProcessingState('success')\n    } catch (error) {\n      console.error('Merge error:', error)\n      setErrorMessage('An unexpected error occurred. Please try again.')\n      setProcessingState('error')\n    }\n  }\n\n  const getProcessingMessage = (): string => {\n    switch (processingState) {\n      case 'validating': return 'Validating files...'\n      case 'merging': return 'Merging PDF files...'\n      case 'downloading': return 'Preparing download...'\n      case 'success': return 'PDF merged successfully!'\n      default: return ''\n    }\n  }\n\n  const isProcessing = ['validating', 'merging', 'downloading'].includes(processingState)\n  const canMerge = processingState === 'idle' && validationResult?.isValid\n\n  return (\n    <div className=\"merge-pdf-container\">\n      <div className=\"merge-pdf-header\">\n        <h2 className=\"text-xl mb-8\">üîó Merge PDF Files</h2>\n        <button \n          onClick={onClose}\n          className=\"btn btn-secondary text-sm\"\n          style={{ padding: '8px 16px' }}\n        >\n          Back\n        </button>\n      </div>\n\n      {/* File List */}\n      {validationResult?.validFiles && (\n        <div className=\"file-list mb-24\">\n          <h3 className=\"text-base mb-16\">Selected Files ({validationResult.validFiles.length}):</h3>\n          <div className=\"file-items\">\n            {validationResult.validFiles.map((file, index) => (\n              <div key={index} className=\"file-item\">\n                <div className=\"file-info\">\n                  <span className=\"file-name text-sm\">{file.name}</span>\n                  <span className=\"file-size text-sm\" style={{ color: '#6B7280' }}>\n                    {formatFileSize(file.size)}\n                  </span>\n                </div>\n                <span className=\"file-status text-sm\" style={{ color: '#059669' }}>‚úì</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Processing State */}\n      {isProcessing && (\n        <div className=\"processing-state mb-24\">\n          <div className=\"processing-message text-base mb-16\">\n            {getProcessingMessage()}\n          </div>\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\"></div>\n          </div>\n        </div>\n      )}\n\n      {/* Success State */}\n      {processingState === 'success' && (\n        <div className=\"success-state mb-24\">\n          <div className=\"success-message text-base mb-16\" style={{ color: '#059669' }}>\n            ‚úÖ PDF merged successfully!\n          </div>\n          <div className=\"success-details text-sm\" style={{ color: '#6B7280' }}>\n            Final size: {formatFileSize(mergedFileSize)}\n          </div>\n        </div>\n      )}\n\n      {/* Error State */}\n      {processingState === 'error' && errorMessage && (\n        <div className=\"error-state mb-24\">\n          <div className=\"error-message text-base\" style={{ color: '#DC2626' }}>\n            ‚ùå {errorMessage}\n          </div>\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"merge-actions\">\n        {canMerge && (\n          <button \n            onClick={handleMergePDF}\n            className=\"btn btn-primary\"\n            disabled={isProcessing}\n          >\n            Merge {validationResult.validFiles.length} PDF{validationResult.validFiles.length > 1 ? 's' : ''}\n          </button>\n        )}\n        \n        {processingState === 'success' && (\n          <button \n            onClick={onClose}\n            className=\"btn btn-primary\"\n          >\n            Merge More Files\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default MergePDF"