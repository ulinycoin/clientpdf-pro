#!/usr/bin/env node

import https from 'https';
import { promises as dns } from 'dns';
import { URL } from 'url';
import util from 'util';

/**
 * –í–µ–±-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞ - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTTP —Å—Ç–∞—Ç—É—Å, SSL, DNS, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
 */
class WebsiteDiagnostics {
  constructor() {
    this.results = {};
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  async performHttpCheck(url) {
    return new Promise((resolve) => {
      const startTime = Date.now();
      const urlObj = new URL(url);
      
      const options = {
        hostname: urlObj.hostname,
        port: urlObj.port || 443,
        path: urlObj.pathname + urlObj.search,
        method: 'GET',
        timeout: 10000,
        headers: {
          'User-Agent': 'Website-Diagnostics/1.0 (Node.js)'
        }
      };

      const req = https.request(options, (res) => {
        const responseTime = Date.now() - startTime;
        
        let body = '';
        res.on('data', chunk => {
          body += chunk;
        });

        res.on('end', () => {
          resolve({
            success: true,
            statusCode: res.statusCode,
            statusMessage: res.statusMessage,
            responseTime,
            headers: res.headers,
            redirects: this.getRedirectInfo(res),
            bodySize: Buffer.byteLength(body, 'utf8'),
            ssl: res.socket && res.socket.authorized !== undefined ? {
              authorized: res.socket.authorized,
              cert: res.socket.getPeerCertificate()
            } : null
          });
        });
      });

      req.on('error', (err) => {
        const responseTime = Date.now() - startTime;
        resolve({
          success: false,
          error: err.message,
          code: err.code,
          responseTime,
          recommendation: this.getErrorRecommendation(err)
        });
      });

      req.on('timeout', () => {
        req.destroy();
        const responseTime = Date.now() - startTime;
        resolve({
          success: false,
          error: 'Request timeout (10s)',
          responseTime,
          recommendation: '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.'
        });
      });

      req.end();
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞—Ö
   */
  getRedirectInfo(res) {
    const location = res.headers.location;
    if (res.statusCode >= 300 && res.statusCode < 400 && location) {
      return {
        hasRedirect: true,
        location,
        permanent: res.statusCode === 301 || res.statusCode === 308
      };
    }
    return { hasRedirect: false };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS –∑–∞–ø–∏—Å–∏ –¥–æ–º–µ–Ω–∞
   */
  async checkDNS(hostname) {
    try {
      const [a, aaaa, mx, ns] = await Promise.allSettled([
        dns.resolve4(hostname).catch(() => []),
        dns.resolve6(hostname).catch(() => []),
        dns.resolveMx(hostname).catch(() => []),
        dns.resolveNs(hostname).catch(() => [])
      ]);

      return {
        success: true,
        records: {
          A: a.status === 'fulfilled' ? a.value : [],
          AAAA: aaaa.status === 'fulfilled' ? aaaa.value : [],
          MX: mx.status === 'fulfilled' ? mx.value : [],
          NS: ns.status === 'fulfilled' ? ns.value : []
        }
      };
    } catch (err) {
      return {
        success: false,
        error: err.message,
        recommendation: 'DNS —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥–æ–º–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
   */
  analyzeCertificate(cert) {
    if (!cert || !cert.valid_from) {
      return { valid: false, error: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
    }

    const now = new Date();
    const validFrom = new Date(cert.valid_from);
    const validTo = new Date(cert.valid_to);
    const daysUntilExpiry = Math.ceil((validTo - now) / (1000 * 60 * 60 * 24));

    return {
      valid: now >= validFrom && now <= validTo,
      subject: cert.subject,
      issuer: cert.issuer,
      validFrom: cert.valid_from,
      validTo: cert.valid_to,
      daysUntilExpiry,
      fingerprint: cert.fingerprint,
      serialNumber: cert.serialNumber,
      algorithm: cert.sigalg
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–∞–º
   */
  getErrorRecommendation(err) {
    const recommendations = {
      'ENOTFOUND': '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
      'ECONNREFUSED': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.',
      'ETIMEDOUT': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.',
      'CERT_HAS_EXPIRED': 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫. –û–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.',
      'UNABLE_TO_VERIFY_LEAF_SIGNATURE': '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.',
      'ECONNRESET': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º.'
    };
    
    return recommendations[err.code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.';
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  formatResults(url, result) {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ${url}`);
    console.log(`${'='.repeat(60)}\n`);

    if (result.http.success) {
      // HTTP Status
      const statusColor = result.http.statusCode < 400 ? '‚úÖ' : '‚ùå';
      console.log(`${statusColor} HTTP –°–¢–ê–¢–£–°: ${result.http.statusCode} ${result.http.statusMessage}`);
      
      // Response Time
      const timeColor = result.http.responseTime < 1000 ? '‚ö°' : result.http.responseTime < 3000 ? '‚ö†Ô∏è' : 'üêå';
      console.log(`${timeColor} –í–†–ï–ú–Ø –û–¢–ö–õ–ò–ö–ê: ${result.http.responseTime}ms`);
      
      // Body Size
      console.log(`üì¶ –†–ê–ó–ú–ï–† –û–¢–í–ï–¢–ê: ${(result.http.bodySize / 1024).toFixed(2)}KB`);

      // SSL Information
      if (result.http.ssl && result.http.ssl.cert) {
        const cert = this.analyzeCertificate(result.http.ssl.cert);
        console.log(`\nüîí SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢:`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${cert.valid ? '‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' : '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}`);
        if (cert.valid) {
          console.log(`   –î–æ–º–µ–Ω: ${cert.subject?.CN || 'N/A'}`);
          console.log(`   –ò–∑–¥–∞—Ç–µ–ª—å: ${cert.issuer?.O || cert.issuer?.CN || 'N/A'}`);
          console.log(`   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${cert.validTo}`);
          console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${cert.daysUntilExpiry}`);
          if (cert.daysUntilExpiry < 30) {
            console.log(`   ‚ö†Ô∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${cert.daysUntilExpiry} –¥–Ω–µ–π!`);
          }
        }
      }

      // Redirects
      if (result.http.redirects.hasRedirect) {
        console.log(`\nüîÑ –†–ï–î–ò–†–ï–ö–¢:`);
        console.log(`   –¢–∏–ø: ${result.http.redirects.permanent ? '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π (301/308)' : '–í—Ä–µ–º–µ–Ω–Ω—ã–π (302/307)'}`);
        console.log(`   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${result.http.redirects.location}`);
      }

      // Important Headers
      console.log(`\nüìã –í–ê–ñ–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò:`);
      const importantHeaders = {
        'server': '–°–µ—Ä–≤–µ—Ä',
        'content-type': '–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        'content-encoding': '–°–∂–∞—Ç–∏–µ',
        'cache-control': '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
        'x-frame-options': 'X-Frame-Options',
        'strict-transport-security': 'HSTS',
        'content-security-policy': 'CSP'
      };
      
      Object.entries(importantHeaders).forEach(([header, description]) => {
        if (result.http.headers[header]) {
          console.log(`   ${description}: ${result.http.headers[header]}`);
        }
      });

    } else {
      console.log(`‚ùå HTTP –û–®–ò–ë–ö–ê: ${result.http.error}`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${result.http.responseTime}ms`);
      if (result.http.recommendation) {
        console.log(`üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ${result.http.recommendation}`);
      }
    }

    // 404 Analysis (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (result.alternatives && result.alternatives.length > 0) {
      console.log(`\nüîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï URL:`);
      result.alternatives.forEach(alt => {
        const status = alt.working ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${alt.url} (${alt.status})`);
      });
    }

    // 404 Content Analysis (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (result.content404Analysis) {
      console.log(`\nüîç –ê–ù–ê–õ–ò–ó 404 –°–¢–†–ê–ù–ò–¶–´:`);
      console.log(`   –ö–∞—Å—Ç–æ–º–Ω–∞—è 404: ${result.content404Analysis.hasCustom404 ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${result.content404Analysis.containsNavigation ? '‚úÖ' : '‚ùå'}`);
      if (result.content404Analysis.framework.length > 0) {
        console.log(`   –§—Ä–µ–π–º–≤–æ—Ä–∫: ${result.content404Analysis.framework.join(', ')}`);
      }
    }

    // DNS Information
    console.log(`\nüåê DNS –ó–ê–ü–ò–°–ò:`);
    if (result.dns.success) {
      const { records } = result.dns;
      if (records.A.length > 0) {
        console.log(`   A –∑–∞–ø–∏—Å–∏ (IPv4): ${records.A.join(', ')}`);
      }
      if (records.AAAA.length > 0) {
        console.log(`   AAAA –∑–∞–ø–∏—Å–∏ (IPv6): ${records.AAAA.join(', ')}`);
      }
      if (records.MX.length > 0) {
        console.log(`   MX –∑–∞–ø–∏—Å–∏: ${records.MX.map(mx => `${mx.exchange} (${mx.priority})`).join(', ')}`);
      }
      if (records.NS.length > 0) {
        console.log(`   NS –∑–∞–ø–∏—Å–∏: ${records.NS.join(', ')}`);
      }
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ DNS: ${result.dns.error}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –ø—Ä–∏ –æ—à–∏–±–∫–µ 404
   */
  async checkAlternatives(originalUrl, httpResult) {
    if (httpResult.statusCode !== 404) return null;

    const urlObj = new URL(originalUrl);
    const alternatives = [];

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const alternativeUrls = [
      `${urlObj.protocol}//${urlObj.hostname}`, // –ö–æ—Ä–µ–Ω—å –±–µ–∑ –ø—É—Ç–∏
      `${urlObj.protocol}//www.${urlObj.hostname}${urlObj.pathname}`, // –° www
      `${urlObj.protocol}//${urlObj.hostname}${urlObj.pathname}index.html`, // –° index.html
      `${urlObj.protocol}//${urlObj.hostname}${urlObj.pathname.slice(0, -1)}`, // –ë–µ–∑ trailing slash
    ].filter(alt => alt !== originalUrl);

    for (const altUrl of alternativeUrls.slice(0, 2)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
      try {
        const altResult = await this.performHttpCheck(altUrl);
        alternatives.push({
          url: altUrl,
          status: altResult.statusCode,
          working: altResult.success && altResult.statusCode < 400
        });
      } catch (err) {
        alternatives.push({
          url: altUrl,
          status: 'ERROR',
          working: false
        });
      }
    }

    return alternatives;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ 404 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  async analyze404Content(url) {
    return new Promise((resolve) => {
      const urlObj = new URL(url);
      
      const options = {
        hostname: urlObj.hostname,
        port: urlObj.port || 443,
        path: urlObj.pathname + urlObj.search,
        method: 'GET',
        timeout: 5000,
        headers: {
          'User-Agent': 'Website-Diagnostics-404-Analyzer/1.0'
        }
      };

      const req = https.request(options, (res) => {
        let body = '';
        res.on('data', chunk => {
          body += chunk;
        });

        res.on('end', () => {
          const analysis = {
            hasCustom404: !body.includes('404') || body.length > 1000,
            containsNavigation: body.includes('nav') || body.includes('menu'),
            hasSearch: body.includes('search'),
            suggestionsFound: [],
            framework: this.detectFramework(res.headers, body)
          };

          // –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
          const pathMatches = body.match(/href=["'][^"']*[^"']*["']/g) || [];
          analysis.suggestionsFound = pathMatches
            .slice(0, 5)
            .map(match => match.replace(/href=["']/, '').replace(/["']$/, ''));

          resolve(analysis);
        });
      });

      req.on('error', () => resolve(null));
      req.on('timeout', () => {
        req.destroy();
        resolve(null);
      });

      req.end();
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫/–ø–ª–∞—Ç—Ñ–æ—Ä–º—É
   */
  detectFramework(headers, body) {
    const frameworks = [];
    
    if (headers.server && headers.server.includes('cloudflare')) {
      frameworks.push('Cloudflare CDN');
    }
    if (headers['x-vercel-cache']) {
      frameworks.push('Vercel');
    }
    if (body.includes('__next')) {
      frameworks.push('Next.js');
    }
    if (body.includes('_app') || body.includes('vite')) {
      frameworks.push('Vite');
    }
    if (body.includes('react')) {
      frameworks.push('React');
    }

    return frameworks;
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async diagnose(url) {
    try {
      const urlObj = new URL(url);
      const hostname = urlObj.hostname;

      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É ${url}...`);

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º HTTP –∏ DNS –ø—Ä–æ–≤–µ—Ä–∫–∏
      const [httpResult, dnsResult] = await Promise.all([
        this.performHttpCheck(url),
        this.checkDNS(hostname)
      ]);

      let alternatives = null;
      let content404Analysis = null;

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è 404 –æ—à–∏–±–æ–∫
      if (httpResult.success && httpResult.statusCode === 404) {
        console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 404 –æ—à–∏–±–∫—É –¥–ª—è ${url}...`);
        [alternatives, content404Analysis] = await Promise.all([
          this.checkAlternatives(url, httpResult),
          this.analyze404Content(url)
        ]);
      }

      const result = {
        url,
        timestamp: new Date().toISOString(),
        http: httpResult,
        dns: dnsResult,
        alternatives,
        content404Analysis
      };

      this.formatResults(url, result);
      return result;

    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ ${url}:`, err.message);
      return {
        url,
        error: err.message,
        timestamp: new Date().toISOString()
      };
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const diagnostics = new WebsiteDiagnostics();
  
  const urls = [
    'https://localpdf.online/ru',
    'https://localpdf.online'
  ];

  console.log('üöÄ WEBSITE DIAGNOSTICS TOOL');
  console.log('–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤\n');

  for (const url of urls) {
    await diagnostics.diagnose(url);
  }

  console.log(`\n${'='.repeat(60)}`);
  console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  console.log(`${'='.repeat(60)}`);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export default WebsiteDiagnostics;